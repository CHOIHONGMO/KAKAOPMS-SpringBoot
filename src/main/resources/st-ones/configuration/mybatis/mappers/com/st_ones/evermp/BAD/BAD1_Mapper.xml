<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Fri Mar 02 08:25:38 KST 2012-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.st_ones.evermp.BAD.BAD1_Mapper">

	<!-- BAD1_020 -->
	<!-- 고객사 담당자 조회 -->
	<select id="bad1020_doSearch" parameterType="hashmap" resultType="hashmap">
		SELECT
          CVUR.GATE_CD
			, CVUR.USER_ID
			, CVUR.USER_ID AS ORI_USER_ID
			, CVUR.REG_DATE
			, CVUR.REG_USER_ID
			, CVUR.MOD_DATE
			, CVUR.MOD_USER_ID
			, CVUR.DEL_FLAG
			, CVUR.COMPANY_CD
			, <include refid="com.sql.nvl"/>(CVUR.MNG_YN, '0') AS MNG_YN
			, CVUR.APROVAL_USER_FLAG
			, CVUR.USER_TYPE
			, CVUR.WORK_TYPE
			, CVUR.USER_NM
			, CVUR.EMPLOYEE_NO
			, CVUR.DEPT_CD
			, <include refid="com.sql.dbo"/>getUserDeptInfo(CVUR.GATE_CD, CVUR.USER_ID, #{ses.langCd}) AS DEPT_NM
			, CVUR.POSITION_NM
			, CVUR.DUTY_NM
			, CVUR.TEL_NUM
			, CVUR.FAX_NUM
			, CVUR.CELL_NUM
			, CVUR.EMAIL
			, CVUR.ZIP_CD
			, CVUR.ADDR_1
			, CVUR.ADDR_2
			, CVUR.BUDGET_DEPT_CD
			, <include refid="com.sql.dbo"/>GETDEPTNAME(CVUR.GATE_CD, CVUR.COMPANY_CD, CVUR.BUDGET_DEPT_CD, #{ses.langCd}) AS BUDGET_DEPT_NM
			, <include refid="com.sql.nvl"/>(CVUR.WMS_FLAG, '0') AS WMS_FLAG
			, <include refid="com.sql.nvl"/>(CVUR.MY_SITE_FLAG, '0') AS MY_SITE_FLAG
			, <include refid="com.sql.nvl"/>(CVUR.BUDGET_FLAG, '0') AS BUDGET_FLAG
			, <include refid="com.sql.nvl"/>(CVUR.GR_FLAG, '0') AS GR_FLAG
			, <include refid="com.sql.nvl"/>(CVUR.FINANCIAL_FLAG, '0') AS FINANCIAL_FLAG
			, <include refid="com.sql.nvl"/>(CVUR.SMS_FLAG, '0') AS SMS_FLAG
			, <include refid="com.sql.nvl"/>(CVUR.MAIL_FLAG, '0') AS MAIL_FLAG
			, <include refid="com.sql.nvl"/>(CVUR.BLOCK_FLAG, '0') AS BLOCK_FLAG
			, CVUR.BLOCK_REASON
			, CSDM.SEQ AS CSDM_SEQ
            , CSDM.DELY_NM AS DELY_NM
			, CSDM.RECIPIENT_NM AS DELY_RECIPIENT_NM
			, <include refid="com.sql.stringMergeStart"/>'('<include refid="com.sql.stringMerge"/>CSDM.DELY_ZIP_CD<include refid="com.sql.stringMerge"/>') '<include refid="com.sql.stringMerge"/>CSDM.DELY_ADDR_1<include refid="com.sql.stringMerge"/>' '<include refid="com.sql.stringMerge"/><include refid="com.sql.nvl"/>(CSDM.DELY_ADDR_2,'')<include refid="com.sql.stringMergeEnd"/> AS DELY_ADDR
			, CUBL.CUBL_SQ AS CUBL_SQ
			, CUBL.CUBL_NM AS CUBL_NM
			, CUBL.COMPANY_NM AS CUBL_COMPANY_NM
			, CUBL.IRS_NUM AS CUBL_IRS_NUM
			, <include refid="com.sql.stringMergeStart"/>'('<include refid="com.sql.stringMerge"/>CUBL.CUBL_ZIP_CD<include refid="com.sql.stringMerge"/>') '<include refid="com.sql.stringMerge"/>CUBL.CUBL_ADDR1<include refid="com.sql.stringMerge"/>' '<include refid="com.sql.stringMerge"/><include refid="com.sql.nvl"/>(CUBL.CUBL_ADDR2,'')<include refid="com.sql.stringMergeEnd"/> AS CUBL_ADDR
			, CVUR.PW_WRONG_CNT
			, <include refid="com.sql.nvl"/>(CVUR.PW_RESET_FLAG, '0') AS PW_RESET_FLAG
			, CVUR.PW_RESET_DATE
			, CVUR.LAST_LOGIN_DATE
			, CVUR.IP_ADDR
			, <include refid="com.sql.nvl"/>(CVUR.USE_FLAG, '0') AS USE_FLAG
			, CVUR.PROGRESS_CD
			, CVUR.DATA_CREATION_TYPE
			, CVUR.AGREE_ATT_FILE_NUM
		 FROM STOCCVUR CVUR
		 LEFT OUTER JOIN STOCCSDM CSDM
			  ON (CSDM.GATE_CD  = CVUR.GATE_CD 
			  AND CSDM.CUST_CD  = CVUR.COMPANY_CD 
			  AND CSDM.SEQ      = CVUR.CSDM_SEQ 
			  AND CSDM.DEL_FLAG = '0' 
			  AND CSDM.USE_FLAG = '1')
		 LEFT OUTER JOIN STOCCUBL CUBL
			  ON (CUBL.GATE_CD  = CVUR.GATE_CD
			  AND CUBL.CUST_CD  = CVUR.COMPANY_CD
			  AND CUBL.CUBL_SQ  = CVUR.CUBL_SEQ 
			  AND CUBL.DEL_FLAG = '0' 
			  AND CUBL.USE_FLAG = '1')
        WHERE CVUR.GATE_CD    = #{ses.gateCd}
          AND CVUR.COMPANY_CD = #{ses.companyCd}
          AND CVUR.DEL_FLAG   = '0'
        <if test="USER_ID != '' and USER_ID != null">
            AND (UPPER(CVUR.USER_ID) <include refid="com.sql.likeL"/> UPPER(#{USER_ID}) <include refid="com.sql.likeR"/>
              OR UPPER(CVUR.USER_NM) <include refid="com.sql.likeL"/> UPPER(#{USER_NM}) <include refid="com.sql.likeR"/>)
        </if>
        <if test="USER_NM != '' and USER_NM != null">
            AND UPPER(CVUR.USER_NM) <include refid="com.sql.likeL"/> UPPER(#{USER_NM}) <include refid="com.sql.likeR"/>
        </if>
        <if test="DEPT_NM != '' and DEPT_NM != null">
            AND UPPER(CVUR.DEPT_NM) <include refid="com.sql.likeL"/> UPPER(#{DEPT_NM}) <include refid="com.sql.likeR"/>
        </if>
        <if test="BLOCK_YN != '' and BLOCK_YN != null">
            AND CVUR.BLOCK_FLAG = #{BLOCK_YN}
        </if>
    </select>

	<!-- BAD1_020 -->
	<!-- 고객사 담당자ID 중복 체크 -->
	<select id="bad1020_checkDupCustUser" parameterType="hashmap" resultType="java.lang.String">
		SELECT (CASE WHEN COUNT(*) <![CDATA[>]]> 0 THEN 'N' ELSE 'Y' END) AS USER_DUP_FLAG
		  FROM STOCCVUR
		 WHERE GATE_CD = #{ses.gateCd}
		   AND USER_ID = UPPER(#{ORI_USER_ID})
	</select>

	<!-- BAD1_020 -->
	<!-- 고객사 담당자 정보 수정 -->
	<update id="bad1020_doSave" parameterType="hashmap">
        UPDATE STOCCVUR
           SET DEL_FLAG = '0'
             , MOD_DATE = <include refid="com.sql.sysdate"/>
             , MOD_USER_ID = #{ses.userId}
             , WORK_TYPE = #{WORK_TYPE}
             , SMS_FLAG = #{SMS_FLAG}
             , MAIL_FLAG = #{MAIL_FLAG}
             , MY_SITE_FLAG = #{MY_SITE_FLAG}
             , WMS_FLAG = #{WMS_FLAG}
             , BUDGET_FLAG = #{BUDGET_FLAG}
             , GR_FLAG = #{GR_FLAG}
             , FINANCIAL_FLAG = #{FINANCIAL_FLAG}
             , BLOCK_FLAG = <include refid="com.sql.nvl"/>(#{BLOCK_FLAG}, '0')
             , BLOCK_REASON = #{BLOCK_REASON}
             , MNG_YN =#{MNG_YN}
             , APROVAL_USER_FLAG = #{APROVAL_USER_FLAG}
             , CSDM_SEQ = #{CSDM_SEQ}
             , CUBL_SEQ = #{CUBL_SQ}
             , USE_FLAG = #{USE_FLAG}
         WHERE GATE_CD    = #{ses.gateCd}
           AND COMPANY_CD = #{ses.companyCd}
           AND USER_ID    = #{ORI_USER_ID}
    </update>

    <!-- BAD1_020 -->
	<!-- 고객사 담당자 정보 삭제 -->
    <update id="bad1020_doDelete" parameterType="hashmap">
        UPDATE STOCCVUR
           SET DEL_FLAG = '1'
             , MOD_DATE = <include refid="com.sql.sysdate"/>
             , MOD_USER_ID = #{ses.userId}
         WHERE GATE_CD    = #{ses.gateCd}
           AND COMPANY_CD = #{ses.companyCd}
           AND USER_ID    = #{ORI_USER_ID}
    </update>

    <!-- BAD1_021 -->
	<!-- 고객사 담당자 상세정보 -->
    <select id="bad1021_doSearch" parameterType="hashmap" resultType="hashmap">
        SELECT DISTINCT
              CVUR.USER_TYPE
            , CVUR.USER_ID
            , CVUR.USER_NM
            , CVUR.MNG_YN
            , CVUR.EMPLOYEE_NO
            , 'Y' AS ID_CHECK
            , CVUR.COMPANY_CD
            , CUST.CUST_NM AS COMPANY_NM
            , CVUR.PLANT_CD
            , CVUR.DIVISION_CD
            , CVUR.DEPT_CD
            , CVUR.DEPT_NM
            , CVUR.PART_CD
            , CVUR.WORK_TYPE
            , CVUR.MY_SITE_FLAG
            , CVUR.WMS_FLAG
            , CVUR.BUDGET_FLAG
            , CVUR.GR_FLAG
            , CVUR.FINANCIAL_FLAG
            , CVUR.TEL_NUM
            , CVUR.FAX_NUM
            , CVUR.CELL_NUM
            , CVUR.EMAIL
            , CVUR.POSITION_NM
            , CVUR.ZIP_CD
            , CVUR.ADDR_1
            , CVUR.ADDR_2
            , CVUR.BUDGET_DEPT_CD
            , <include refid="com.sql.dbo"/>GETDEPTNAME(CVUR.GATE_CD, CVUR.COMPANY_CD, CVUR.BUDGET_DEPT_CD, #{ses.langCd}) as BUDGET_DEPT_NM
            , <include refid="com.sql.nvl"/>(CVUR.BLOCK_FLAG, '0') AS BLOCK_FLAG
            , CVUR.BLOCK_REASON
            , CVUR.REG_DATE
            , CVUR.CONFIRM_DATE
            , <include refid="com.sql.dbo"/>getUserName(CVUR.GATE_CD, CVUR.CONFIRM_USER_ID, #{ses.langCd}) AS CONFIRM_USER_NM
            , CVUR.SMS_FLAG
            , CVUR.MAIL_FLAG
            , CVUR.RECIPIENT_NM
            , CVUR.RECIPIENT_DEPT_NM
            , CVUR.RECIPIENT_TEL_NUM
            , CVUR.RECIPIENT_CELL_NUM
            , CVUR.RECIPIENT_EMAIL
            , CVUR.DELY_ZIP_CD
            , CVUR.DELY_ADDR_1
            , CVUR.DELY_ADDR_2
            , CVUR.VNGL_ROLE
            , CVUR.AGREE_ATT_FILE_NUM
            , CVUR.DUTY_NM
            , CVUR.CHIEF_USER_ID
            , <include refid="com.sql.dbo"/>getUserName(CVUR.GATE_CD, CVUR.CHIEF_USER_ID, #{ses.langCd}) AS CHIEF_USER_NM
            , <include refid="com.sql.dbo"/>GETCOMCODE(CVUR.GATE_CD, 'M044', <include refid="com.sql.nvl"/>(CVUR.AGREE_YN, '0'), 0, #{ses.langCd}) AS AGREE_YN
            , CVUR.CSDM_SEQ
			, CSDM.DELY_NM AS DELY_NM
			, CSDM.RECIPIENT_NM AS DELY_RECIPIENT_NM
			, <include refid="com.sql.stringMergeStart"/>'('<include refid="com.sql.stringMerge"/>CSDM.DELY_ZIP_CD<include refid="com.sql.stringMerge"/>') '<include refid="com.sql.stringMerge"/>CSDM.DELY_ADDR_1<include refid="com.sql.stringMerge"/>' '<include refid="com.sql.stringMerge"/><include refid="com.sql.nvl"/>(CSDM.DELY_ADDR_2,'')<include refid="com.sql.stringMergeEnd"/> AS DELY_ADDR
			, CSDM.RECIPIENT_TEL_NUM AS DELY_RECIPIENT_TEL_NUM
			, CSDM.RECIPIENT_FAX_NUM AS DELY_RECIPIENT_FAX_NUM
			, CSDM.RECIPIENT_CELL_NUM AS DELY_RECIPIENT_CELL_NUM
			, CSDM.RECIPIENT_EMAIL AS DELY_RECIPIENT_EMAIL
			, CVUR.CUBL_SEQ AS CUBL_SQ
			, CUBL.CUBL_NM AS CUBL_NM
			, CUBL.COMPANY_NM AS CUBL_COMPANY_NM
			, <include refid="com.sql.stringMergeStart"/>'('<include refid="com.sql.stringMerge"/>CUBL.CUBL_ZIP_CD<include refid="com.sql.stringMerge"/>') '<include refid="com.sql.stringMerge"/>CUBL.CUBL_ADDR1<include refid="com.sql.stringMerge"/>' '<include refid="com.sql.stringMerge"/><include refid="com.sql.nvl"/>(CUBL.CUBL_ADDR2,'')<include refid="com.sql.stringMergeEnd"/> AS CUBL_ADDR
			, CUBL.CEO_USER_NM AS CUBL_CEO_USER_NM
			, CUBL.IRS_NUM AS CUBL_IRS_NUM
			, CUBL.BUSINESS_TYPE AS CUBL_BUSINESS_TYPE
			, CUBL.INDUSTRY_TYPE AS CUBL_INDUSTRY_TYPE
			, CUBL.CUBL_BANK_NM AS CUBL_BANK_NM
			, CUBL.CUBL_ACCOUNT_NUM AS CUBL_ACCOUNT_NUM
			, CUBL.CUBL_ACCOUNT_NM AS CUBL_ACCOUNT_NM
			, CUBL.CUBL_USER_NM AS CUBL_USER_NM
			, CUBL.CUBL_USER_TEL_NUM AS CUBL_USER_TEL_NUM
			, CUBL.CUBL_USER_FAX_NUM AS CUBL_USER_FAX_NUM
			, CUBL.CUBL_USER_CELL_NUM AS CUBL_USER_CELL_NUM
			, CUBL.CUBL_USER_EMAIL AS CUBL_USER_EMAIL
			,(CASE WHEN CVUR.DATA_CREATION_TYPE IN ('I', '1') THEN '1' ELSE '0' END) AS IF_USER_FLAG
         FROM STOCCVUR CVUR
         LEFT OUTER JOIN STOCCUST CUST
              ON (CUST.GATE_CD = CVUR.GATE_CD
              AND CUST.CUST_CD = CVUR.COMPANY_CD)
         LEFT OUTER JOIN STOCOGDP OGDP
              ON (OGDP.GATE_CD  = CVUR.GATE_CD
              AND OGDP.BUYER_CD = CVUR.COMPANY_CD
              AND OGDP.DEPT_CD  = CVUR.DEPT_CD)
		 LEFT OUTER JOIN STOCCSDM CSDM
			  ON (CSDM.GATE_CD  = CVUR.GATE_CD 
			  AND CSDM.CUST_CD  = CVUR.COMPANY_CD 
			  AND CSDM.SEQ      = CVUR.CSDM_SEQ 
			  AND CSDM.DEL_FLAG = '0' 
			  AND CSDM.USE_FLAG = '1')
		 LEFT OUTER JOIN STOCCUBL CUBL
			  ON (CUBL.GATE_CD  = CVUR.GATE_CD
			  AND CUBL.CUST_CD  = CVUR.COMPANY_CD
			  AND CUBL.CUBL_SQ  = CVUR.CUBL_SEQ 
			  AND CUBL.DEL_FLAG = '0' 
			  AND CUBL.USE_FLAG = '1')
        WHERE CVUR.GATE_CD    = #{ses.gateCd}
          AND CVUR.COMPANY_CD = #{ses.companyCd}
          AND CVUR.USER_ID    = #{USER_ID}
          AND CVUR.DEL_FLAG   ='0'
    </select>

    <!-- BAD1_021 -->
	<!-- 담당자ID 중복 체크 -->
	<select id="bad1021_doCheckUserId" parameterType="hashmap" resultType="java.lang.String">
		SELECT (CASE WHEN COUNT(*) <![CDATA[>]]> 0 THEN 'N' ELSE 'Y' END) AS USER_DUP_FLAG
		  FROM STOCCVUR
		 WHERE GATE_CD = #{ses.gateCd}
		   AND USER_ID = UPPER(#{USER_ID})
	</select>

	<!-- BAD1_021 -->
	<!-- 담당자정보 등록 및 수정 -->
	<update id="bad1021_doSave" parameterType="hashmap">
        MERGE<include refid="com.sql.mergeInto"/>STOCCVUR<include refid="com.sql.mergeAs"/>CVUR
        USING (SELECT #{ses.gateCd} AS GATE_CD, #{ses.companyCd} AS CUST_CD, UPPER(#{USER_ID}) AS USER_ID <include refid="com.sql.dual"/>)<include refid="com.sql.mergeAs"/>B
              ON (CVUR.GATE_CD    = B.GATE_CD
              AND CVUR.COMPANY_CD = B.CUST_CD
              AND UPPER(CVUR.USER_ID) = B.USER_ID)
        WHEN MATCHED THEN
        UPDATE SET
               MOD_DATE = <include refid="com.sql.sysdate"/>
             , MOD_USER_ID = #{ses.userId}
             , MNG_YN = <include refid="com.sql.nvl"/>(#{MNG_YN}, '0')
             , USER_NM = #{USER_NM}
			<if test="PASSWORD != '' and PASSWORD != null">
			 , PASSWORD = #{PASSWORD}
		 	</if>
			 , EMPLOYEE_NO = #{EMPLOYEE_NO}
			 , PLANT_CD = #{PLANT_CD}
			 , DIVISION_CD = #{DIVISION_CD}
			 , DEPT_CD = #{DEPT_CD}
			 , DEPT_NM = #{DEPT_NM}
			 , PART_CD = #{PART_CD}
			 , POSITION_NM = #{POSITION_NM}
			 , TEL_NUM = #{TEL_NUM}
			 , FAX_NUM = #{FAX_NUM}
			 , CELL_NUM = #{CELL_NUM}
			 , EMAIL = #{EMAIL}
			 , ZIP_CD = #{ZIP_CD}
			 , ADDR_1 = #{ADDR_1}
			 , ADDR_2 = #{ADDR_2}
			 , BUDGET_DEPT_CD = #{BUDGET_DEPT_CD}
			 , WMS_FLAG = <include refid="com.sql.nvl"/>(#{WMS_FLAG}, '0')
			 , MY_SITE_FLAG = <include refid="com.sql.nvl"/>(#{MY_SITE_FLAG}, '0')
			 , BUDGET_FLAG = <include refid="com.sql.nvl"/>(#{BUDGET_FLAG}, '0')
			 , GR_FLAG = <include refid="com.sql.nvl"/>(#{GR_FLAG}, '0')
			 , FINANCIAL_FLAG = <include refid="com.sql.nvl"/>(#{FINANCIAL_FLAG}, '0')
			 , SMS_FLAG = <include refid="com.sql.nvl"/>(#{SMS_FLAG}, '0')
			 , MAIL_FLAG = <include refid="com.sql.nvl"/>(#{MAIL_FLAG}, '0')
			 , RECIPIENT_NM = #{RECIPIENT_NM}
			 , RECIPIENT_DEPT_NM = #{RECIPIENT_DEPT_NM}
			 , RECIPIENT_TEL_NUM = #{RECIPIENT_TEL_NUM}
			 , RECIPIENT_CELL_NUM = #{RECIPIENT_CELL_NUM}
			 , RECIPIENT_EMAIL = #{RECIPIENT_EMAIL}
			 , DELY_ZIP_CD = #{DELY_ZIP_CD}
			 , DELY_ADDR_1 = #{DELY_ADDR_1}
			 , DELY_ADDR_2 = #{DELY_ADDR_2}
			 , PROGRESS_CD = 'E'
             , DUTY_NM = #{DUTY_NM}
             , CHIEF_USER_ID= #{CHIEF_USER_ID}
             , CSDM_SEQ = #{CSDM_SEQ}
             , CUBL_SEQ = #{CUBL_SQ}
        WHEN NOT MATCHED THEN
        INSERT (
              GATE_CD
			, USER_ID
			, REG_DATE
			, REG_USER_ID
			, MOD_DATE
			, MOD_USER_ID
			, DEL_FLAG
			, COMPANY_CD
			, MNG_YN
			, USER_TYPE
			, WORK_TYPE
			, USER_NM
			, PASSWORD
			, EMPLOYEE_NO
			, PLANT_CD
			, DIVISION_CD
			, DEPT_CD
			, DEPT_NM
			, PART_CD
			, POSITION_NM
			, TEL_NUM
			, FAX_NUM
			, CELL_NUM
			, EMAIL
			, ZIP_CD
			, ADDR_1
			, ADDR_2
			, BUDGET_DEPT_CD
			, WMS_FLAG
			, MY_SITE_FLAG
			, BUDGET_FLAG
			, GR_FLAG
			, FINANCIAL_FLAG
			, SMS_FLAG
			, MAIL_FLAG
			, RECIPIENT_NM
			, RECIPIENT_DEPT_NM
			, RECIPIENT_TEL_NUM
			, RECIPIENT_CELL_NUM
			, RECIPIENT_EMAIL
			, DELY_ZIP_CD
			, DELY_ADDR_1
			, DELY_ADDR_2
			, BLOCK_FLAG
			, BLOCK_REASON
			, USE_FLAG
			, PROGRESS_CD
            , DUTY_NM
            , CHIEF_USER_ID
            , CSDM_SEQ
            , CUBL_SEQ
        ) VALUES (
              #{ses.gateCd}
            , UPPER(#{USER_ID})
            , <include refid="com.sql.sysdate"/>
            , #{ses.userId}
            , <include refid="com.sql.sysdate"/>
            , #{ses.userId}
            , '0'
			, #{COMPANY_CD}
			, #{MNG_YN}
			, 'B' -- USER_TYPE
			, #{WORK_TYPE}
			, #{USER_NM}
			, #{PASSWORD}
			, #{EMPLOYEE_NO}
			, #{PLANT_CD}
			, #{DIVISION_CD}
			, #{DEPT_CD}
			, #{DEPT_NM}
			, #{PART_CD}
			, #{POSITION_NM}
			, #{TEL_NUM}
			, #{FAX_NUM}
			, #{CELL_NUM}
			, #{EMAIL}
			, #{ZIP_CD}
			, #{ADDR1}
			, #{ADDR2}
			, #{BUDGET_DEPT_CD}
			, <include refid="com.sql.nvl"/>(#{WMS_FLAG}, '0')
			, <include refid="com.sql.nvl"/>(#{MY_SITE_FLAG}, '0')
			, <include refid="com.sql.nvl"/>(#{BUDGET_FLAG}, '0')
			, <include refid="com.sql.nvl"/>(#{GR_FLAG}, '0')
			, <include refid="com.sql.nvl"/>(#{FINANCIAL_FLAG}, '0')
			, <include refid="com.sql.nvl"/>(#{SMS_FLAG}, '0')
			, <include refid="com.sql.nvl"/>(#{MAIL_FLAG}, '0')
			, #{RECIPIENT_NM}
			, #{RECIPIENT_DEPT_NM}
			, #{RECIPIENT_TEL_NUM}
			, #{RECIPIENT_CELL_NUM}
			, #{RECIPIENT_EMAIL}
			, #{DELY_ZIP_CD}
			, #{DELY_ADDR_1}
			, #{DELY_ADDR_2}
			, <include refid="com.sql.nvl"/>(#{BLOCK_FLAG}, '0')
			, #{BLOCK_REASON}
			, <include refid="com.sql.nvl"/>(#{USE_FLAG}, '1')
			, 'E' -- PROGRESS_CD
            , #{DUTY_NM}
            , #{CHIEF_USER_ID}
            , #{CSDM_SEQ}
            , #{CUBL_SQ}
        <include refid="com.sql.mergeEnd"/>
    </update>

	<!-- BAD1_040 -->
	<!-- 고객사 예산 조회 -->
    <select id="bad1040_doSearch" parameterType="hashmap" resultType="hashMap">

        SELECT DISTINCT
              CUBD.CUST_CD
            , CUST.CUST_NM
            , CUBD.YEAR_MONTH
			, CUBD.PLANT_CD
            , <include refid="com.sql.dbo"/>GETPLANTNAME(CUBD.GATE_CD, CUBD.CUST_CD, CUBD.PLANT_CD, #{ses.langCd}) AS PLANT_NM
            , CUBD.DIVISION_CD
            , <include refid="com.sql.dbo"/>GETDIVISIONNM(CUBD.GATE_CD, CUBD.CUST_CD, CUBD.PLANT_CD,CUBD.DIVISION_CD, #{ses.langCd}) AS DIVISION_NM
            , CUBD.DEPT_CD
            , <include refid="com.sql.dbo"/>GETDEPTNM(CUBD.GATE_CD, CUBD.CUST_CD, CUBD.PLANT_CD,CUBD.DIVISION_CD,CUBD.DEPT_CD, #{ses.langCd}) AS DEPT_NM
            , CUBD.ACCOUNT_CD
            , CUBD.ACCOUNT_CD AS ACCOUNT_CD_ORI
            , CUAC.ACCOUNT_NM
            , <include refid="com.sql.nvl"/>(CUBD.TRANSFERED_AMT, 0) AS TRANSFERED_AMT
            , CUBD.TRANSFERED_REASON
            , CASE WHEN CUBD.TRANSFERED_REASON IS NULL THEN '1' ELSE '0' END AS TRANSFERED_REASON_ICON
            , <include refid="com.sql.nvl"/>(CUBD.BUDGET_AMT, 0) AS BUDGET_AMT
            , <include refid="com.sql.nvl"/>(CUBD.ADDITIONAL_AMT, 0) AS ADDITIONAL_AMT
            , <include refid="com.sql.nvl"/>(CUBD.EXHAUST_AMT, 0) AS EXHAUST_AMT
            ,(<include refid="com.sql.nvl"/>(CUBD.TRANSFERED_AMT, 0) + <include refid="com.sql.nvl"/>(CUBD.BUDGET_AMT, 0) + <include refid="com.sql.nvl"/>(CUBD.ADDITIONAL_AMT, 0)) - <include refid="com.sql.nvl"/>(CUBD.EXHAUST_AMT, 0) AS REMAIN_AMT
            , <include refid="com.sql.nvl"/>(CUBD.BLOCK_FLAG, '0') AS BLOCK_FLAG
            , CUBD.BLOCK_REMARK
            , <include refid="com.sql.toDateChar"/>(CUBD.MOD_DATE, 'YYYY-MM-DD HH24:MI') AS MOD_DATE
            , '0' AS CLOSE_FLAG -- 차후 마감여부로 활용
         FROM STOCCUBD CUBD
         JOIN STOCCUAC CUAC
              ON (CUBD.GATE_CD = CUAC.GATE_CD
              AND CUBD.CUST_CD = CUAC.CUST_CD
              AND CUBD.ACCOUNT_CD =  CUAC.ACCOUNT_CD
              AND CUAC.DEL_FLAG = '0')
         JOIN STOCCUST CUST
              ON (CUBD.GATE_CD = CUST.GATE_CD
              AND CUBD.CUST_CD = CUST.CUST_CD
              AND CUST.DEL_FLAG = '0')
        WHERE CUBD.GATE_CD = #{ses.gateCd}
              AND CUBD.DEL_FLAG = '0'
        <if test="YEAR_MONTH != '' and YEAR_MONTH != null">
            AND CUBD.YEAR_MONTH = #{YEAR_MONTH}
        </if>
        <if test="IN_CUST_CD != '' and IN_CUST_CD != null">
            AND CUBD.CUST_CD = #{IN_CUST_CD}
        </if>
        <if test="IN_PLANT_CD != '' and IN_PLANT_CD != null">
            AND CUBD.PLANT_CD = #{IN_PLANT_CD}
        </if>
        <if test="IN_DIVISION_CD != '' and IN_DIVISION_CD != null">
            AND CUBD.DIVISION_CD = #{IN_DIVISION_CD}
        </if>
        <if test="IN_DEPT_CD != '' and IN_DEPT_CD != null">
            AND CUBD.DEPT_CD = #{IN_DEPT_CD}
        </if>
        <if test="ACCOUNT_CD != '' and ACCOUNT_CD != null">
            AND UPPER(CUBD.ACCOUNT_CD) <include refid="com.sql.likeL"/> UPPER(#{ACCOUNT_CD}) <include refid="com.sql.likeR"/>
        </if>
        <if test="ACCOUNT_NM != '' and ACCOUNT_NM != null">
            AND UPPER(CUAC.ACCOUNT_NM) <include refid="com.sql.likeL"/> UPPER(#{ACCOUNT_NM}) <include refid="com.sql.likeR"/>
        </if>

    </select>

	<!-- BAD1_040 : 예산관리 -->
    <insert id="bad1040_mergeData" parameterType="hashmap">

        MERGE<include refid="com.sql.mergeInto"/>STOCCUBD<include refid="com.sql.mergeAs"/>CUBD
        USING (SELECT #{ses.gateCd}  AS GATE_CD
                    , #{CUST_CD}     AS CUST_CD
                    , #{PLANT_CD} AS PLANT_CD
                    , #{DIVISION_CD} AS DIVISION_CD
                    , #{DEPT_CD}     AS DEPT_CD
                    , #{ACCOUNT_CD}  AS ACCOUNT_CD
                    , #{YEAR_MONTH}  AS YEAR_MONTH
              <include refid="com.sql.dual"/>)<include refid="com.sql.mergeAs"/>B
	          ON (CUBD.GATE_CD = B.GATE_CD
	          AND CUBD.CUST_CD = B.CUST_CD
	          AND CUBD.PLANT_CD = B.PLANT_CD
	          AND CUBD.DIVISION_CD = B.DIVISION_CD
	          AND CUBD.DEPT_CD = B.DEPT_CD
	          AND CUBD.ACCOUNT_CD = B.ACCOUNT_CD
	          AND CUBD.YEAR_MONTH = B.YEAR_MONTH
	        )
        WHEN MATCHED THEN
        UPDATE SET
              MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
            , DEL_FLAG = '0'
            , TRANSFERED_AMT = <include refid="com.sql.nvl"/>(#{TRANSFERED_AMT}, 0) -- 이월예산
            , TRANSFERED_REASON = #{TRANSFERED_REASON}
            , BUDGET_AMT = <include refid="com.sql.nvl"/>(#{BUDGET_AMT}, 0) -- 당해예산
            , ADDITIONAL_AMT = <include refid="com.sql.nvl"/>(#{ADDITIONAL_AMT}, 0) -- 추가예산
            , REQ_USER_NAME = #{REQ_USER_NAME}
            , BLOCK_FLAG = <include refid="com.sql.nvl"/>(#{BLOCK_FLAG}, '0')
            , BLOCK_REMARK = #{BLOCK_REMARK}
        WHEN NOT MATCHED THEN
        INSERT (
              GATE_CD
            , CUST_CD
            , PLANT_CD
            , DIVISION_CD
            , DEPT_CD
            , ACCOUNT_CD
            , YEAR_MONTH
            , REG_DATE
            , REG_USER_ID
            , MOD_DATE
            , MOD_USER_ID
            , DEL_FLAG
            , TRANSFERED_AMT
            , TRANSFERED_REASON
            , BUDGET_AMT
            , ADDITIONAL_AMT
            , REQ_USER_NAME
            , BLOCK_FLAG
            , BLOCK_REMARK
            , BD_DEPT_CD
        ) VALUES (
              #{ses.gateCd}
            , #{CUST_CD}
            , #{PLANT_CD}
            , #{DIVISION_CD}
            , #{DEPT_CD}
            , #{ACCOUNT_CD}
            , #{YEAR_MONTH}
            , <include refid="com.sql.sysdate"/>
            , #{ses.userId}
            , <include refid="com.sql.sysdate"/>
            , #{ses.userId}
            , '0'
            , <include refid="com.sql.nvl"/>(#{TRANSFERED_AMT}, 0) -- 이월예산
            , #{TRANSFERED_REASON}
            , <include refid="com.sql.nvl"/>(#{BUDGET_AMT}, 0) -- 당월예산
            , <include refid="com.sql.nvl"/>(#{ADDITIONAL_AMT}, 0) -- 추가예산
            , #{REQ_USER_NAME}
            , <include refid="com.sql.nvl"/>(#{BLOCK_FLAG}, '0')
            , #{BLOCK_REMARK}
            , <include refid="com.sql.stringMergeStart"/>#{CUST_CD}<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>#{PLANT_CD}<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>#{DIVISION_CD}<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>#{DEPT_CD}<include refid="com.sql.stringMergeEnd"/>
        <include refid="com.sql.mergeEnd"/>
    </insert>

    <update id="bad1040_doDelete" parameterType="hashmap">
        UPDATE STOCCUBD SET
               DEL_FLAG = '1'
             , MOD_DATE = <include refid="com.sql.sysdate"/>
             , MOD_USER_ID = #{ses.userId}
         WHERE GATE_CD = #{ses.gateCd}
           AND CUST_CD = #{CUST_CD}
           AND PLANT_CD = #{PLANT_CD}
           AND DIVISION_CD = #{DIVISION_CD}
           AND DEPT_CD = #{DEPT_CD}
           AND ACCOUNT_CD= #{ACCOUNT_CD}
           AND YEAR_MONTH = #{YEAR_MONTH}
    </update>

	<!-- BAD1_050 : 고객사별 계정관리 -->
    <select id="bad1050_doSearch" parameterType="hashmap" resultType="hashMap">
        SELECT CUAC.GATE_CD
             , CUAC.CUST_CD
             , CUST.CUST_NM
             , CUAC.ACCOUNT_CD
             , CUAC.ACCOUNT_CD AS ACCOUNT_CD_ORI
             , CUAC.ACCOUNT_NM
             , CUAC.USE_FLAG
             , <include refid="com.sql.dbo"/> GETUSERNAME(CUAC.GATE_CD, CUAC.MOD_USER_ID, #{ses.langCd})  AS MOD_USER_NM
             , <include refid="com.sql.toDateChar"/>(CUAC.MOD_DATE, 'YYYY-MM-DD HH24:MI') AS MOD_DATE
             , 'U' AS INSERT_FLAG
         FROM STOCCUAC CUAC
         JOIN STOCCUST CUST
              ON (CUST.GATE_CD=CUAC.GATE_CD AND CUST.CUST_CD=CUAC.CUST_CD)
        WHERE CUAC.GATE_CD = #{ses.gateCd}
          AND CUAC.DEL_FLAG = '0'
          AND CUST.DEL_FLAG = '0'
        <if test="CUST_CD != '' and CUST_CD != null">
            AND UPPER(CUAC.CUST_CD) <include refid="com.sql.likeL"/> UPPER(#{CUST_CD}) <include refid="com.sql.likeR"/>
        </if>
        <if test="CUST_NM != '' and CUST_NM != null">
            AND UPPER(CUST.CUST_NM) <include refid="com.sql.likeL"/> UPPER(#{CUST_NM}) <include refid="com.sql.likeR"/>
        </if>
        <if test="ACCOUNT_CD != '' and ACCOUNT_CD != null">
            AND UPPER(CUAC.ACCOUNT_CD) <include refid="com.sql.likeL"/> UPPER(#{ACCOUNT_CD}) <include refid="com.sql.likeR"/>
        </if>
        <if test="ACCOUNT_NM != '' and ACCOUNT_NM != null">
            AND UPPER(CUAC.ACCOUNT_NM) <include refid="com.sql.likeL"/> UPPER(#{ACCOUNT_NM}) <include refid="com.sql.likeR"/>
        </if>
    </select>

	<!-- BAD1_050 : 고객사별 계정등록 -->
    <insert id="bad1050_mergeData" parameterType="hashmap">

        MERGE<include refid="com.sql.mergeInto"/>STOCCUAC<include refid="com.sql.mergeAs"/>CUAC
        USING (SELECT #{ses.gateCd} AS GATE_CD
                    , #{CUST_CD} AS CUST_CD
                    , #{ACCOUNT_CD} AS ACCOUNT_CD)<include refid="com.sql.mergeAs"/>B
        ON (CUAC.GATE_CD = B.GATE_CD
          AND CUAC.CUST_CD = B.CUST_CD
          AND CUAC.ACCOUNT_CD = B.ACCOUNT_CD)
        WHEN MATCHED THEN
        UPDATE SET
            MOD_DATE = <include refid="com.sql.sysdate"/>
            ,MOD_USER_ID = #{ses.userId}
            ,DEL_FLAG = '0'
            ,ACCOUNT_NM =#{ACCOUNT_NM}
            ,USE_FLAG =#{USE_FLAG}
        WHEN NOT MATCHED THEN
        INSERT (
            GATE_CD
            ,CUST_CD
            ,ACCOUNT_CD
            ,REG_DATE
            ,REG_USER_ID
            ,MOD_DATE
            ,MOD_USER_ID
            ,DEL_FLAG
            ,ACCOUNT_NM
            ,USE_FLAG
        ) VALUES (
            #{ses.gateCd}
            ,#{CUST_CD}
            ,#{ACCOUNT_CD}
            ,<include refid="com.sql.sysdate"/>
            ,#{ses.userId}
            ,<include refid="com.sql.sysdate"/>
            ,#{ses.userId}
            ,'0'
            ,#{ACCOUNT_NM}
            ,#{USE_FLAG}
        <include refid="com.sql.mergeEnd"/>
    </insert>

    <update id="bad1050_doDelete" parameterType="hashmap">
        UPDATE STOCCUAC SET
               DEL_FLAG = '1'
             , MOD_DATE = <include refid="com.sql.sysdate"/>
             , MOD_USER_ID = #{ses.userId}
         WHERE GATE_CD = #{ses.gateCd}
           AND CUST_CD = #{CUST_CD}
           AND ACCOUNT_CD = #{ACCOUNT_CD_ORI}
    </update>


	<select id="bad1030_doSearch" parameterType="hashmap" resultType="hashmap">

        SELECT DISTINCT A.*
        FROM(
            SELECT
                 MTGL.ITEM_CD
                ,MTGB.CUST_ITEM_CD
                ,MTGL.ITEM_STATUS
                ,MTGL.ITEM_DESC
                ,MTGL.ITEM_SPEC
                ,<include refid="com.sql.dbo"/>GETMKBRNAME(MTGL.GATE_CD, 'MK', MTGL.MAKER_CD) AS MAKER_NM
                ,MTGL.BRAND_NM
                ,MTGL.MAKER_PART_NO
                ,MTGL.ORIGIN_CD
                ,MTGL.UNIT_CD
                ,<include refid="com.sql.dbo"/> getItemClassPath(MTGL.GATE_CD, #{ses.manageCd}, MTGL.ITEM_CD)  AS ITEM_CLS_NM
                ,(SELECT ACCOUNT_NM FROM STOCCUAC CUAC WHERE CUAC.GATE_CD = MTGL.GATE_CD AND CUAC.CUST_CD = #{ses.companyCd} AND CUAC.ACCOUNT_CD = MTGB.ACCOUNT_CD) AS ACCOUNT_NM
                ,MTGB.ACCOUNT_CD
                ,<include refid="com.sql.toDateChar"/>(MTGB.MOD_DATE, 'YYYY-MM-DD HH24:MI') AS MOD_DATE
                ,<include refid="com.sql.dbo"/>GETUSERNAME(MTGB.GATE_CD, MTGB.MOD_USER_ID, #{ses.langCd}) AS MOD_USER_NM
                ,MTGC.ITEM_CLS1
                ,MTGC.ITEM_CLS2
                ,MTGC.ITEM_CLS3
                ,MTGC.ITEM_CLS4
       		FROM STOCMTGL MTGL
       		LEFT JOIN STOCMTGB MTGB
		        ON MTGL.GATE_CD  = MTGB.GATE_CD
		        AND MTGL.ITEM_CD = MTGB.ITEM_CD
		        AND MTGB.CUST_CD = #{ses.companyCd}
            JOIN STOCMTGC MTGC
		        ON (MTGL.GATE_CD  = MTGC.GATE_CD
		        AND MTGL.ITEM_CD  = MTGC.ITEM_CD
		        AND MTGC.BUYER_CD = #{BUYERCD}
		        AND MTGC.DEL_FLAG = '0'
		        AND MTGC.M_CATE_YN= '1')
            JOIN STOUINFO UINFO
		        ON (UINFO.GATE_CD = MTGL.GATE_CD
		        AND UINFO.ITEM_CD  = MTGL.ITEM_CD
		        AND UINFO.CUST_CD  = #{ses.companyCd}
		        AND UINFO.PLANT_CD IN ('*',#{ses.plantCd}))
            JOIN STOYINFO INFO
		        ON (INFO.GATE_CD  = UINFO.GATE_CD
		        AND INFO.ITEM_CD  = UINFO.ITEM_CD
		        AND INFO.CONT_NO  = UINFO.CONT_NO
		        AND INFO.CONT_SEQ = UINFO.CONT_SEQ
		        AND INFO.APPLY_COM IN (#{ses.manageCd}, #{ses.companyCd}, #{MG_CD})
		        AND INFO.APPLY_PLANT IN ('*',#{ses.plantCd})
		        AND TO_CHAR(<include refid="com.sql.sysdate"/>,'YYYYMMDD') BETWEEN INFO.VALID_FROM_DATE AND INFO.VALID_TO_DATE
		        AND INFO.SIGN_STATUS = 'E'
		        AND INFO.DEL_FLAG = '0')
            LEFT JOIN STOCVNGL VNGL
		        ON (INFO.GATE_CD = VNGL.GATE_CD
		        AND INFO.VENDOR_CD = VNGL.VENDOR_CD
		        AND <include refid="com.sql.nvl"/>(VNGL.BLOCK_FLAG, '0') != '1')
           WHERE MTGL.GATE_CD = #{ses.gateCd}
             AND MTGL.DEL_FLAG = '0'
         )A
        WHERE 1=1
        <if test="ITEM_CLS1 != null and ITEM_CLS1 != ''">
            AND A.ITEM_CLS1 = #{ITEM_CLS1}
        </if>
        <if test="ITEM_CLS2 != null and ITEM_CLS2 != ''">
            AND A.ITEM_CLS2 = #{ITEM_CLS2}
        </if>
        <if test="ITEM_CLS3 != null and ITEM_CLS3 != ''">
            AND A.ITEM_CLS3 = #{ITEM_CLS3}
        </if>
        <if test="ITEM_CLS4 != null and ITEM_CLS4 != ''">
            AND A.ITEM_CLS4 = #{ITEM_CLS4}
        </if>
        <if test="ITEM_CD != null and ITEM_CD != ''">
            AND (A.ITEM_CD <include refid="com.sql.likeL"/>#{ITEM_CD}<include refid="com.sql.likeR"/> OR CUST_ITEM_CD <include refid="com.sql.likeL"/>#{ITEM_CD}<include refid="com.sql.likeR"/>)
        </if>
        <if test="ITEM_DESC != null and ITEM_DESC != ''">
            AND (${ITEM_DESC})
        </if>
        <if test="ITEM_SPEC != null and ITEM_SPEC != ''">
            AND (${ITEM_SPEC})
        </if>
        <if test="ACCOUNT_CD != null and ACCOUNT_CD != ''">
            AND A.ACCOUNT_CD <include refid="com.sql.likeL"/>#{ACCOUNT_CD}<include refid="com.sql.likeR"/>
        </if>
        <if test="ACCOUNT_NM != null and ACCOUNT_NM != ''">
            AND A.ACCOUNT_NM <include refid="com.sql.likeL"/>#{ACCOUNT_NM}<include refid="com.sql.likeR"/>
        </if>
        <if test="MAPPING_YN != null and MAPPING_YN != ''">
            <choose>
                <when test="MAPPING_YN eq '1'.toString()">
                    AND (A.ACCOUNT_CD !='' OR ACCOUNT_CD IS NOT NULL)
                </when>
                <otherwise>
                    AND (A.ACCOUNT_CD ='' OR ACCOUNT_CD IS NULL)
                </otherwise>
            </choose>
        </if>
    </select>

    <update id="bad1030_doSave" parameterType="hashmap">
        MERGE INTO STOCMTGB A
          USING
          (SELECT
             #{ses.gateCd} AS GATE_CD
            ,#{ITEM_CD} AS ITEM_CD
            ,#{ses.companyCd} AS CUST_CD
            ,#{CUST_ITEM_CD} AS CUST_ITEM_CD
             <include refid="com.sql.dual"/>) B
                ON (A.GATE_CD = B.GATE_CD
                AND A.ITEM_CD = B.ITEM_CD
                AND A.CUST_CD = B.CUST_CD
                AND A.CUST_ITEM_CD = B.CUST_ITEM_CD)
        WHEN MATCHED THEN
        UPDATE SET
              MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
            , ACCOUNT_CD = #{ACCOUNT_CD}
        WHEN NOT MATCHED THEN
        INSERT (
              GATE_CD
            , CUST_CD
            , ITEM_CD
            , CUST_ITEM_CD
            , REG_DATE
            , REG_USER_ID
            , MOD_DATE
            , MOD_USER_ID
            , DEL_FLAG
            , ACCOUNT_CD
            , ITEM_DESC
            , ITEM_SPEC
            , UNIT_CD
            , CONV_QT
            , ORD_UNIT_CD
            , MIN_ORDER_QT
            , LEADTIME
            , VAT_CD
            , PROD_CLOSE_FLAG
            , PROD_CLOSE_RMK
            , ORDER_HALT_FLAG
            , RE_DELY_DATE
            , LAST_PO_QTY
            , LAST_PO_DATE
            , CTRL_USER_ID
            , REMARK
        ) VALUES (
              #{ses.gateCd}
            , #{ses.companyCd}
            , #{ITEM_CD}
            , #{ITEM_CD}
            , <include refid="com.sql.sysdate"/>
            , #{ses.userId}
            , <include refid="com.sql.sysdate"/>
            , #{ses.userId}
            , '0'
            , #{ACCOUNT_CD}
            , #{ITEM_DESC}
            , #{ITEM_SPEC}
            , #{UNIT_CD}
            , #{CONV_QT}
            , #{ORD_UNIT_CD}
            , #{MIN_ORDER_QT}
            , #{LEADTIME}
            , #{VAT_CD}
            , #{PROD_CLOSE_FLAG}
            , #{PROD_CLOSE_RMK}
            , #{ORDER_HALT_FLAG}
            , #{RE_DELY_DATE}
            , #{LAST_PO_QTY}
            , #{LAST_PO_DATE}
            , #{CTRL_USER_ID}
            , #{REMARK}
            <include refid="com.sql.mergeEnd"/>

    </update>


    <update id="bad1021_doInsertUser_USAP" parameterType="hashmap">
        INSERT INTO STOCUSAP (
            GATE_CD
            , USER_ID
            , AUTH_CD
            , REG_DATE
            , REG_USER_ID
            , MOD_DATE
            , MOD_USER_ID
            , DEL_FLAG
        ) VALUES (
            #{ses.gateCd}
            , UPPER(<include refid="com.sql.trim"/>(#{USER_ID}))
            , #{AUTH_CD}
            , <include refid="com.sql.sysdate"/>
            ,  #{ses.userId}
            , <include refid="com.sql.sysdate"/>
            ,  #{ses.userId}
            , '0'
        )
    </update>

	<!-- BAD2_010 -->
	<!-- 부서별 실적관리 -->
	<select id="bad2010_doSearch" parameterType="hashMap" resultType="hashMap">
	SELECT   GATE_CD
           , CUST_CD
           , <include refid="com.sql.dbo"/>getCustName(GATE_CD, CUST_CD) AS CUST_NM
           , CPO_DEPT_CD
           , <include refid="com.sql.dbo"/>getDeptName(GATE_CD, CUST_CD, CPO_DEPT_CD, #{ses.langCd}) AS CPO_DEPT_NM
           , ITEM_CD
           , ITEM_DESC
           , ITEM_SPEC
           , CPO_CNT
           , CPO_QTY
           , REPLACE(CONVERT(VARCHAR, CAST(CPO_ITEM_AMT AS MONEY), 1), '.00', '') AS CPO_ITEM_AMT
           , REPLACE(CONVERT(VARCHAR, CAST(STD_ITEM_AMT AS MONEY), 1), '.00', '') AS STD_ITEM_AMT
           , CPO_ITEM_AMT AS ORG_CPO_ITEM_AMT
           , STD_ITEM_AMT AS ORG_STD_ITEM_AMT
	  FROM (
			SELECT   UPOHD.GATE_CD
                   , UPOHD.CUST_CD
                   , UPOHD.CPO_USER_DEPT_CD AS CPO_DEPT_CD
                   , MAX(UPODT.ITEM_CD) AS ITEM_CD
                   , MAX(UPODT.ITEM_DESC) AS ITEM_DESC
                   , MAX(UPODT.ITEM_SPEC) AS ITEM_SPEC
                   , COUNT(UPODT.CPO_NO) AS CPO_CNT
                   , SUM(<include refid="com.sql.nvl"/>(UPODT.CPO_QTY, 0)) AS CPO_QTY
                   , SUM(<include refid="com.sql.nvl"/>(UPODT.CPO_ITEM_AMT, 0)) AS CPO_ITEM_AMT
                   , SUM(<include refid="com.sql.nvl"/>(YPODT.STD_ITEM_AMT, 0)) AS STD_ITEM_AMT
			  FROM STOUPODT UPODT
              JOIN STOUPOHD UPOHD
                ON (UPODT.GATE_CD  = UPOHD.GATE_CD
               AND UPODT.CUST_CD  = UPOHD.CUST_CD
               AND UPODT.CPO_NO   = UPOHD.CPO_NO
               AND UPOHD.DEL_FLAG = '0')
              LEFT JOIN STOYPODT YPODT
                     ON (UPODT.GATE_CD  = YPODT.GATE_CD
                     AND UPODT.CUST_CD  = YPODT.CUST_CD
                     AND UPODT.CPO_NO   = YPODT.CPO_NO
                     AND UPODT.CPO_SEQ  = YPODT.CPO_SEQ
                     AND YPODT.DEL_FLAG = '0')
              LEFT JOIN STOYPOHD YPOHD
                     ON (YPODT.GATE_CD  = YPOHD.GATE_CD
                     AND YPODT.PO_NO	= YPOHD.PO_NO
                     AND YPOHD.SIGN_STATUS = 'E' -- 결재완료
                     AND YPOHD.DEL_FLAG = '0')

				WHERE UPOHD.GATE_CD = #{ses.gateCd}
				AND UPOHD.DEL_FLAG = '0'
				AND UPODT.DEL_FLAG = '0'
				AND UPODT.PROGRESS_CD NOT IN ('10', '20', '35', '80', 'ZZ')

				<if test="CPO_START_DATE != '' and CPO_END_DATE != ''">
					AND <include refid="com.sql.toDateChar"/>(UPOHD.CPO_DATE, 'yyyyMMdd') BETWEEN #{CPO_START_DATE} AND #{CPO_END_DATE}
				</if>
				<if test="CUST_CD != '' and CUST_CD != ''">
					AND UPOHD.CUST_CD <include refid="com.sql.likeL"/> #{CUST_CD} <include refid="com.sql.likeR"/>
				</if>
				<if test="CUST_NM != '' and CUST_NM != ''">
					AND <include refid="com.sql.dbo"/>GETCUSTNAME(UPOHD.GATE_CD, UPOHD.CUST_CD) <include refid="com.sql.likeL"/> #{CUST_NM} <include refid="com.sql.likeR"/>
				</if>
				<if test="DEPT_CD != '' and DEPT_CD != null">
				   AND UPOHD.CPO_USER_DEPT_CD <include refid="com.sql.likeL"/> #{CPO_USER_DEPT_CD} <include refid="com.sql.likeR"/>
				</if>
				<if test="DEPT_NM != '' and DEPT_NM != null">
				   AND <include refid="com.sql.dbo"/>GETDEPTNAME(UPOHD.GATE_CD, UPOHD.CUST_CD,UPOHD.CPO_USER_DEPT_CD,#{ses.langCd}) <include refid="com.sql.likeL"/> #{DEPT_NM} <include refid="com.sql.likeR"/>
				</if>
			GROUP BY UPOHD.GATE_CD, UPOHD.CUST_CD, UPOHD.CPO_USER_DEPT_CD
		) AA
	</select>

	<!-- BAD2_020 -->
	<!-- 주문번호별 실적관리 -->
	<select id="bad2020_doSearch" parameterType="hashMap" resultType="hashMap">
	SELECT   GATE_CD
           , CUST_CD
           , <include refid="com.sql.dbo"/>getCustName(GATE_CD, CUST_CD) AS CUST_NM
           , CPO_NO
           , CPO_DEPT_CD
           , <include refid="com.sql.dbo"/>getDeptName(GATE_CD, CUST_CD, CPO_DEPT_CD, #{ses.langCd}) AS CPO_DEPT_NM
           , CPO_USER_ID
		   , <include refid="com.sql.dbo"/>getUserName(GATE_CD, CPO_USER_ID, 'KO') AS CPO_USER_NM
		   , <include refid="com.sql.dbo"/>getUserName(GATE_CD, CPO_USER_ID, 'KO') AS HID_CPO_USER_NM
           , ITEM_CD
           , ITEM_DESC
           , ITEM_SPEC
           , CPO_CNT
           , CPO_QTY
           , REPLACE(CONVERT(VARCHAR, CAST(CPO_ITEM_AMT AS MONEY), 1), '.00', '') AS CPO_ITEM_AMT
           , REPLACE(CONVERT(VARCHAR, CAST(STD_ITEM_AMT AS MONEY), 1), '.00', '') AS STD_ITEM_AMT
           , CPO_ITEM_AMT AS ORG_CPO_ITEM_AMT
           , STD_ITEM_AMT AS ORG_STD_ITEM_AMT
	  FROM (
			SELECT   UPOHD.GATE_CD
                   , UPOHD.CUST_CD
                   , UPOHD.CPO_USER_DEPT_CD AS CPO_DEPT_CD
                   , UPOHD.CPO_NO AS CPO_NO
				   , UPOHD.CPO_USER_ID
                   , MAX(UPODT.ITEM_CD) AS ITEM_CD
                   , MAX(UPODT.ITEM_DESC) AS ITEM_DESC
                   , MAX(UPODT.ITEM_SPEC) AS ITEM_SPEC
                   , COUNT(UPODT.CPO_NO) AS CPO_CNT
                   , SUM(<include refid="com.sql.nvl"/>(UPODT.CPO_QTY, 0)) AS CPO_QTY
                   , SUM(<include refid="com.sql.nvl"/>(UPODT.CPO_ITEM_AMT, 0)) AS CPO_ITEM_AMT
                   , SUM(<include refid="com.sql.nvl"/>(YPODT.STD_ITEM_AMT, 0)) AS STD_ITEM_AMT
			  FROM STOUPODT UPODT
              JOIN STOUPOHD UPOHD
                ON (UPODT.GATE_CD  = UPOHD.GATE_CD
               AND UPODT.CUST_CD  = UPOHD.CUST_CD
               AND UPODT.CPO_NO   = UPOHD.CPO_NO
               AND UPOHD.DEL_FLAG = '0')
              LEFT JOIN STOYPODT YPODT
                     ON (UPODT.GATE_CD  = YPODT.GATE_CD
                     AND UPODT.CUST_CD  = YPODT.CUST_CD
                     AND UPODT.CPO_NO   = YPODT.CPO_NO
                     AND UPODT.CPO_SEQ  = YPODT.CPO_SEQ
                     AND YPODT.DEL_FLAG = '0')
              LEFT JOIN STOYPOHD YPOHD
                     ON (YPODT.GATE_CD  = YPOHD.GATE_CD
                     AND YPODT.PO_NO	= YPOHD.PO_NO
                     AND YPOHD.SIGN_STATUS = 'E' -- 결재완료
                     AND YPOHD.DEL_FLAG = '0')

				WHERE UPOHD.GATE_CD = #{ses.gateCd}
				AND UPOHD.DEL_FLAG = '0'
				AND UPODT.DEL_FLAG = '0'
				AND UPODT.PROGRESS_CD NOT IN ('10', '20', '35', '80', 'ZZ')

				<if test="CPO_START_DATE != '' and CPO_END_DATE != ''">
					AND <include refid="com.sql.toDateChar"/>(UPOHD.CPO_DATE, 'yyyyMMdd') BETWEEN #{CPO_START_DATE} AND #{CPO_END_DATE}
				</if>
				<if test="CUST_CD != '' and CUST_CD != ''">
					AND UPOHD.CUST_CD <include refid="com.sql.likeL"/> #{CUST_CD} <include refid="com.sql.likeR"/>
				</if>
				<if test="CUST_NM != '' and CUST_NM != ''">
					AND <include refid="com.sql.dbo"/>GETCUSTNAME(UPOHD.GATE_CD, UPOHD.CUST_CD) <include refid="com.sql.likeL"/> #{CUST_NM} <include refid="com.sql.likeR"/>
				</if>
				<if test="DEPT_CD != '' and DEPT_CD != null">
				   AND UPOHD.CPO_USER_DEPT_CD <include refid="com.sql.likeL"/> #{CPO_USER_DEPT_CD} <include refid="com.sql.likeR"/>
				</if>
				<if test="DEPT_NM != '' and DEPT_NM != null">
				   AND <include refid="com.sql.dbo"/>GETDEPTNAME(UPOHD.GATE_CD, UPOHD.CUST_CD,UPOHD.CPO_USER_DEPT_CD,#{ses.langCd}) <include refid="com.sql.likeL"/> #{DEPT_NM} <include refid="com.sql.likeR"/>
				</if>
				<if test="CPO_USER_ID != '' and CPO_USER_ID != null">
				   AND UPOHD.CPO_USER_ID <include refid="com.sql.likeL"/> #{CPO_USER_ID} <include refid="com.sql.likeR"/>
				</if>
				<if test="CPO_USER_NM != '' and CPO_USER_NM != null">
				   AND <include refid="com.sql.dbo"/>GETUSERNAME(UPOHD.GATE_CD, UPOHD.CPO_USER_ID,#{ses.langCd}) <include refid="com.sql.likeL"/> #{CPO_USER_NM} <include refid="com.sql.likeR"/>
				</if>
				<if test="CPO_NO != '' and CPO_NO != null">
				   AND UPOHD.CPO_NO <include refid="com.sql.likeL"/> #{CPO_NO} <include refid="com.sql.likeR"/>
				</if>

			GROUP BY UPOHD.GATE_CD, UPOHD.CUST_CD, UPOHD.CPO_NO, UPOHD.CPO_USER_DEPT_CD, UPOHD.CPO_USER_ID
		) AA
	</select>

	<!-- BAD2_030 -->
	<!-- 품목별 실적관리 -->
	<select id="bad2030_doSearch" parameterType="hashMap" resultType="hashMap">
	SELECT   GATE_CD
           , CUST_CD
           , <include refid="com.sql.dbo"/>getCustName(GATE_CD, CUST_CD) AS CUST_NM
           , ITEM_CD
           , ITEM_DESC
           , ITEM_SPEC
           , CPO_CNT
           , CPO_QTY
           , REPLACE(CONVERT(VARCHAR, CAST(CPO_ITEM_AMT AS MONEY), 1), '.00', '') AS CPO_ITEM_AMT
           , REPLACE(CONVERT(VARCHAR, CAST(STD_ITEM_AMT AS MONEY), 1), '.00', '') AS STD_ITEM_AMT
           , CPO_ITEM_AMT AS ORG_CPO_ITEM_AMT
           , STD_ITEM_AMT AS ORG_STD_ITEM_AMT
	  FROM (
			SELECT   UPOHD.GATE_CD
                   , UPOHD.CUST_CD
                   , UPODT.ITEM_CD
                   , MAX(UPODT.ITEM_DESC) AS ITEM_DESC
                   , MAX(UPODT.ITEM_SPEC) AS ITEM_SPEC
                   , COUNT(UPODT.CPO_NO) AS CPO_CNT
                   , SUM(<include refid="com.sql.nvl"/>(UPODT.CPO_QTY, 0)) AS CPO_QTY
                   , SUM(<include refid="com.sql.nvl"/>(UPODT.CPO_ITEM_AMT, 0)) AS CPO_ITEM_AMT
                   , SUM(<include refid="com.sql.nvl"/>(YPODT.STD_ITEM_AMT, 0)) AS STD_ITEM_AMT
			  FROM STOUPODT UPODT
              JOIN STOUPOHD UPOHD
                ON (UPODT.GATE_CD  = UPOHD.GATE_CD
               AND UPODT.CUST_CD  = UPOHD.CUST_CD
               AND UPODT.CPO_NO   = UPOHD.CPO_NO
               AND UPOHD.DEL_FLAG = '0')
              LEFT JOIN STOYPODT YPODT
                     ON (UPODT.GATE_CD  = YPODT.GATE_CD
                     AND UPODT.CUST_CD  = YPODT.CUST_CD
                     AND UPODT.CPO_NO   = YPODT.CPO_NO
                     AND UPODT.CPO_SEQ  = YPODT.CPO_SEQ
                     AND YPODT.DEL_FLAG = '0')
              LEFT JOIN STOYPOHD YPOHD
                     ON (YPODT.GATE_CD  = YPOHD.GATE_CD
                     AND YPODT.PO_NO	= YPOHD.PO_NO
                     AND YPOHD.SIGN_STATUS = 'E' -- 결재완료
                     AND YPOHD.DEL_FLAG = '0')

				WHERE UPOHD.GATE_CD = #{ses.gateCd}
				AND UPOHD.DEL_FLAG = '0'
				AND UPODT.DEL_FLAG = '0'
				AND UPODT.PROGRESS_CD NOT IN ('10', '20', '35', '80', 'ZZ')

				<if test="CPO_START_DATE != '' and CPO_END_DATE != ''">
					AND <include refid="com.sql.toDateChar"/>(UPOHD.CPO_DATE, 'yyyyMMdd') BETWEEN #{CPO_START_DATE} AND #{CPO_END_DATE}
				</if>
				<if test="CUST_CD != '' and CUST_CD != ''">
					AND UPOHD.CUST_CD <include refid="com.sql.likeL"/> #{CUST_CD} <include refid="com.sql.likeR"/>
				</if>
				<if test="CUST_NM != '' and CUST_NM != ''">
					AND <include refid="com.sql.dbo"/>GETCUSTNAME(UPOHD.GATE_CD, UPOHD.CUST_CD) <include refid="com.sql.likeL"/> #{CUST_NM} <include refid="com.sql.likeR"/>
				</if>
				<if test ="ITEM_CD != '' and ITEM_CD !=null">
           			AND UPODT.ITEM_CD <include refid="com.sql.likeL"/> #{ITEM_CD} <include refid="com.sql.likeR"/>
        		</if>

			GROUP BY UPOHD.GATE_CD, UPOHD.CUST_CD, UPODT.ITEM_CD
		) AA
	</select>

	<select id="bad1070_doSearchD" parameterType="hashMap" resultType="hashMap">
		SELECT
		        A.CUST_CD
		       , <include refid="com.sql.dbo"/>getCustName(A.GATE_CD, A.CUST_CD) AS CUST_NM
		       , (SELECT B.ACC_NUM FROM STOCCUST B WHERE B.GATE_CD = A.GATE_CD AND B.CUST_CD = A.CUST_CD ) AS ACC_NUM
		       , A.SEQ
		       , A.DELY_NM
		       , A.DELY_ZIP_CD
		       , A.DELY_ADDR_1
		       , A.DELY_ADDR_2
		       , A.RECIPIENT_NM
		       , A.RECIPIENT_DEPT_NM
		       , A.RECIPIENT_TEL_NUM
		       , A.RECIPIENT_FAX_NUM
		       , A.RECIPIENT_CELL_NUM
		       , A.RECIPIENT_EMAIL
		       , A.USE_FLAG
		       , A.DELY_RMK
		       , <include refid="com.sql.dbo"/>getUserName(A.GATE_CD, A.MOD_USER_ID, #{ses.langCd}) AS MOD_USER_NM
		       , <include refid="com.sql.toDateChar"/>(A.MOD_DATE, 'YYYY-MM-DD HH24:MI') AS MOD_DATE
		  FROM STOCCSDM A
		 WHERE A.GATE_CD = #{ses.gateCd}
		   AND A.CUST_CD = #{ses.companyCd}
		<if test ="DELY_NM != '' and DELY_NM !=null">
           AND A.DELY_NM <include refid="com.sql.likeL"/> #{DELY_NM} <include refid="com.sql.likeR"/>
        </if>
		<if test ="RECIPIENT_NM != '' and RECIPIENT_NM !=null">
           AND A.RECIPIENT_NM <include refid="com.sql.likeL"/> #{RECIPIENT_NM} <include refid="com.sql.likeR"/>
        </if>
		<if test="USE_FLAG != '' and USE_FLAG != null">
		   AND A.USE_FLAG = #{USE_FLAG}
		</if>
		ORDER BY A.SEQ, A.DELY_NM
    </select>

    <insert id="insertStocCsdm" parameterType="hashmap">
		INSERT INTO STOCCSDM (
								  GATE_CD
								, CUST_CD
								, SEQ
								, REG_DATE
								, REG_USER_ID
								, MOD_DATE
								, MOD_USER_ID
								, DEL_FLAG
								, USE_FLAG
								, DELY_NM
								, RECIPIENT_NM
								, RECIPIENT_DEPT_NM
								, RECIPIENT_TEL_NUM
								, RECIPIENT_FAX_NUM
								, RECIPIENT_CELL_NUM
								, RECIPIENT_EMAIL
								, DELY_ZIP_CD
								, DELY_ADDR_1
								, DELY_ADDR_2
								, DELY_RMK
								, CUST_DELY_CD
								, CSDM_SEQ
								)
						VALUES (
								  #{ses.gateCd}
								, #{CUST_CD}
								, (SELECT <include refid="com.sql.nvl"/>(MAX(SEQ)+1, 1) FROM STOCCSDM WHERE GATE_CD = #{ses.gateCd} AND CUST_CD = #{CUST_CD})
								, <include refid="com.sql.sysdate"/>
								, #{ses.userId}
								, <include refid="com.sql.sysdate"/>
								, #{ses.userId}
								, '0'
								, #{USE_FLAG}
								, #{DELY_NM}
								, #{RECIPIENT_NM}
								, #{RECIPIENT_DEPT_NM}
								, #{RECIPIENT_TEL_NUM}
								, #{RECIPIENT_FAX_NUM}
								, #{RECIPIENT_CELL_NUM}
								, #{RECIPIENT_EMAIL}
								, #{DELY_ZIP_CD}
								, #{DELY_ADDR_1}
								, #{DELY_ADDR_2}
								, #{DELY_RMK}
								, ''
								, (SELECT <include refid="com.sql.nvl"/>(MAX(SEQ)+1, 1) FROM STOCCSDM WHERE GATE_CD = #{ses.gateCd})
								)
	</insert>

	<update id="updateStocCsdm" parameterType="hashmap">

		UPDATE STOCCSDM
		SET MOD_USER_ID = #{ses.userId}
			, MOD_DATE = <include refid="com.sql.sysdate"/>
			, DEL_FLAG = '0'
			, USE_FLAG = #{USE_FLAG}
			, DELY_NM = #{DELY_NM}
			, RECIPIENT_NM = #{RECIPIENT_NM}
			, RECIPIENT_DEPT_NM = #{RECIPIENT_DEPT_NM}
			, RECIPIENT_TEL_NUM = #{RECIPIENT_TEL_NUM}
			, RECIPIENT_FAX_NUM = #{RECIPIENT_FAX_NUM}
			, RECIPIENT_CELL_NUM = #{RECIPIENT_CELL_NUM}
			, RECIPIENT_EMAIL = #{RECIPIENT_EMAIL}
			, DELY_ZIP_CD = #{DELY_ZIP_CD}
			, DELY_ADDR_1 = #{DELY_ADDR_1}
			, DELY_ADDR_2 = #{DELY_ADDR_2}
			, DELY_RMK = #{DELY_RMK}
		WHERE GATE_CD = #{ses.gateCd}
		AND CUST_CD = #{CUST_CD}
		AND SEQ = #{SEQ}
	</update>

    <delete id="bad1070_doDeleteDT" parameterType="hashMap">
        UPDATE STOCCSDM
		SET MOD_USER_ID = #{ses.userId}
			, MOD_DATE = <include refid="com.sql.sysdate"/>
			, DEL_FLAG = '1'
        WHERE  GATE_CD = #{ses.gateCd}
        AND   CUST_CD = #{CUST_CD}
        AND   SEQ = #{SEQ}
    </delete>

	<select id="bad1080_doSearchD" parameterType="hashMap" resultType="hashMap">
		SELECT
		 	  A.CUST_CD
	        ,<include refid="com.sql.dbo"/>getCustName(A.GATE_CD, A.CUST_CD) AS CUST_NM
	        , A.PLANT_CD
	        ,<include refid="com.sql.dbo"/>getPlantName(A.GATE_CD, A.CUST_CD, A.PLANT_NM, #{ses.langCd}) AS PLANT_NM
			, A.CUBL_SQ
			, A.CUBL_NM
			, A.CUBL_ZIP_CD
			, A.CUBL_ADDR1
			, A.CUBL_ADDR2
			, A.COMPANY_NM
			, A.IRS_NUM
			, A.CEO_USER_NM
			, A.BUSINESS_TYPE
			, A.INDUSTRY_TYPE
			, A.CUBL_BANK_NM
			, A.CUBL_ACCOUNT_NUM
			, A.CUBL_ACCOUNT_NM
			, A.CUBL_USER_NM
			, A.CUBL_USER_TEL_NUM
			, A.CUBL_USER_FAX_NUM
			, A.CUBL_USER_CELL_NUM
			, A.CUBL_USER_EMAIL
			, A.MNG_ID
			, A.USE_FLAG
			, A.IRS_SUB_NUM
			, A.IRS_SUB_ZIP_CD
			, A.IRS_SUB_ADDR
			, A.ACC_CD
			,(SELECT B.ACC_NUM FROM STOCCUST B WHERE B.GATE_CD = A.GATE_CD AND B.CUST_CD = A.CUST_CD ) AS ACC_NUM
			,<include refid="com.sql.dbo"/>getUserName(A.GATE_CD, A.MOD_USER_ID, #{ses.langCd}) AS MOD_USER_NM
	        ,<include refid="com.sql.toDateChar"/>(A.MOD_DATE, 'YYYY-MM-DD HH24:MI') AS MOD_DATE
		  FROM STOCCUBL A
	     WHERE A.GATE_CD = #{ses.gateCd}
	       AND A.CUST_CD = #{ses.companyCd}
	       AND A.USE_FLAG = '1'
		<if test ="CUBL_NM != '' and CUBL_NM !=null">
           AND A.CUBL_NM <include refid="com.sql.likeL"/> #{CUBL_NM} <include refid="com.sql.likeR"/>
        </if>
        <if test ="COMPANY_NM != '' and COMPANY_NM !=null">
           AND A.COMPANY_NM <include refid="com.sql.likeL"/> #{COMPANY_NM} <include refid="com.sql.likeR"/>
        </if>
        <if test ="IRS_NUM != '' and IRS_NUM !=null">
           AND A.IRS_NUM <include refid="com.sql.likeL"/> #{IRS_NUM} <include refid="com.sql.likeR"/>
        </if>
	  ORDER BY A.CUBL_SQ, A.CUBL_NM
    </select>


</mapper>
