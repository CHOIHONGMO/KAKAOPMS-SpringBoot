<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.st_ones.evermp.TX01.TX01_Mapper">

    <select id="tx01020_detail" parameterType="hashMap" resultType="hashMap">
		SELECT
			 CASE WHEN WRBTR <![CDATA[<]]> 0 THEN 'S' ELSE SHKZG END SHKZG
			,HKONT
			,<include refid="com.sql.dbo"/>getCodeName(#{ses.gateCd}, 'MP0121',A.HKONT, #{ses.langCd}) HKONTNM

			,CASE WHEN SHKZG = 'S' THEN CASE WHEN HKONT='1000000058' THEN TO_CHAR(WRBTR * -1) ELSE WRBTR END
			      ELSE
					CASE WHEN WRBTR <![CDATA[<]]> 0 THEN WRBTR ELSE '0' END
			      END S_AMT
			,CASE WHEN SHKZG = 'H'
			      THEN
					CASE WHEN WRBTR <![CDATA[<]]> 0 THEN '0' ELSE WRBTR END
			      ELSE '0'
			 END H_AMT


		FROM STOCSLDT A
		WHERE MGRNO = #{MGRNO}

	</select>

    <select id="getVendorInfo" parameterType="hashMap" resultType="hashMap">
		SELECT
		*
		FROM STOCVNGL
		WHERE GATE_CD = #{ses.gateCd}
		AND VENDOR_CD = #{VENDOR_CODE}
		AND DEL_FLAG = '0'
	</select>


    <select id="getCustInfo" parameterType="hashMap" resultType="hashMap">
		SELECT
            (SELECT SUB.SAPCD
                        FROM STOCSLMP SUB
                      WHERE SUB.ISN_TYPE = 'SAP06'
                          AND SUB.ISN_CODE =   R2.GROUP_COMPANY_CODE) GROUP_COMPANY_CODE --고객마스터그

            ,(SELECT SUB.SAPCD
                        FROM STOCSLMP SUB
                      WHERE SUB.ISN_TYPE = 'SAP05'
                          AND SUB.ISN_CODE =   R2.RELAT_YN) RELATION_COMPANY_TYPE --영업구분룹

			,CASE WHEN #{TAX_TYPE} = 'T1' THEN 'CA12'
                  WHEN #{TAX_TYPE} = 'E1' THEN 'CB31'
                  WHEN #{TAX_TYPE} = 'Z1' THEN 'CA21'
                  WHEN #{TAX_TYPE} = 'N1' THEN 'DA12'
				  ELSE 'DB31'
		     END TAX_TYPE
		FROM STOCCUST R2
		WHERE GATE_CD = #{ses.gateCd}
		AND CUST_CD = #{VENDOR_CODE}
		AND DEL_FLAG = '0'
/*
T1 1	과세
E1 2	면세
Z1 3	영세율
N1 4	매입세불공제
*/

	</select>

    <select id="tx01010_doSearch" parameterType="hashMap" resultType="hashMap">
        SELECT TTIH.TAX_NUM
            , '' AS TAX_SEQ
            , MAX(APAR.AP_TAX_NUM) AS AP_TAX_NUM
            , MAX(APAR.AR_TAX_NUM) AS AR_TAX_NUM
            , MAX(APAR.CUBL_NM) AS RCOM_NM
			, MAX(APAR.PLANT_CD) PLANT_CD

            , '0' AS SEL_CHK_YN

            , CASE WHEN (MAX(TTIH.TRANS_YN) != '' AND MAX(TTIH.TRANS_YN) IS NOT NULL AND (MAX(TTIH.TRANS_YN) = 'Y' OR MAX(TTIH.TRANS_YN) = 'N')) THEN
                    CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'A' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'B' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'F' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'E' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '5' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '0' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '3' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '1' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '2' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '4' THEN 'N'
                    ELSE 'Y' END
              ELSE
                    CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'A' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'B' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'F' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'E' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '5' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '0' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '3' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '1' THEN 'Y'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '2' THEN 'N'
                        WHEN MAX(E_BILL_ASP_STAT_TYPE) = '4' THEN 'N'
                    ELSE 'N' END
              END AS TAX_BILLSEQ_YN_BAK

            , CASE  WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'NN' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'YY' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'DY' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'DR' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'W' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN 'N'
              ELSE 'N'
              END AS TAX_BILLSEQ_YN

            , MAX(TAX_EXD_ID) AS TAX_EXD_ID
            , MAX(E_BILL_ASP_STAT_TYPE) AS BILL_STAT_TYPE
            , MAX(E_BILL_ASP_STAT_DESC) AS BILL_STAT_DESC
            , CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN '전송대기' --'미신고'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'A' THEN '접수대기'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'B' THEN '접수완료'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN '신고완료'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'F' THEN '신고실패'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'E' THEN '전송오류'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN '전송'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '5' THEN '미전송'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '0' THEN '미개봉'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '3' THEN '개봉'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '1' THEN '승인'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '2' THEN '반려'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '4' THEN '승인취소'
              ELSE
                   ''
              END AS BILL_STAT_NM_BAK

            , CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'NN' THEN '미승인'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'YY' THEN '승인'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'DY' THEN '역발행취소'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'DR' THEN '발행취소요청'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN '반려'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN '미전송'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'W' THEN '전송대기'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN '전송완료'
              ELSE
                   ''
              END AS BILL_STAT_NM

            , CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'A' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'B' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'F' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'E' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '5' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '0' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '3' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '1' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '2' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '4' THEN 'Y'
              ELSE 'N'
              END AS BILL_DEL_YN_BAK

            , CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'NN' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'YY' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'DY' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'DR' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'W' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN 'Y'
              ELSE 'N'
              END AS BILL_DEL_YN

            , CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'A' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'B' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'F' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'E' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '5' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '0' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '3' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '1' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '2' THEN 'Y'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = '4' THEN 'Y'
              ELSE 'N'
              END AS BILL_RE_SEND_YN_BAK

            , CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'NN' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'YY' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'DY' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'DR' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'W' THEN 'N'
                    WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN 'N'
              ELSE 'N'
              END AS BILL_RE_SEND_YN

            , MAX(TTIH.TRANS_YN) AS TRANS_YN
            , CASE WHEN MAX(TTIH.TRANS_YN) = 'Y' THEN '전표생성'
                   WHEN MAX(TTIH.TRANS_YN) = 'N' THEN '전표이관'
                   WHEN MAX(TTIH.TRANS_YN) = 'C' THEN '전표취소'
              ELSE
                   ''
              END AS TRANS_NM

            , MAX(TTIH.SCOM_CODE) AS SCOM_CODE
            , MAX(TTIH.SIRS_NUM) AS SIRS_NUM
            , MAX(TTIH.SCOM_NM) AS SCOM_NM
            , MAX(TTIH.SCEO_NM) AS SCEO_NM
            , MAX(TTIH.SBUSINESS_TYPE) AS SBUSINESS_TYPE
            , MAX(TTIH.SINDUSTRY_TYPE) AS SINDUSTRY_TYPE
            , MAX(TTIH.SADDR1) AS SADDR1
            , MAX(TTIH.SADDR2) AS SADDR2
            , MAX(TTIH.SUSER_ID) AS SUSER_ID

            , CASE WHEN MAX(TTIH.SUSER_ID_ASP) = '' OR MAX(TTIH.SUSER_ID_ASP) IS NULL THEN
                   CASE WHEN MAX(TTIH.SALES_TYPE) = 'S' AND MAX(TTIH.E_BILL_ASP_TYPE) = '0' THEN 'ymro'
                   ELSE ''
                   END
              ELSE MAX(TTIH.SUSER_ID_ASP)
              END AS SUSER_ID_ASP



            , MAX(TTIH.SUSER_NM) AS SUSER_NM
            , MAX(TTIH.SUSER_DEPT_NM) AS SUSER_DEPT_NM
            , MAX(TTIH.SUSER_TEL_NO) AS SUSER_TEL_NO
            , MAX(TTIH.SUSER_EMAIL) AS SUSER_EMAIL
            , MAX(TTIH.SSUB_IRS_NUM) AS SSUB_IRS_NUM


            , MAX(TTIH.RCOM_CODE) AS RCOM_CODE
            , MAX(TTIH.RIRS_NUM) AS RIRS_NUM

            <!-- , MAX(TTIH.RCOM_NM) AS RCOM_NM -->
            , MAX(TTIH.RCEO_NM) AS RCEO_NM




            , MAX(TTIH.RBUSINESS_TYPE) AS RBUSINESS_TYPE
            , MAX(TTIH.RINDUSTRY_TYPE) AS RINDUSTRY_TYPE
            , MAX(TTIH.RADDR1) AS RADDR1
            , MAX(TTIH.RADDR2) AS RADDR2
            , MAX(TTIH.RUSER_ID) AS RUSER_ID

            , CASE WHEN MAX(TTIH.RUSER_ID_ASP) = '' OR MAX(TTIH.RUSER_ID_ASP) IS NULL THEN
                   CASE WHEN MAX(TTIH.SALES_TYPE) = 'P' AND MAX(TTIH.E_BILL_ASP_TYPE) = '0' THEN 'ymro'
                   ELSE ''
                   END
              ELSE MAX(TTIH.RUSER_ID_ASP)
              END AS RUSER_ID_ASP

            , MAX(TTIH.RUSER_NM) AS RUSER_NM
            , MAX(TTIH.RUSER_DEPT_NM) AS RUSER_DEPT_NM
            , MAX(TTIH.RUSER_TEL_NO) AS RUSER_TEL_NO
            , MAX(TTIH.RUSER_EMAIL) AS RUSER_EMAIL
            , MAX(TTIH.RSUB_IRS_NUM) AS RSUB_IRS_NUM

            , MAX(TTIH.SUP_AMT) AS SUP_AMT
            , MAX(TTIH.TAX_AMT) AS TAX_AMT
            , SUM(APAR.PO_GR_ITEM_AMT) AS PO_GR_ITEM_AMT
            , MAX(TTIH.SALES_TYPE) AS SALES_TYPE
            , <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'MP074', MAX(TTIH.SALES_TYPE), #{ses.langCd}) AS SALES_TYPE_NM
            , MAX(TTIH.RQ_RE_TYPE) AS RQ_RE_TYPE
            , <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'MP073', MAX(TTIH.RQ_RE_TYPE), #{ses.langCd}) AS RQ_RE_TYPE_NM

            , CASE WHEN MAX(TTIH.TAX_SEND_TYPE) = '' AND MAX(TTIH.SALES_TYPE) = 'P' THEN '200' ELSE MAX(TTIH.TAX_SEND_TYPE) END AS TAX_SEND_TYPE
            , <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'MP064', CASE WHEN MAX(TTIH.TAX_SEND_TYPE) = '' AND MAX(TTIH.SALES_TYPE) = 'P' THEN '200' ELSE MAX(TTIH.TAX_SEND_TYPE) END, #{ses.langCd}) AS TAX_SEND_TYPE_NM

            , MAX(TTIH.VAT_CD) AS VAT_CD
            , <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'M036', MAX(TTIH.VAT_CD), #{ses.langCd}) AS VAT_NM
            , MAX(TTIH.ISSUE_DATE) AS ISSUE_DATE

            , MAX(TTIH.REMAKR) AS REMAKR
            , MAX(TTIH.E_BILL_ASP_TYPE) AS E_BILL_ASP_TYPE
            , <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'MP075', MAX(TTIH.E_BILL_ASP_TYPE), #{ses.langCd}) AS E_BILL_ASP_TYPE_NM

            , MAX(TTIH.TAX_BILLSEQ) AS TAX_BILLSEQ
            , MAX(TTIH.TAX_ASP_NM) AS TAX_ASP_NM
            , MAX(TTIH.TAX_ASP_BILLSEQ) AS TAX_ASP_BILLSEQ

            , '' AS CSTCO
            , MAX(TTIH.DEPOSIT_YN) AS DEPOSIT_YN
            , <include refid="com.sql.toDateChar"/>(MAX(TTIH.DEPOSIT_DATE), 'YYYY-MM-DD') AS DEPOSIT_DATE
			<if test="_databaseId == 'mssql'">
            , CASE WHEN MAX(TTIH.SUBJECT_ITEM_NM) IS NOT NULL THEN MAX(TTIH.SUBJECT_ITEM_NM)
                ELSE CASE WHEN COUNT(TTID.TAX_NUM) = 1 THEN MAX(TTID.ITEM_DESC) ELSE MAX(TTID.ITEM_DESC) <include refid="com.sql.stringMerge"/> ' 외 ' <include refid="com.sql.stringMerge"/> CONVERT(VARCHAR, COUNT(TTID.TAX_NUM) - 1) <include refid="com.sql.stringMerge"/> '건' END
                END AS SUBJECT_ITEM_NM
			</if>
			<if test="_databaseId == 'oracle'">
            , CASE WHEN MAX(TTIH.SUBJECT_ITEM_NM) IS NOT NULL THEN MAX(TTIH.SUBJECT_ITEM_NM)
                ELSE CASE WHEN COUNT(TTID.TAX_NUM) = 1 THEN MAX(TTID.ITEM_DESC) ELSE MAX(TTID.ITEM_DESC) <include refid="com.sql.stringMerge"/> ' 외 ' <include refid="com.sql.stringMerge"/> TO_CHAR(COUNT(TTID.TAX_NUM) - 1) <include refid="com.sql.stringMerge"/> '건' END
                END AS SUBJECT_ITEM_NM
			</if>
            , <include refid="com.sql.stringMergeStart"/> MAX(APAR.CPO_NO) <include refid="com.sql.stringMerge"/> <include refid="com.sql.toVarchar"/>MAX(APAR.CPO_SEQ)<include refid="com.sql.asVarchar"/><include refid="com.sql.stringMergeEnd"/> AS CPO_NO_SEQ --주문키
			, <include refid="com.sql.stringMergeStart"/> MAX(APAR.GR_NO) <include refid="com.sql.stringMerge"/> <include refid="com.sql.toVarchar"/>MAX(APAR.GR_SEQ)<include refid="com.sql.asVarchar"/><include refid="com.sql.stringMergeEnd"/> AS GR_NO_SEQ
            , MAX(TTIH.ACCOUNT_CHECK_YN) AS ACCOUNT_CHECK_YN
            , MAX(TTIH.CLOSING_NO) AS CLOSING_NO
            , MAX(TTIH.CLOSING_SEQ) AS CLOSING_SEQ
            , MAX(TTIH.TAX_ISSUE_ID) AS TAX_ISSUE_ID
            , MAX(TTIH.SLIP_NM) AS SLIP_NM
            , MAX(TTIH.SLIP_NM_H) AS SLIP_NM_H
            , MAX(TTIH.WW050) AS WW050
			,(SELECT CASE WHEN COUNT(*) = 0 THEN 'N' ELSE 'Y' END FROM STOCSLHD WHERE MGRNO = TTIH.TAX_NUM AND STATUS = 'S') SLHD_YN
            , MAX(APAR.REG_USER_ID) AS AM_USER_ID
            , MAX(<include refid="com.sql.dbo"/>GETUSERNAME(#{ses.gateCd}, APAR.REG_USER_ID, #{ses.langCd})) AS AM_USER_NM
        FROM STOCTTIH TTIH
        JOIN STOCTTID TTID
            ON  TTIH.GATE_CD = TTID.GATE_CD
            AND TTIH.TAX_NUM = TTID.TAX_NUM
            AND TTID.DEL_FLAG = '0'
        JOIN STOCAPAR APAR
            ON  APAR.GATE_CD = TTID.GATE_CD
            AND APAR.CLOSING_NO = TTID.CLOSING_NO
            AND APAR.CLOSING_SEQ = TTID.CLOSING_SEQ
            AND APAR.DEL_FLAG = '0'
        WHERE TTIH.GATE_CD  = #{ses.gateCd}
        AND TTIH.DEL_FLAG = '0'
        AND TTIH.SALES_TYPE = 'S'
        <if test="CUST_CD != '' and CUST_CD != null">
            AND (APAR.CUST_CD <include refid="com.sql.likeL"/> #{CUST_CD} <include refid="com.sql.likeR"/> OR
                 APAR.AP_TAX_NUM IN (
                                        SELECT TTIH.TAX_NUM
                                        FROM STOCTTIH TTIH
                                        WHERE 1=1
                                        AND TTIH.RCOM_CODE <include refid="com.sql.likeL"/> #{RCOM_CODE} <include refid="com.sql.likeR"/>
                                        )
                )
        </if>
        <if test="CUST_NM != '' and CUST_NM != null">
            AND (TTIH.RCOM_NM <include refid="com.sql.likeL"/> #{RCOM_NM} <include refid="com.sql.likeR"/> OR
                 APAR.AP_TAX_NUM IN (
                                        SELECT TTIH.TAX_NUM
                                        FROM STOCTTIH TTIH
                                        WHERE 1=1
                                        AND <include refid="com.sql.dbo"/>getCustName(TTIH.GATE_CD, TTIH.RCOM_CODE) <include refid="com.sql.likeL"/> #{CUST_NM} <include refid="com.sql.likeR"/>
                                        )
                )
        </if>

        <if test="PLANT_CD != '' and PLANT_CD != null">
            AND APAR.PLANT_CD <include refid="com.sql.likeL"/> #{PLANT_CD} <include refid="com.sql.likeR"/>
        </if>
        <if test="PLANT_NM != '' and PLANT_NM != null">
            AND <include refid="com.sql.dbo"/>getPlantName(#{ses.gateCd}, APAR.CUST_CD, APAR.PLANT_CD, #{ses.langCd}) <include refid="com.sql.likeL"/> #{PLANT_NM} <include refid="com.sql.likeR"/>
        </if>
        <if test="RMK != '' and RMK != null">
			AND APAR.RMK <include refid="com.sql.likeL"/> #{RMK} <include refid="com.sql.likeR"/>
        </if>



        <if test="DEPT_NM != '' and DEPT_NM != null">
            AND CVUR.DEPT_NM <include refid="com.sql.likeL"/> #{DEPT_NM} <include refid="com.sql.likeR"/>
        </if>
        <if test="CPO_USER_ID != '' and CPO_USER_ID != null">
            AND APAR.CPO_USER_ID <include refid="com.sql.likeL"/> #{CPO_USER_ID} <include refid="com.sql.likeR"/>
        </if>
        <if test="CLOSE_YEAR != '' and CLOSE_YEAR != null">
            AND <include refid="com.sql.subStr"/>(APAR.CLOSING_YEAR_MONTH, 1, 4) = #{CLOSE_YEAR}
        </if>
        <if test="CLOSE_MONTH != '' and CLOSE_MONTH != null">
            AND <include refid="com.sql.subStr"/>(APAR.CLOSING_YEAR_MONTH, 5, 2) = #{CLOSE_MONTH}
        </if>
        <if test="DOC_NUM != '' and DOC_NUM != null">
            <choose>
                <when test="DOC_NUM_COMBO != '' and DOC_NUM_COMBO != null and DOC_NUM_COMBO eq 'CPO_NO'.toString()">
					<if test="DOC_CNT == 1">
					    <choose>
				            <when test="EXCLUDE != '' and EXCLUDE != null and EXCLUDE eq '1'.toString()">
								<if test="_databaseId == 'mssql'">
			                    AND ((UPODT.CPO_NO NOT IN ${DOC_NUM} AND UPODT.IF_CPO_NO NOT IN ${DOC_NUM} AND UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>CAST(UPODT.IF_CPO_SEQ AS NVARCHAR(20)) NOT IN ${DOC_NUM}) OR UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>CAST(UPODT.IF_CPO_SEQ AS NVARCHAR(20)) IS NULL)
								</if>
								<if test="_databaseId == 'oracle'">
			                    AND ((UPODT.CPO_NO NOT IN ${DOC_NUM} AND UPODT.IF_CPO_NO NOT IN ${DOC_NUM} AND UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.IF_CPO_SEQ) NOT IN ${DOC_NUM}) OR UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.IF_CPO_SEQ) IS NULL)
								</if>
                            </when>
                            <otherwise>
								<if test="_databaseId == 'mssql'">
                                AND (UPODT.CPO_NO IN ${DOC_NUM} OR UPODT.IF_CPO_NO IN ${DOC_NUM} OR UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>CAST(UPODT.IF_CPO_SEQ AS NVARCHAR(20)) IN ${DOC_NUM})
								</if>
								<if test="_databaseId == 'oracle'">
                                AND (UPODT.CPO_NO IN ${DOC_NUM} OR UPODT.IF_CPO_NO IN ${DOC_NUM} OR UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.IF_CPO_SEQ) IN ${DOC_NUM})
								</if>
                            </otherwise>
                        </choose>
					</if>
					<if test="DOC_CNT == 0">
					    <choose>
				            <when test="EXCLUDE != '' and EXCLUDE != null and EXCLUDE eq '1'.toString()">
								<if test="_databaseId == 'mssql'">
			                    AND ((UPODT.CPO_NO NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/> AND UPODT.IF_CPO_NO NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/> AND UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>CAST(UPODT.IF_CPO_SEQ AS NVARCHAR(20)) NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/>) OR UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>CAST(UPODT.IF_CPO_SEQ AS NVARCHAR(20)) IS NULL)
								</if>
								<if test="_databaseId == 'oracle'">
			                    AND ((UPODT.CPO_NO NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/> AND UPODT.IF_CPO_NO NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/> AND UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.IF_CPO_SEQ) NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/>) OR UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.IF_CPO_SEQ) IS NULL)
								</if>
                            </when>
                            <otherwise>
								<if test="_databaseId == 'mssql'">
                                AND (UPODT.CPO_NO <include refid="com.sql.likeL"/> #{CPO_NO} <include refid="com.sql.likeR"/> OR UPODT.IF_CPO_NO <include refid="com.sql.likeL"/> #{IF_CPO_NO} <include refid="com.sql.likeR"/> OR ${DOC_NUM_ORG_L} UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>CAST(UPODT.IF_CPO_SEQ AS NVARCHAR(20)) ${DOC_NUM_ORG_R})
								</if>
								<if test="_databaseId == 'oracle'">
                                AND (UPODT.CPO_NO <include refid="com.sql.likeL"/> #{CPO_NO} <include refid="com.sql.likeR"/> OR UPODT.IF_CPO_NO <include refid="com.sql.likeL"/> #{IF_CPO_NO} <include refid="com.sql.likeR"/> OR ${DOC_NUM_ORG_L} UPODT.IF_CPO_NO<include refid="com.sql.stringMerge"/>'-'<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.IF_CPO_SEQ) ${DOC_NUM_ORG_R})
								</if>
                            </otherwise>
                        </choose>
					</if>
				</when>
				<when test="DOC_NUM_COMBO != '' and DOC_NUM_COMBO != null and DOC_NUM_COMBO eq 'CPO_NO_SEQ'.toString()">
					<if test="DOC_CNT == 1">
					    <choose>
				            <when test="EXCLUDE != '' and EXCLUDE != null and EXCLUDE eq '1'.toString()">
								<if test="_databaseId == 'mssql'">
			                    AND UPODT.CPO_NO<include refid="com.sql.stringMerge"/>CAST(UPODT.CPO_SEQ AS NVARCHAR(20)) NOT IN ${DOC_NUM}
								</if>
								<if test="_databaseId == 'oracle'">
			                    AND UPODT.CPO_NO<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.CPO_SEQ) NOT IN ${DOC_NUM}
								</if>
                            </when>
                            <otherwise>
								<if test="_databaseId == 'mssql'">
                                AND UPODT.CPO_NO<include refid="com.sql.stringMerge"/>CAST(UPODT.CPO_SEQ AS NVARCHAR(20)) IN ${DOC_NUM}
								</if>
								<if test="_databaseId == 'oracle'">
                                AND UPODT.CPO_NO<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.CPO_SEQ) IN ${DOC_NUM}
								</if>
                            </otherwise>
                        </choose>
					</if>
					<if test="DOC_CNT == 0">
					    <choose>
				            <when test="EXCLUDE != '' and EXCLUDE != null and EXCLUDE eq '1'.toString()">
								<if test="_databaseId == 'mssql'">
			                    AND UPODT.CPO_NO<include refid="com.sql.stringMerge"/>CAST(UPODT.CPO_SEQ AS NVARCHAR(20)) NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/>
								</if>
								<if test="_databaseId == 'oracle'">
			                    AND UPODT.CPO_NO<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.CPO_SEQ) NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/>
								</if>
                            </when>
                            <otherwise>
								<if test="_databaseId == 'mssql'">
                                AND ${DOC_NUM_ORG_L} UPODT.CPO_NO<include refid="com.sql.stringMerge"/>CAST(UPODT.CPO_SEQ AS NVARCHAR(20)) ${DOC_NUM_ORG_R}
								</if>
								<if test="_databaseId == 'oracle'">
                                AND UPODT.CPO_NO<include refid="com.sql.stringMerge"/>TO_CHAR(UPODT.CPO_SEQ) <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/>
								</if>
                            </otherwise>
                        </choose>
					</if>
				</when>
                <when test="DOC_NUM_COMBO != '' and DOC_NUM_COMBO != null and DOC_NUM_COMBO eq 'GR_NO_SEQ'.toString()">
					<if test="DOC_CNT == 1">
					    <choose>
				            <when test="EXCLUDE != '' and EXCLUDE != null and EXCLUDE eq '1'.toString()">
								<if test="_databaseId == 'mssql'">
			                    AND APAR.GR_NO<include refid="com.sql.stringMerge"/>CAST(APAR.GR_SEQ AS NVARCHAR(20)) NOT IN ${DOC_NUM}
								</if>
								<if test="_databaseId == 'oracle'">
			                    AND APAR.GR_NO<include refid="com.sql.stringMerge"/>TO_CHAR(APAR.GR_SEQ) NOT IN ${DOC_NUM}
								</if>
                            </when>
                            <otherwise>
								<if test="_databaseId == 'mssql'">
                                AND APAR.GR_NO<include refid="com.sql.stringMerge"/>CAST(APAR.GR_SEQ AS NVARCHAR(20)) IN ${DOC_NUM}
								</if>
								<if test="_databaseId == 'oracle'">
                                AND APAR.GR_NO<include refid="com.sql.stringMerge"/>TO_CHAR(APAR.GR_SEQ) IN ${DOC_NUM}
								</if>
                            </otherwise>
                        </choose>
					</if>
					<if test="DOC_CNT == 0">
					    <choose>
				            <when test="EXCLUDE != '' and EXCLUDE != null and EXCLUDE eq '1'.toString()">
								<if test="_databaseId == 'mssql'">
			                    AND APAR.GR_NO<include refid="com.sql.stringMerge"/>CAST(APAR.GR_SEQ AS NVARCHAR(20)) NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/>
								</if>
								<if test="_databaseId == 'oracle'">
			                    AND APAR.GR_NO<include refid="com.sql.stringMerge"/>TO_CHAR(APAR.GR_SEQ) NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/>
								</if>
                            </when>
                            <otherwise>
								<if test="_databaseId == 'mssql'">
                                AND ${DOC_NUM_ORG_L} APAR.GR_NO+CAST(APAR.GR_SEQ AS NVARCHAR(20)) ${DOC_NUM_ORG_R}
								</if>
								<if test="_databaseId == 'oracle'">
                                AND ${DOC_NUM_ORG_L} APAR.GR_NO || TO_CHAR(APAR.GR_SEQ) ${DOC_NUM_ORG_R}
								</if>
                            </otherwise>
                        </choose>
					</if>
				</when>
                <otherwise>
                    <if test="DOC_CNT == 1">
                        <choose>
                            <when test="EXCLUDE != '' and EXCLUDE != null and EXCLUDE eq '1'.toString()">
                                AND (UPODT.REF_MNG_NO NOT IN ${DOC_NUM} OR UPODT.REF_MNG_NO IS NULL)
                            </when>
                            <otherwise>
                                AND UPODT.REF_MNG_NO IN ${DOC_NUM}
                            </otherwise>
                        </choose>
                    </if>
                    <if test="DOC_CNT == 0">
                        <choose>
                            <when test="EXCLUDE != '' and EXCLUDE != null and EXCLUDE eq '1'.toString()">
                                AND (UPODT.REF_MNG_NO NOT <include refid="com.sql.likeL"/> #{DOC_NUM_ORG} <include refid="com.sql.likeR"/> OR UPODT.REF_MNG_NO IS NULL)
                            </when>
                            <otherwise>
                                AND UPODT.REF_MNG_NO <include refid="com.sql.likeL"/> #{REF_MNG_NO} <include refid="com.sql.likeR"/>
                            </otherwise>
                        </choose>
                    </if>
                </otherwise>
            </choose>
        </if>
        <if test="ITEM_CD != '' and ITEM_CD != null">
            <if test="ITEM_CNT == 1">
                AND (UPODT.ITEM_CD IN ${ITEM_CD} OR UPODT.CUST_ITEM_CD IN ${ITEM_CD})
            </if>
            <if test="ITEM_CNT == 0">
                AND (UPODT.ITEM_CD <include refid="com.sql.likeL"/> #{ITEM_CD} <include refid="com.sql.likeR"/> OR UPODT.CUST_ITEM_CD <include refid="com.sql.likeL"/> #{CUST_ITEM_CD} <include refid="com.sql.likeR"/>)
            </if>
        </if>
        <if test="TAX_SEND_TYPE != '' and TAX_SEND_TYPE != null">
            AND TTIH.TAX_SEND_TYPE = #{TAX_SEND_TYPE}
        </if>
        <if test="ITEM_DESC != '' and ITEM_DESC != null">
            AND (${ITEM_DESC_01} OR  ${ITEM_DESC_02})
        </if>
        <if test="AM_USER_ID != '' and AM_USER_ID != null">
            AND APAR.REG_USER_ID = #{AM_USER_ID}
        </if>
        <if test="MAKER_CD != '' and MAKER_CD != null">
            AND ${MAKER_CD_01}
        </if>
        <if test="MAKER_NM != '' and MAKER_NM != null">
            AND ${MAKER_NM_01}
        </if>
        <if test="ACCOUNT_CD != '' and ACCOUNT_CD != null">
            AND UPODT.ACCOUNT_CD <include refid="com.sql.likeL"/> #{ACCOUNT_CD} <include refid="com.sql.likeR"/>
        </if>
        <if test="ACCOUNT_NM != '' and ACCOUNT_NM != null">
            AND CUAC.ACCOUNT_NM <include refid="com.sql.likeL"/> #{ACCOUNT_NM} <include refid="com.sql.likeR"/>
        </if>
        <if test="BILL_STAT_TYPE_CD != '' and BILL_STAT_TYPE_CD != null">
            <if test='BILL_STAT_TYPE_CD != "" and BILL_STAT_TYPE_CD != null and BILL_STAT_TYPE_CD == "-"'>
                AND <include refid="com.sql.nvl"/>(TTIH.E_BILL_ASP_STAT_TYPE, '') IN ('', 'DY', 'DR', 'R')
                AND TTIH.E_BILL_ASP_TYPE = '0'
            </if>
            <if test='BILL_STAT_TYPE_CD != "" and BILL_STAT_TYPE_CD != null and BILL_STAT_TYPE_CD != "-"'>
                AND TTIH.E_BILL_ASP_STAT_TYPE = #{BILL_STAT_TYPE_CD}
            </if>
            AND TTIH.TRANS_YN NOT IN ('Y', 'N')
        </if>
        GROUP BY TTIH.GATE_CD, TTIH.TAX_NUM
        ORDER BY TTIH.TAX_NUM DESC
    </select>

    <select id="tx01010_doSearchTTID" parameterType="hashMap" resultType="hashMap">
        SELECT APAR.AP_TAX_NUM AS TAX_NUM
            , TTID.TAX_SEQ
            , APAR.AR_TAX_NUM
            , TTIH.SALES_TYPE
            , CASE WHEN TTIH.TRANS_YN = 'Y' OR TRANS_YN = 'N' OR E_BILL_ASP_STAT_TYPE NOT IN ('', 'E', '5', '0', '2', '4')
                   THEN 'N'
              ELSE 'Y' END AS TAX_EDIT_YN
            , APAR.VENDOR_CD
            , <include refid="com.sql.dbo"/>GETVENDORNAME(APAR.GATE_CD, APAR.VENDOR_CD, #{ses.langCd}) VENDOR_NM
            , APAR.ITEM_CD
            , APAR.CUST_ITEM_CD
            , APAR.ITEM_DESC
            , APAR.ITEM_SPEC
            , TTID.UNIT_AMT
            , TTID.QTY
            , TTID.SUP_AMT
            , TTID.TAX_AMT
            , TTID.TAX_AMT AS ORG_TAX_AMT
            , TTID.SUP_AMT + TTID.TAX_AMT AS TOT_AMT
            , <include refid="com.sql.toDateChar"/>(TTID.ITEM_TRADE_DATE, 'YYYY-MM-DD') AS ITEM_TRADE_DATE
            , TTID.REMARK
            , TTID.CLOSING_NO
            , TTID.CLOSING_SEQ
        FROM STOCTTIH TTIH
        JOIN STOCTTID TTID
            ON  TTIH.GATE_CD = TTID.GATE_CD
            AND TTIH.TAX_NUM = TTID.TAX_NUM
            AND TTID.DEL_FLAG = '0'
        JOIN STOCAPAR APAR
            ON  APAR.GATE_CD = TTID.GATE_CD
            AND APAR.CLOSING_NO = TTID.CLOSING_NO
            AND APAR.CLOSING_SEQ = TTID.CLOSING_SEQ
            AND APAR.DEL_FLAG = '0'
        WHERE TTIH.GATE_CD  = #{ses.gateCd}
          AND TTIH.DEL_FLAG = '0'
          AND TTID.TAX_NUM = #{TAX_NUM}
        ORDER BY TTIH.TAX_NUM, TTID.TAX_SEQ
    </select>

    <update id="tx01010_doUpdateTTID" parameterType="hashMap">
        UPDATE STOCTTID SET
            TAX_AMT = ${TAX_AMT}
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
        AND TAX_SEQ = #{TAX_SEQ}
    </update>

    <update id="tx01010_doUpdateTTID_TTIH" parameterType="hashMap">
        UPDATE STOCTTIH SET
            TAX_AMT = TAX_AMT + ${TAX_AMT} - ${ORG_TAX_AMT}
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

	<select id="tx01010_doSearchBILLSTAT" parameterType="hashMap" resultType="String">
		SELECT CASE WHEN #{BILL_STAT_TYPE} = 'E' THEN BL.ERR_MESG
                    WHEN #{BILL_STAT_TYPE} = '2' THEN BS.RETURNDES
                    WHEN #{BILL_STAT_TYPE} = '4' THEN BS.CONFDES
                    ELSE ''
                   END AS MSG
        FROM [@YE.BILL_TRANS] BT
                 LEFT JOIN [@YE.BILL_LOG] BL
                           ON BT.BILLSEQ = BL.BILLSEQ
                 LEFT JOIN [@YE.BILL_STAT] BS
                           ON BT.BILLSEQ = BS.BILLSEQ
        WHERE (CASE WHEN #{BILL_STAT_TYPE} = 'E' THEN BL.BILLSEQ ELSE BS.BILLSEQ END) = #{TAX_NUM}
	</select>

    <update id="tx01010_doSaveTTIH" parameterType="hashMap">
        UPDATE STOCTTIH SET
            SUSER_ID_ASP = #{SUSER_ID_ASP}
            , SUSER_NM = #{SUSER_NM}
            , SUSER_DEPT_NM = #{SUSER_DEPT_NM}
            , SUSER_TEL_NO = #{SUSER_TEL_NO}
            , SUSER_EMAIL = #{SUSER_EMAIL}

            , RUSER_ID_ASP = #{RUSER_ID_ASP}
            , RUSER_NM = #{RUSER_NM}
            , RUSER_DEPT_NM = #{RUSER_DEPT_NM}
            , RUSER_TEL_NO = #{RUSER_TEL_NO}
            , RUSER_EMAIL = #{RUSER_EMAIL}

            , TAX_SEND_TYPE = #{TAX_SEND_TYPE}
            , ISSUE_DATE = #{ISSUE_DATE}
            , TAX_AMT = ${TAX_AMT}
            , REMAKR = #{REMAKR}
            , E_BILL_ASP_TYPE = #{E_BILL_ASP_TYPE}
            , TAX_ASP_NM = #{TAX_ASP_NM}
            , TAX_ASP_BILLSEQ = #{TAX_ASP_BILLSEQ}

            , E_BILL_ASP_STAT_TYPE = CASE WHEN #{E_BILL_ASP_TYPE} = '1' THEN '' ELSE CASE WHEN #{SAVE_YN} = 'Y' THEN '' ELSE 'N' END END
            , SUBJECT_ITEM_NM = #{SUBJECT_ITEM_NM}

			,SLIP_NM    = #{SLIP_NM}
			,SLIP_NM_H  = #{SLIP_NM_H}
			,WW050  = #{WW050}

			,VAT_CD = #{VAT_CD}

            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}

			,RQ_RE_TYPE = #{RQ_RE_TYPE}

        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

	<select id="tx01010_doTaxCancelSELECT_TAX_AR" parameterType="hashMap" resultType="hashMap">
		SELECT APAR.AP_TAX_NUM
             , APAR.AR_TAX_NUM
        FROM STOCAPAR APAR
        WHERE APAR.GATE_CD  = #{ses.gateCd}
          AND APAR.DEL_FLAG = '0'
          AND APAR.AP_TAX_NUM = #{AP_TAX_NUM}
        GROUP BY APAR.AP_TAX_NUM, APAR.AR_TAX_NUM
	</select>

    <update id="tx01010_doTaxCancelAPAR" parameterType="hashMap">
        UPDATE STOCAPAR SET
        <if test="SALES_TYPE eq 'P'.toString()">
             AR_TAX_NUM = NULL
            , AR_TAX_SEQ = NULL
        </if>
        <if test="SALES_TYPE eq 'S'.toString()">
            AP_TAX_NUM = NULL
            , AP_TAX_SEQ = NULL
        </if>
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        <if test="SALES_TYPE eq 'P'.toString()">
            AND AR_TAX_NUM = #{TAX_NUM}
        </if>
        <if test="SALES_TYPE eq 'S'.toString()">
            AND AP_TAX_NUM = #{TAX_NUM}
        </if>
    </update>

    <update id="tx01010_doTaxCancelTTIH_AP" parameterType="hashMap">
        UPDATE STOCTTIH SET
            DEL_FLAG = '1'
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

    <update id="tx01010_doTaxCancelTTID_AP" parameterType="hashMap">
        UPDATE STOCTTID SET
            DEL_FLAG = '1'
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

    <update id="tx01010_doSaveDepositTTIH" parameterType="hashMap">
        UPDATE STOCTTIH SET
            DEPOSIT_YN = #{DEPOSIT_YN}
            , DEPOSIT_DATE = #{DEPOSIT_DATE}
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

	<insert id="tx01010_doSendBillTransINSERT_BILL_TRANS" parameterType="hashMap">
		SET XACT_ABORT ON;
        BEGIN TRY
            BEGIN TRANSACTION;

            INSERT INTO [@YE.BILL_TRANS] (
                                           BILLSEQ
                                         , SVENDERNO
                                         , RVENDERNO
                                         , DT
                                         , SUPMONEY
                                         , TAXMONEY
                                         , TAXRATE
                                         , GUBUN
                                         , BIGO
                                         , BILLTYPE

                                         , SCOMPANY
                                         , SCEONAME
                                         , SUPTAE
                                         , SUPJONG
                                         , SADDRESS
                                         , SADDRESS2
                                         , SUSER
                                         , SDIVISION
                                         , STELNO
                                         , SEMAIL
                                         , SREG_ID

                                         , RCOMPANY
                                         , RCEONAME
                                         , RUPTAE
                                         , RUPJONG
                                         , RADDRESS
                                         , RADDRESS2
                                         , RUSER
                                         , RDIVISION
                                         , RTELNO
                                         , REMAIL
                                         , RREG_ID

                                         , CREATE_DT
                                         , REVERSEYN
                                         , SENDID
                                         , RECVID
                                         , TEST_YN

                                         , ETC01

                                         , TRANSYN
                                         , REPORT_EXCEPT_YN
            ) VALUES (
                         #{BILLSEQ}
                     , #{SVENDERNO}
                     , #{RVENDERNO}
                     , #{ISSUE_DATE}
                     , ${SUPMONEY}
                     , ${TAXMONEY}
                     , CASE WHEN #{TAXRATE} = 'T1' THEN '0' /* 과세 */
                            WHEN #{TAXRATE} = 'E1' THEN '2' /* 면세 */
                            WHEN #{TAXRATE} = 'Z1' THEN '1' /* 영세 */
                            ELSE ''
                             END
                     , #{GUBUN}
                     , <include refid="com.sql.subStr"/>(#{BIGO}, 1, 70)
                     , CASE WHEN #{BILLTYPE} = '100' THEN '10' /* 정발행 */
                            ELSE '10' /* 역발행 */
                             END

                     , #{SCOMPANY}
                     , #{SCEONAME}
                     , <include refid="com.sql.subStr"/>(#{SUPTAE}, 1, 20)
                     , <include refid="com.sql.subStr"/>(#{SUPJONG}, 1, 20)
                     , #{SADDRESS}
                     , #{SADDRESS2}
                     , #{SUSER}
                     , #{SDIVISION}
                     , #{STELNO}
                     , #{SEMAIL}
					<if test="_databaseId == 'mssql'">
                     , CASE WHEN #{SREG_ID} = '' OR #{SREG_ID} = NULL THEN NULL ELSE convert(numeric, #{SREG_ID}) END
					</if>
					<if test="_databaseId == 'oracle'">
                     , CASE WHEN #{SREG_ID} = '' OR #{SREG_ID} = NULL THEN NULL ELSE TO_NUMBER(#{SREG_ID}) END
					</if>

                     , #{RCOMPANY}
                     , #{RCEONAME}
                     , <include refid="com.sql.subStr"/>(#{RUPTAE}, 1, 20)
                     , <include refid="com.sql.subStr"/>(#{RUPJONG}, 1, 20)
                     , #{RADDRESS}
                     , #{RADDRESS2}
                     , #{RUSER}
                     , #{RDIVISION}
                     , #{RTELNO}
                     , #{REMAIL}
					<if test="_databaseId == 'mssql'">
                     , CASE WHEN #{RREG_ID} = '' OR #{RREG_ID} = NULL THEN NULL ELSE convert(numeric, #{RREG_ID}) END
					</if>
					<if test="_databaseId == 'oracle'">
                     , CASE WHEN #{RREG_ID} = '' OR #{RREG_ID} = NULL THEN NULL ELSE TO_NUMBER(#{RREG_ID}) END
					</if>

                     , <include refid="com.sql.toDateChar"/>(<include refid="com.sql.sysdate"/>, 'yyyyMMdd')
                     , CASE WHEN #{REVERSEYN} = '100' THEN 'N' /* 정발행 */
                            ELSE 'Y' /* 역발행 */
                             END
                     , #{SENDID}
                     , #{RECVID}
                     , #{TEST_YN}

                     , 'S'

                     , 'N'
                     , 'N'
                     )

            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            IF (XACT_STATE()) = -1
                BEGIN
                    PRINT
                            N'The transaction is in an uncommittable state.' <include refid="com.sql.stringMerge"/>
                            'Rolling back transaction.'
                    ROLLBACK TRANSACTION;
                END;

            IF (XACT_STATE()) = 1
                BEGIN
                    PRINT
                            N'The transaction is committable.' <include refid="com.sql.stringMerge"/>
                            'Committing transaction.'
                    COMMIT TRANSACTION;
                END;
        END CATCH;
	</insert>

	<insert id="tx01010_doSendBillTransINSERT_BILL_TRANS_ITEM" parameterType="hashMap">
		SET XACT_ABORT ON;
        BEGIN TRY
            BEGIN TRANSACTION;

            INSERT INTO [@YE.BILL_TRANS_ITEM] (
                                                BILLSEQ
                                              , ITEMSEQ
                                              , TAX
                                              , SUP
                                              , DANGA
                                              , VLM
                                              , UNIT
                                              , OBJ
                                              , DT
                                              , REMARK
            ) VALUES (
                         #{BILLSEQ}
                     , ${ITEMSEQ}
                     , ${TAX}
                     , ${SUP}
                     , #{DANGA}
                     , #{VLM}
                     , <include refid="com.sql.subStr"/>(#{UNIT}, 1, 30)
                     , <include refid="com.sql.subStr"/>(#{OBJ}, 1, 50)
                     , <include refid="com.sql.toDateChar"/>(#{DT}, 'YYYY-MM-DD')
                     , #{REMARK}
                     )

            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            IF (XACT_STATE()) = -1
                BEGIN
                    PRINT
                            N'The transaction is in an uncommittable state.' <include refid="com.sql.stringMerge"/>
                            'Rolling back transaction.'
                    ROLLBACK TRANSACTION;
                END;

            IF (XACT_STATE()) = 1
                BEGIN
                    PRINT
                            N'The transaction is committable.' <include refid="com.sql.stringMerge"/>
                            'Committing transaction.'
                    COMMIT TRANSACTION;
                END;
        END CATCH;
	</insert>

	<update id="tx01010_doSaveUPDATE_TTIH" parameterType="hashMap">
	    UPDATE STOCTTIH SET
		    TAX_BILLSEQ = #{BILLSEQ}
	        , TAX_ISSUE_ID = #{TAX_ISSUE_ID}
            , E_BILL_ASP_STAT_TYPE = #{E_BILL_ASP_STAT_TYPE}
            , E_BILL_ASP_STAT_DESC = #{E_BILL_ASP_STAT_DESC}
            , TAX_EXD_ID = #{TAX_EXD_ID}
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
	</update>

	<select id="tx01010_doSendBillTransSELECT_TTID" parameterType="hashMap" resultType="hashMap">
		SELECT #{BILLSEQ} AS BILLSEQ
             , ROW_NUMBER() over(order by TTID.TAX_NUM) AS ITEMSEQ
             , TTID.TAX_AMT AS TAX
             , TTID.SUP_AMT AS SUP
             , TTID.UNIT_AMT AS DANGA
             , TTID.QTY AS VLM
             , TTID.ITEM_SPEC AS UNIT
             , TTID.ITEM_DESC AS OBJ
             , TTID.ITEM_TRADE_DATE AS DT
             , TTID.REMARK
        FROM STOCTTIH TTIH
                 JOIN STOCTTID TTID
                      ON  TTIH.GATE_CD = TTID.GATE_CD
                          AND TTIH.TAX_NUM = TTID.TAX_NUM

        WHERE TTID.GATE_CD = #{ses.gateCd}
          AND TTID.DEL_FLAG = '0'
          AND TTIH.TAX_NUM = #{TAX_NUM}
	</select>

	<select id="tx01010_doSendBillTransSELECT_TTID_SUM" parameterType="hashMap" resultType="hashMap">
		SELECT #{BILLSEQ} AS BILLSEQ
             , 1 AS ITEMSEQ
             , SUM(TTID.TAX_AMT) AS TAX
             , SUM(TTID.SUP_AMT) AS SUP
             , NULL AS DANGA
             , NULL AS VLM
             , NULL AS UNIT
			<if test="_databaseId == 'mssql'">
             , CASE WHEN COUNT(TTID.TAX_NUM) = 1 THEN MAX(TTID.ITEM_DESC) ELSE MAX(TTID.ITEM_DESC) <include refid="com.sql.stringMerge"/> ' 외 ' <include refid="com.sql.stringMerge"/> CONVERT(VARCHAR, COUNT(TTID.TAX_NUM) - 1) <include refid="com.sql.stringMerge"/> '건' END AS OBJ
			</if>
			<if test="_databaseId == 'oracle'">
             , CASE WHEN COUNT(TTID.TAX_NUM) = 1 THEN MAX(TTID.ITEM_DESC) ELSE MAX(TTID.ITEM_DESC) <include refid="com.sql.stringMerge"/> ' 외 ' <include refid="com.sql.stringMerge"/> TO_CHAR(COUNT(TTID.TAX_NUM) - 1) <include refid="com.sql.stringMerge"/> '건' END AS OBJ
			</if>
			, MAX(TTIH.ISSUE_DATE) AS DT
			, NULL AS REMARK
		FROM STOCTTIH TTIH
		JOIN STOCTTID TTID
		ON  TTIH.GATE_CD = TTID.GATE_CD
		AND TTIH.TAX_NUM = TTID.TAX_NUM

		WHERE TTID.GATE_CD = #{ses.gateCd}
        AND TTID.DEL_FLAG = '0'
        AND TTIH.TAX_NUM = #{TAX_NUM}
	</select>

	<select id="tx01010_doSendBillTransSELECT_TTID_SUMAMT" parameterType="hashMap" resultType="hashMap">
		SELECT SUM(TTID.SUP_AMT) AS SUP_AMT
             , SUM(TTID.TAX_AMT) AS TAX_AMT
        FROM STOCTTIH TTIH
                 JOIN STOCTTID TTID
                      ON  TTIH.GATE_CD = TTID.GATE_CD
                          AND TTIH.TAX_NUM = TTID.TAX_NUM

        WHERE TTID.GATE_CD = #{ses.gateCd}
          AND TTID.DEL_FLAG = '0'
          AND TTIH.TAX_NUM = #{TAX_NUM}
	</select>

	<select id="tx01010_doSendBillSELECT_BILL_STAT_CHK" parameterType="hashMap" resultType="hashMap">
		SELECT <include refid="com.sql.nvl"/>(BS.BILLSTAT, 'D') AS BILLSTAT
			, BS.BILLSEQ
        FROM STOCTTIH TTIH
                 LEFT JOIN [@YE.BILL_STAT] BS
                           ON TTIH.TAX_BILLSEQ = BS.BILLSEQ

        WHERE TTIH.GATE_CD  = #{ses.gateCd}
          AND TTIH.TAX_NUM = #{TAX_NUM}
	</select>

	<update id="tx01010_doSendBillReSendUPDATE_BILL_TRANS" parameterType="hashMap">
		SET XACT_ABORT ON;
		BEGIN TRY
		BEGIN TRANSACTION;

		UPDATE [@YE.BILL_TRANS]
		SET TAXMONEY = #{TAXMONEY}
			, SENDID = #{SENDID}
			, RECVID = #{RECVID}
			, DT = #{DT}
			, BIGO = #{BIGO}
		<if test='BILL_STAT_TYPE == "E" and BILL_STAT_TYPE != "" and BILL_STAT_TYPE != null'>
			, TRANSYN = 'N'
		</if>
		WHERE BILLSEQ = #{BILLSEQ}

		COMMIT TRANSACTION;
		END TRY
		BEGIN CATCH
		IF (XACT_STATE()) = -1
			BEGIN
				PRINT
				N'The transaction is in an uncommittable state.' <include refid="com.sql.stringMerge"/>
				'Rolling back transaction.'
				ROLLBACK TRANSACTION;
			END;

		IF (XACT_STATE()) = 1
			BEGIN
				PRINT
				N'The transaction is committable.' <include refid="com.sql.stringMerge"/>
				'Committing transaction.'
				COMMIT TRANSACTION;
			END;
		END CATCH;
	</update>

	<update id="tx01010_doSendBillReSendUPDATE_BILL_TRANS_ITEM" parameterType="hashMap">
		SET XACT_ABORT ON;
        BEGIN TRY
            BEGIN TRANSACTION;

            UPDATE [@YE.BILL_TRANS_ITEM]
            SET TAX = #{TAX}
              , SUP = #{SUP}
            WHERE BILLSEQ = #{BILLSEQ}

            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            IF (XACT_STATE()) = -1
                BEGIN
                    PRINT
                            N'The transaction is in an uncommittable state.' <include refid="com.sql.stringMerge"/>
                            'Rolling back transaction.'
                    ROLLBACK TRANSACTION;
                END;

            IF (XACT_STATE()) = 1
                BEGIN
                    PRINT
                            N'The transaction is committable.' <include refid="com.sql.stringMerge"/>
                            'Committing transaction.'
                    COMMIT TRANSACTION;
                END;
        END CATCH;
	</update>

	<update id="tx01010_doSendBillReSendBILL_STAT" parameterType="hashMap">
		SET XACT_ABORT ON;
        BEGIN TRY
            BEGIN TRANSACTION;

            UPDATE [@YE.BILL_STAT]
            SET RETRANSYN = 'Y'
            WHERE BILLSEQ = #{BILLSEQ}

            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            IF (XACT_STATE()) = -1
                BEGIN
                    PRINT
                            N'The transaction is in an uncommittable state.' <include refid="com.sql.stringMerge"/>
                            'Rolling back transaction.'
                    ROLLBACK TRANSACTION;
                END;

            IF (XACT_STATE()) = 1
                BEGIN
                    PRINT
                            N'The transaction is committable.' <include refid="com.sql.stringMerge"/>
                            'Committing transaction.'
                    COMMIT TRANSACTION;
                END;
        END CATCH;
	</update>

	<select id="tx01010_doSendBillCancelSELECT_BILL_CHK" parameterType="hashMap" resultType="hashMap">
		SELECT BT.TRANSYN
             , BT.REPORT_STAT
             , BT.REVERSEYN
             , BT.TEST_YN
             , BT.BILLSEQ
             , BS.BILLSTAT
             , BS.RETRANSYN
        FROM [@YE.BILL_TRANS] BT
                 LEFT JOIN [@YE.BILL_STAT] BS
                           ON BT.BILLSEQ = BS.BILLSEQ
        WHERE BT.BILLSEQ = #{BILLSEQ}
	</select>

	<update id="tx01010_doSendBillCancelUPDATE_TTIH" parameterType="hashMap">
		UPDATE STOCTTIH
        SET TAX_BILLSEQ = ''
          , E_BILL_ASP_STAT_TYPE = ''

          , MOD_DATE = <include refid="com.sql.sysdate"/>
          , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
          AND TAX_BILLSEQ = #{TAX_BILLSEQ}
	</update>

    <insert id="tx01010_doSendBillCancelINSERT_BILL_MNGMT_ORDR" parameterType="hashMap">
		SET XACT_ABORT ON;
        BEGIN TRY
            BEGIN TRANSACTION;

            INSERT INTO [@YE.BILL_MNGMT_ORDR] (
                                                BILLSEQ
                                              , CMD_DIV
                                              , ORDER_DT
                                              , SET_YN
                                              , CREATE_DT
            ) VALUES (
                         #{BILLSEQ}
                     , #{CMD_DIV}
                     , <include refid="com.sql.sysdate"/>
                     , 'N'
                     , <include refid="com.sql.toDateChar"/>(<include refid="com.sql.sysdate"/>, 'yyyyMMdd')
                     )

            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            IF (XACT_STATE()) = -1
                BEGIN
                    PRINT
                            N'The transaction is in an uncommittable state.' <include refid="com.sql.stringMerge"/>
                            'Rolling back transaction.'
                    ROLLBACK TRANSACTION;
                END;

            IF (XACT_STATE()) = 1
                BEGIN
                    PRINT
                            N'The transaction is committable.' <include refid="com.sql.stringMerge"/>
                            'Committing transaction.'
                    COMMIT TRANSACTION;
                END;
        END CATCH;
	</insert>

	<update id="tx01010_doSendBillCancelDELETE_BILL_LOG" parameterType="hashMap">
		SET XACT_ABORT ON;
        BEGIN TRY
            BEGIN TRANSACTION;

            DELETE FROM [@YE.BILL_LOG]
            WHERE BILLSEQ = #{BILLSEQ}

            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            IF (XACT_STATE()) = -1
                BEGIN
                    PRINT
                            N'The transaction is in an uncommittable state.' <include refid="com.sql.stringMerge"/>
                            'Rolling back transaction.'
                    ROLLBACK TRANSACTION;
                END;

            IF (XACT_STATE()) = 1
                BEGIN
                    PRINT
                            N'The transaction is committable.' <include refid="com.sql.stringMerge"/>
                            'Committing transaction.'
                    COMMIT TRANSACTION;
                END;
        END CATCH;
	</update>

    <select id="getDocSeq" parameterType="hashMap" resultType="string">
			SELECT DECODE(COUNT(MGRNO), 0, 1 ,MAX(<include refid="com.sql.nvl"/>(DOCSEQ, 0)) +1 ) AS DOCSEQ
			FROM STOCSLHD
			WHERE MGRNO = #{MGRNO}
			AND DOCNO   = #{DOCNO}
			AND HDSEQ   = #{HDSEQ}
	</select>




    <insert id="saveAccSlipDocuMst">
		insert into BOFADM.ACC_SLIP_DOCU_MST${dgnsDbLink}
		(
			SLIP_DOCU_ID
			,SLIP_TYPE_CD
			,CMPNY_CD
			,MAKE_SSYS_ID
			,MAKE_ORGT_ID
			,MAKE_EMPL_NO
			,SLIP_MAKE_YMD
			,AUTO_SLIP_IND
			,SLIP_DCRB_IND
			,SLIP_FNNR_YMD
			,SUM_EXPL_TEXT
			,CONFM_GRUP_CD
			,WSOP_APRL_IND
			,FNNR_APRL_IND
			,SLIP_BRCH_ID
			,PTNR_BRCH_ID
			,SALE_LCAL_CD
			,SALE_STORE_CD
			,BSNS_AREA_CD
			,SALE_SLIP_IND
			,SLIP_PSTN_YMD
			,SLIP_PSTN_NO
			,EXEC_ORGT_ID
			,BUGT_ORGT_ID
			,COPL_SLIP_YN
			,TRMG_SLIP_IND
			,IF_DOCU_ID
			,SLIP_DEL_REQS_YN
			,SLIP_DEL_COMPT_YN
			,DOCU_DSUSE_YN
			,DOCU_DSUSE_YMD
			,CRT_DT
			,CRT_ID
			,CRT_IP
			,CRT_MAC
			,UPD_DT
			,UPD_ID
			,UPD_IP
			,UPD_MAC
		)values(
		    #{SEQ_ID}                                                          --SLIP_DOCU_ID
		   ,'INT-2010'														  --매출
		   ,'026'                                                                   --CMPNY_CD
		   ,'INT'                                                                   --MAKE_SSYS_ID
		   ,'1000008798'                                                                      --MAKE_ORGT_ID
		   ,#{NEW_USER_ID}                                                       --MAKE_EMPL_NO
		   ,TO_CHAR(SYSDATE, 'YYYYMMDD')                                            --SLIP_MAKE_YMD
		   ,'3'						                                          	    --AUTO_SLIP_IND
		   ,'03'						                                            --SLIP_DCRB_IND
		   ,#{BUDAT}                                            --SLIP_FNNR_YMD
		   ,#{SLIP_NM_H}                                                                      --SUM_EXPL_TEXT
		   ,''                                                                      --CONFM_GRUP_CD
		   ,''                                                                      --WSOP_APRL_IND
		   ,''                                                                      --FNNR_APRL_IND
		   ,'1000008796'                                                            --SLIP_BRCH_ID
		   ,''			                                                            --PTNR_BRCH_ID
		   ,''			                                                            --SALE_LCAL_CD
		   ,''                                                              --SALE_STORE_CD
		   ,'02'                                                               --BSNS_AREA_CD
		   ,''                                                              --SALE_SLIP_IND
		   ,TO_CHAR(SYSDATE, 'YYYYMMDD')                                                              --SLIP_PSTN_YMD
		   ,''                                                               --SLIP_PSTN_NO
		   ,''                                                               --EXEC_ORGT_ID
		   ,''                                                               --BUGT_ORGT_ID
		   ,'0'                                                               --COPL_SLIP_YN
		   ,'00'                                                              --TRMG_SLIP_IND
		   ,''                                                                 --IF_DOCU_ID
		   ,'0'                                                           --SLIP_DEL_REQS_YN
		   ,'0'                                                          --SLIP_DEL_COMPT_YN
		   ,'0'                                                              --DOCU_DSUSE_YN
		   ,''                                                             --DOCU_DSUSE_YMD
		   ,SYSDATE                                                                     --CRT_DT
		   ,#{NEW_USER_ID}                                                                      --CRT_ID
		   ,#{IP}                                                                     --CRT_IP
		   ,'00-00-00-00-00-00'                                                                    --CRT_MAC
		   ,SYSDATE                                                                     --UPD_DT
		   ,#{NEW_USER_ID}                                                                      --UPD_ID
		   ,#{IP}                                                                  --UPD_IP
		   ,'00-00-00-00-00-00'                                                                    --UPD_MAC
		)
	</insert>




    <insert id="saveAccSlipDocuDtl">
		insert into BOFADM.ACC_SLIP_DOCU_DTL${dgnsDbLink}
		    (
				 SLIP_DOCU_ID
				,SLIP_DOCU_SEQ
				,SLIP_PSTN_SEQ
				,LINE_LOCK_YN
				,SLIP_ACCT_ID
				,SLIP_DRCR_IND
				,SLIP_DR_AMT
				,SLIP_CR_AMT
				,SLIP_NET_AMT
				,SLIP_TAX_AMT
				,SLIP_CRNCY_IND
				,SLIP_FCRY_AMT
				,FCRY_EXRT_AMT
				,EXEC_MINC_AMT
				,SPND_ITEM_CD
				,FUND_ITEM_CD
				,SLIP_FNNR_YMD
				,SUM_EXPL_TEXT
				,EXEC_ORGT_ID
				,BUGT_ORGT_ID
				,COST_CENT_CD
				,ISSU_BRCH_ID
				,PTNR_BRCH_ID
				,PTNR_ORGT_ID
				,MNGM_BRCH_ID
				,SALE_LCAL_CD
				,SALE_STORE_CD
				,OPEN_ITEM_CD
				,SOFF_SLIP_YMD
				,SOFF_SLIP_NO
				,SOFF_SLIP_SEQ
				,BRCH_ACNO_ID
				,BRCH_BANK_CD
				,BRCH_ACNO_NO
				,MNGM_CUST_ID
				,BIZR_PRIV_NO
				,CUST_ACNO_ID
				,CUST_BANK_CD
				,CUST_ACNO_NO
				,CUST_DPSTR_USER_NM
				,CUST_CMS_CD
				,PYMT_MTHD_CD
				,EXEC_REQS_YMD
				,EXEC_REQS_AMT
				,FUND_TRAN_YMD
				,FUND_TRAN_AMT
				,FUND_TRAN_DESC
				,PTNR_ACCT_ID
				,CNNC_ACCT_ID
				,CNNC_SLIP_DESC
				,ISSU_BGN_YMD
				,ISSU_END_YMD
				,PRUF_STND_CD
				,PRUF_OCCU_YMD
				,PRUF_OCCU_NO
				,PRUF_SUM_EXPL
				,PRUF_OCCU_IND
				,VAT_KIND_CD
				,VAT_TYPE_IND
				,VAT_ACCT_ID
				,PUCH_SALE_ID
				,CUST_EMAIL_ADDR
				,CUST_TEL_NO
				,TXED_ISSU_YN
				,ESRO_TXIV_EDID
				,PUR_REQS_NO
				,SALE_REQS_NO
				,MTRL_TYPE_CD
				,ASSET_MTRL_NO
				,MEM_BQUT_IND
				,MEM_BQUT_NO
				,MEM_CARD_NO
				,GUEST_GRUP_CD
				,SALE_CTGR_CD
				,TOUR_LCAL_CD
				,EBIZ_CUST_CD
				,RESD_FRNR_CD
				,GUEST_TYPE_CD
				,GUEST_GEN_CD
				,GUEST_AGE_CD
				,CARD_CMPNY_CD
				,CARD_SALE_PRUF_NO
				,CARD_SALE_APRL_NO
				,CHRG_EMPL_NO
				,MNGM_ITEM_01_CD
				,MNGM_ITEM_01_VAL_CD
				,MNGM_ITEM_01_VAL_NM
				,MNGM_ITEM_01_VAL_DESC
				,MNGM_ITEM_02_CD
				,MNGM_ITEM_02_VAL_CD
				,MNGM_ITEM_02_VAL_NM
				,MNGM_ITEM_02_VAL_DESC
				,MNGM_ITEM_03_CD
				,MNGM_ITEM_03_VAL_CD
				,MNGM_ITEM_03_VAL_NM
				,MNGM_ITEM_03_VAL_DESC
				,MNGM_ITEM_04_CD
				,MNGM_ITEM_04_VAL_CD
				,MNGM_ITEM_04_VAL_NM
				,MNGM_ITEM_04_VAL_DESC
				,MNGM_ITEM_05_CD
				,MNGM_ITEM_05_VAL_CD
				,MNGM_ITEM_05_VAL_NM
				,MNGM_ITEM_05_VAL_DESC
				,MNGM_ITEM_06_CD
				,MNGM_ITEM_06_VAL_CD
				,MNGM_ITEM_06_VAL_NM
				,MNGM_ITEM_06_VAL_DESC
				,MNGM_ITEM_07_CD
				,MNGM_ITEM_07_VAL_CD
				,MNGM_ITEM_07_VAL_NM
				,MNGM_ITEM_07_VAL_DESC
				,MNGM_ITEM_08_CD
				,MNGM_ITEM_08_VAL_CD
				,MNGM_ITEM_08_VAL_NM
				,MNGM_ITEM_08_VAL_DESC
				,MNGM_ITEM_09_CD
				,MNGM_ITEM_09_VAL_CD
				,MNGM_ITEM_09_VAL_NM
				,MNGM_ITEM_09_VAL_DESC
				,MNGM_ITEM_10_CD
				,MNGM_ITEM_10_VAL_CD
				,MNGM_ITEM_10_VAL_NM
				,MNGM_ITEM_10_VAL_DESC
				,CRT_DT
				,CRT_ID
				,CRT_IP
				,CRT_MAC
				,UPD_DT
				,UPD_ID
				,UPD_IP
				,UPD_MAC
		)values(
				#{SEQ_ID}                                                                      --SLIP_DOCU_ID
				,#{BUZEI}                                     --SLIP_DOCU_SEQ
				,''                            				        --SLIP_PSTN_SEQ
				,'0'                            				        --LINE_LOCK_YN
				,#{HKONT}                            				        --SLIP_ACCT_ID
				,#{NEW_SHKZG}                                  --SLIP_DRCR_IND
				,#{S_AMT}           --전표 차변 금액                          --SLIP_DR_AMT
				,#{H_AMT}               --전표 대변 금액                      --SLIP_CR_AMT
				,#{FWBAS}               --SLIP_NET_AMT                      --SLIP_NET_AMT
				,CASE WHEN #{HKONT}='1000000082' THEN #{S_AMT} ELSE #{H_AMT} END --SLIP_TAX_AMT
				,'KRW'                                    --SLIP_CRNCY_IND
				,''                                    --SLIP_FCRY_AMT
				,''                                    --FCRY_EXRT_AMT
				,''                                    --EXEC_MINC_AMT
				,''                                    --SPND_ITEM_CD
				,''                                    --FUND_ITEM_CD
				,#{BUDAT}                                    --SLIP_FNNR_YMD
				,#{SGTXT}                                    --SUM_EXPL_TEXT
				,'1000008798'                                    --EXEC_ORGT_ID
				,''                                    --BUGT_ORGT_ID
				,''                                    --COST_CENT_CD
		   		,'1000008796'                    		--ISSU_BRCH_ID
		   		,''                  		     		--PTNR_BRCH_ID
				,''                                    --PTNR_ORGT_ID

				,CASE WHEN #{HKONT} = '1000000408' OR #{HKONT} = '1000000082' THEN
						(SELECT VAT_DECL_BPLC_ID
						  FROM COMADM.SYS_ORGT_INIT${dgnsDbLink}
						 WHERE ORGT_ID = '1000008471')
				 ELSE
					'1000008471'
				 END --MNGM_BRCH_ID

				,''                                    --SALE_LCAL_CD
				,''                                    --SALE_STORE_CD
				,''                                    --OPEN_ITEM_CD
				,''                                    --SOFF_SLIP_YMD
				,''                                    --SOFF_SLIP_NO
				,''                                    --SOFF_SLIP_SEQ
				,''                                    --BRCH_ACNO_ID
				,''                                    --BRCH_BANK_CD
				,''                                    --BRCH_ACNO_NO
				,CASE WHEN #{XREF3} = '2208809321' THEN '1000252922'
				      WHEN #{XREF3} = '2238108341' THEN '1000231577'
					  ELSE
						(	SELECT MAX(T1.CUST_ID) AS CUST_ID
							  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
							     , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
							  WHERE
							     T1.CUST_ID = T2.CUST_ID(+)
							     AND T1.USE_YN = '1'
							     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  END -- MNGM_CUST_ID

				,''                                    --BIZR_PRIV_NO
				,''                                    --CUST_ACNO_ID
				,#{BANK_CODE}                                    --CUST_BANK_CD
				,CASE WHEN #{HKONT} = '1000011532' THEN #{BANK_ACCOUNT_NO} ELSE '' END --CUST_ACNO_NO
				,''                                    --CUST_DPSTR_USER_NM
				,''                                    --CUST_CMS_CD
				,CASE WHEN #{HKONT} = '1000000286' THEN '04' ELSE '' END --PYMT_MTHD_CD
				,TO_CHAR(SYSDATE+3,'YYYYMMDD')                                    --EXEC_REQS_YMD
				,CASE WHEN #{HKONT} = '1000000286' THEN #{H_AMT} ELSE null END --EXEC_REQS_AMT
				,TO_CHAR(SYSDATE+3,'YYYYMMDD')                                    --FUND_TRAN_YMD
				,CASE WHEN #{HKONT} = '1000000286' THEN #{H_AMT} ELSE null END --FUND_TRAN_AMT
				,''                                    --FUND_TRAN_DESC

				,CASE WHEN #{HKONT} = '1000011435' THEN '1000011918'
				 ELSE null END --PTNR_ACCT_ID


				,CASE WHEN #{HKONT} = '1000000408' THEN '1000011918'
				      WHEN #{HKONT} = '1000000082' THEN '1000011532'
				 ELSE null END --CNNC_ACCT_ID

				,CASE WHEN #{HKONT} = '1000000408' OR #{HKONT} = '1000000082' THEN '2' ELSE null END --CNNC_SLIP_DESC
				,''                                    --ISSU_BGN_YMD
				,''                                    --ISSU_END_YMD

				,CASE WHEN #{HKONT} = '1000012324' OR #{HKONT} = '1000012325' THEN 'D000'
					  WHEN #{HKONT} = '1000011532' OR #{HKONT} = '1000011534' THEN 'C000'
				 ELSE #{MWSKZ} END --PRUF_STND_CD
				,#{BUDAT}                                    --PRUF_OCCU_YMD
				,''                                    --PRUF_OCCU_NO
				,''                                    --PRUF_SUM_EXPL
				,''                                    --PRUF_OCCU_IND
				,''                                    --VAT_KIND_CD
				,''                                    --VAT_TYPE_IND
				,''                                    --VAT_ACCT_ID
				,''                                    --PUCH_SALE_ID
				,#{CUST_EMAIL_ADDR}                    --CUST_EMAIL_ADDR
				,#{CUST_TEL_NO}                        --CUST_TEL_NO
				,''                                    --TXED_ISSU_YN
				,''                                    --ESRO_TXIV_EDID
				,''                                    --PUR_REQS_NO
				,''                                    --SALE_REQS_NO
				,''                                    --MTRL_TYPE_CD
				,''                                    --ASSET_MTRL_NO
				,''                                    --MEM_BQUT_IND
				,''                                    --MEM_BQUT_NO
				,''                                    --MEM_CARD_NO
				,''                                    --GUEST_GRUP_CD
				,''                                    --SALE_CTGR_CD
				,''                                    --TOUR_LCAL_CD
				,''                                    --EBIZ_CUST_CD
				,''                                    --RESD_FRNR_CD
				,''                                    --GUEST_TYPE_CD
				,''                                    --GUEST_GEN_CD
				,''                                    --GUEST_AGE_CD
				,''                                    --CARD_CMPNY_CD
				,''                                    --CARD_SALE_PRUF_NO
				,''                                    --CARD_SALE_APRL_NO
				,''                                    --CHRG_EMPL_NO

				,CASE WHEN #{HKONT} = '1000000286' THEN '001'
					  WHEN #{HKONT} = '1000011918' THEN '600'
					  WHEN #{HKONT} = '1000011919' THEN '600'
					  WHEN #{HKONT} = '1000011435' THEN '001'
					  WHEN #{HKONT} = '1000000408' THEN '001'
				 ELSE '' END --MNGM_ITEM_01_CD
				,CASE WHEN #{HKONT} = '1000000286' THEN CASE WHEN #{WW050} = 'B300040' THEN '1000008799'
													         WHEN #{WW050} IN ('B300020','B300050') THEN '2000005631'
													         ELSE '1000008799' END
                      WHEN #{HKONT} = '1000011918' THEN CASE WHEN #{WW050} = 'B300020' THEN '2000005631'
                                                   ELSE
															 CASE WHEN #{WW050} = 'B300040' THEN '1000009022'
													              WHEN #{WW050} IN ('B300020','B300050') THEN '2000005631'
													              ELSE '1000009022' END
                                                   END
                      WHEN #{HKONT} = '1000011919' THEN CASE WHEN #{WW050} = 'B300020' THEN '2000005631'
                                                        ELSE
															 CASE WHEN #{WW050} = 'B300040' THEN '1000009022'
													         WHEN #{WW050} IN ('B300020','B300050') THEN '2000005631'
													         ELSE '1000009022' END
                                                        END
					  WHEN #{HKONT} = '1000011435' THEN CASE WHEN #{XREF3} = '2208809321' THEN '1000252922'
					  									     WHEN #{XREF3} = '2238108341' THEN '1000231577'
					  									ELSE
															  (	SELECT
															     MAX(T1.CUST_ID) AS CUST_ID
															  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
															     , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
															  WHERE
															     T1.CUST_ID = T2.CUST_ID(+)
															     AND T1.USE_YN = '1'
															     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  									 END
					  WHEN #{HKONT} = '1000000408' THEN CASE WHEN #{XREF3} = '2208809321' THEN '1000252922'
					  									     WHEN #{XREF3} = '2238108341' THEN '1000231577'
					  									ELSE
																(	SELECT
																     MAX(T1.CUST_ID) AS CUST_ID
																  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
															      	 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
																  WHERE
																     T1.CUST_ID = T2.CUST_ID(+)
																     AND T1.USE_YN = '1'
																     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  									 END

				 ELSE '' END -- MNGM_ITEM_01_VAL_CD


				,CASE WHEN #{HKONT} = '1000000286' THEN CASE WHEN #{XREF3} = '2208809321' THEN '(주)대명스테이션'
					  									     WHEN #{XREF3} = '2238108341' THEN '(주)소노인터내셔널'
					  									ELSE
																(	SELECT
																     MAX(T1.CUST_NM) AS CUST_ID
																  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
															      	 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
																  WHERE
																     T1.CUST_ID = T2.CUST_ID(+)
																     AND T1.USE_YN = '1'
																     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  									 END
                      WHEN #{HKONT} = '1000011918' THEN CASE WHEN #{WW050} = 'B300020' THEN (SELECT ORGT_NM FROM COMADM.SYS_ORGT_INIT${dgnsDbLink}
                      																		  WHERE ORGT_ID='2000005631')
                                                                                       ELSE (SELECT ORGT_NM FROM COMADM.SYS_ORGT_INIT${dgnsDbLink}
                                                                                       		  WHERE ORGT_ID=

																							  CASE WHEN #{WW050} = 'B300040' THEN '1000009022'
																					          WHEN #{WW050} IN ('B300020','B300050') THEN '2000005631'
																					          ELSE '1000009022' END


                                                                                       		  )
                                                        END
                      WHEN #{HKONT} = '1000011919' THEN CASE WHEN #{WW050} = 'B300020' THEN (SELECT ORGT_NM FROM COMADM.SYS_ORGT_INIT${dgnsDbLink}
                      																		  WHERE ORGT_ID='2000005631')
                                                                                       ELSE (SELECT ORGT_NM FROM COMADM.SYS_ORGT_INIT${dgnsDbLink}
                                                                                       		  WHERE ORGT_ID=
																							  CASE WHEN #{WW050} = 'B300040' THEN '1000009022'
																					          WHEN #{WW050} IN ('B300020','B300050') THEN '2000005631'
																					          ELSE '1000009022' END
                                                                                       		  )
                                                        END
					  WHEN #{HKONT} = '1000011435' THEN CASE WHEN #{XREF3} = '2208809321' THEN '(주)대명스테이션'
					  									     WHEN #{XREF3} = '2238108341' THEN '(주)소노인터내셔널'
					  									ELSE
																(	SELECT
																	     MAX(T1.CUST_NM) AS CUST_ID
																	  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
															      		 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
																	  WHERE
																	     T1.CUST_ID = T2.CUST_ID(+)
																	     AND T1.USE_YN = '1'
																	     AND (T1.BIZR_PRIV_NO = #{XREF3} ))		--MNGM_ITEM_01_VAL_CD
					  									 END
					  WHEN #{HKONT} = '1000000408' THEN CASE WHEN #{XREF3} = '2208809321' THEN '주)대명스테이션'
					  									     WHEN #{XREF3} = '2238108341' THEN '(주)소노인터내셔널'
					  									ELSE
																(	SELECT
																     MAX(T1.CUST_NM) AS CUST_ID
																  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
															      	 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
																  WHERE
																     T1.CUST_ID = T2.CUST_ID(+)
																     AND T1.USE_YN = '1'
																     AND (T1.BIZR_PRIV_NO = #{XREF3} ))		--MNGM_ITEM_01_VAL_CD
					  									 END

				 ELSE '' END -- MNGM_ITEM_01_VAL_NM

			,CASE WHEN #{XREF3} = '2208809321' THEN '(주)대명스테이션'
				  WHEN #{XREF3} = '2238108341' THEN '(주)소노인터내셔널'
 			 ELSE
				(	SELECT
				     MAX(T1.CUST_NM) AS CUST_ID
				  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
				     , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
				  WHERE
				     T1.CUST_ID = T2.CUST_ID(+)
				     AND T1.USE_YN = '1'
				     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
			 END --MNGM_ITEM_01_VAL_DESC

			,CASE WHEN #{HKONT} = '1000011918' THEN '901'
			      WHEN #{HKONT} = '1000011919' THEN '901'
				  WHEN #{HKONT} = '1000011435' THEN '600'
				  ELSE '' END -- MNGM_ITEM_02_CD



			,CASE WHEN #{HKONT} IN ('1000011918','1000011919') THEN
			                                        CASE WHEN #{WW050} = 'B300010' THEN '0101' -- 내부 일반자재
			 											 WHEN #{WW050} = 'B300020' THEN '0201' -- 외부 일반자재
			 											 WHEN #{WW050} = 'B300030' THEN '0103' -- 내부 건설
			 											 WHEN #{WW050} = 'B300040' THEN '0102' -- 내부 식자재
			 											 WHEN #{WW050} = 'B300050' THEN '0202' -- 외부 식자재
			 										ELSE '' END
				  WHEN #{HKONT} = '1000011435' THEN CASE WHEN #{WW050} = 'B300020' THEN '2000005631'
			 										ELSE
			 										CASE WHEN #{WW050} = 'B300040' THEN '1000008799'
			 										     WHEN #{WW050} IN ('B300020','B300050') THEN '2000005631'
			 										     ELSE '1000008799' END
			 										END
			 ELSE '' END --MNGM_ITEM_02_VAL_CD



			,CASE WHEN #{HKONT} IN ('1000011918','1000011919') THEN CASE WHEN #{WW050} = 'B300010' THEN '내부고객사 일반자재'
			 											 WHEN #{WW050} = 'B300030' THEN '내부고객사 건설자재'
			 											 WHEN #{WW050} = 'B300020' THEN '외부고객사 일반자재'

			 											 WHEN #{WW050} = 'B300040' THEN '내부고객사 식자재'
			 											 WHEN #{WW050} = 'B300050' THEN '외부고객사 식자재'

			 										ELSE '' END
				  WHEN #{HKONT} = '1000011435' THEN '영업장없음'
			 ELSE '' END --MNGM_ITEM_02_VAL_NM
			 ,''                                    --MNGM_ITEM_02_VAL_DESC


			,CASE WHEN #{HKONT} IN ('1000011918','1000011919') THEN '001' ELSE '' END -- MNGM_ITEM_03_CD


			,CASE WHEN #{HKONT} IN ('1000011918','1000011919') THEN CASE WHEN #{XREF3} = '2208809321' THEN '1000252922'
			 											 WHEN #{XREF3} = '2238108341' THEN '1000231577'
			 										ELSE
														(	SELECT
														     MAX(T1.CUST_ID) AS CUST_ID
														  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
															 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
														  WHERE
														     T1.CUST_ID = T2.CUST_ID(+)
														     AND T1.USE_YN = '1'
														     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
			 										 END
			 ELSE '' END --MNGM_ITEM_03_VAL_CD



			,CASE WHEN #{HKONT} IN ('1000011918','1000011919') THEN CASE WHEN #{XREF3} = '2208809321' THEN '(주)대명스테이션'
			 											 WHEN #{XREF3} = '2238108341' THEN '(주)소노인터내셔널'
			 										ELSE
														(	SELECT
														     MAX(T1.CUST_NM) AS CUST_ID
														  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
															 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
														  WHERE
														     T1.CUST_ID = T2.CUST_ID(+)
														     AND T1.USE_YN = '1'
														     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
			 										 END
			 ELSE '' END --MNGM_ITEM_03_VAL_NM
				,''                                    --MNGM_ITEM_03_VAL_DESC
				,''                                    --MNGM_ITEM_04_CD
				,''                                    --MNGM_ITEM_04_VAL_CD
				,''                                    --MNGM_ITEM_04_VAL_NM
				,''                                    --MNGM_ITEM_04_VAL_DESC
				,''                                    --MNGM_ITEM_05_CD
				,''                                    --MNGM_ITEM_05_VAL_CD
				,''                                    --MNGM_ITEM_05_VAL_NM
				,''                                    --MNGM_ITEM_05_VAL_DESC
				,''                                    --MNGM_ITEM_06_CD
				,''                                    --MNGM_ITEM_06_VAL_CD
				,''                                    --MNGM_ITEM_06_VAL_NM
				,''                                    --MNGM_ITEM_06_VAL_DESC
				,''                                    --MNGM_ITEM_07_CD
				,''                                    --MNGM_ITEM_07_VAL_CD
				,''                                    --MNGM_ITEM_07_VAL_NM
				,''                                    --MNGM_ITEM_07_VAL_DESC
				,''                                    --MNGM_ITEM_08_CD
				,''                                    --MNGM_ITEM_08_VAL_CD
				,''                                    --MNGM_ITEM_08_VAL_NM
				,''                                    --MNGM_ITEM_08_VAL_DESC
				,''                                    --MNGM_ITEM_09_CD
				,''                                    --MNGM_ITEM_09_VAL_CD
				,''                                    --MNGM_ITEM_09_VAL_NM
				,''                                    --MNGM_ITEM_09_VAL_DESC
				,''                                    --MNGM_ITEM_10_CD
				,''                                    --MNGM_ITEM_10_VAL_CD
				,''                                    --MNGM_ITEM_10_VAL_NM
				,''                                    --MNGM_ITEM_10_VAL_DESC
		   ,SYSDATE                                                                     --CRT_DT
		   ,#{NEW_USER_ID}                                                                      --CRT_ID
		   ,#{IP}                                                                     --CRT_IP
		   ,'00-00-00-00-00-00'                                                                    --CRT_MAC
		   ,SYSDATE                                                                     --UPD_DT
		   ,#{NEW_USER_ID}                                                                      --UPD_ID
		   ,#{IP}                                                                  --UPD_IP
		   ,'00-00-00-00-00-00'                                                                    --UPD_MAC
		)

--내부식자재--1000008799 -- 외부식자재경우  -->2000005631
--내부식자재--1000009022 -- 외부식자재경우  -->2000005631
--0202

	</insert>

    <select id="callPkgAccautochitcrt" statementType="CALLABLE" parameterType="hashmap" resultType="hashmap">
		call BOFADM.PKG_ACCAUTOCHITCRT.SP_CREATE_SLIP_MAIN${dgnsDbLink}
		(
			 #{SEQ_ID}
			,#{NEW_USER_ID}
			,#{IP}
			,'00-00-00-00-00-00'
	        ,#{ERR_CODE, mode=OUT,  jdbcType=NUMERIC}
	        ,#{ERR_MSG, mode=OUT,  jdbcType=VARCHAR}
		)
	</select>

    <select id="getSeqId" parameterType="hashMap" resultType="string">
		SELECT TRIM(TO_CHAR(BOFADM.SEQ_ACC_SLIP_DOCU_MST_01.NEXTVAL${dgnsDbLink},'0000000000')) AS SEQ
		  FROM DUAL
	</select>

    <select id="chkDgnsSend" parameterType="hashMap" resultType="int">
		SELECT COUNT(*) COU
		FROM STOCSLHD
		WHERE MGRNO = #{MGRNO}
		AND DOCNO = #{DOCNO}
		AND HDSEQ = #{HDSEQ}
		AND DOCSEQ = #{DOCSEQ}
		AND STATUS = 'S' -- 성공한건이 있으면 재전송 불가.
	</select>




    <insert id="updateSlhd">
		UPDATE STOCSLHD
		SET
		       FISCAL_YEAR = #{FISCAL_YEAR}
		     , BELNR = #{BELNR}
		     , MSGTY = #{MSGTY}
		     , STATUS  = #{STATUS}
		     , MESSAGE = CASE WHEN #{STATUS} = 'S' THEN '성공' ELSE #{MESSAGE} END
		     , DOCSTAT = #{DOCSTAT}
		WHERE MGRNO = #{MGRNO}
		AND DOCNO = #{DOCNO}
		AND HDSEQ = #{HDSEQ}
		AND DOCSEQ = #{DOCSEQ}
	</insert>



    <insert id="delSLHD">
		DELETE STOCSLHD WHERE MGRNO = #{MGRNO}
	</insert>
    <insert id="delSLDT">
		DELETE STOCSLDT WHERE MGRNO = #{MGRNO}
	</insert>



    <insert id="saveSLHD">
		     INSERT INTO STOCSLHD (
		                     MGRNO, DOCNO, HDSEQ,
		                     DOCSEQ, DOCSTAT, BUDAT,
		                     BLDAT, ETAXNO, SNUSER,
		                     SNDATE, SNTIME, AP_DATE,
		                     VENDOR_CODE, VENDOR_NAME_LOC, AGENT_CODE,
		                     AGENT_NAME_LOC, IRS_NO, SGTXT,
		                     ISN_SLIP_YN, FISCAL_YEAR, BELNR,
		                     MSGTY, AR_NO, ORDER_NO,
		                     PRICE_AMT, VAT_AMT, SUM_AMT,
		                     PRE_AMT, SAP_SEND_STATUS, MESSAGE,
		                     STATUS, ADD_USER_ID, ADD_DATE,
		                     ADD_TIME, STJAH, STBLG,
		                     RVBUDAT ,SLIP_NM_H,CUST_EMAIL_ADDR,CUST_TEL_NO )
		     VALUES(
		     		#{MGRNO}, #{DOCNO}, #{HDSEQ},
		     		#{DOCSEQ}, #{DOCSTAT}, #{BUDAT},
		     		#{BLDAT}, #{ETAXNO}, #{SNUSER},
		     		TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS'), #{AP_DATE},
		     		#{VENDOR_CODE}, #{VENDOR_NAME_LOC}, #{AGENT_CODE},
		     		#{AGENT_NAME_LOC}, #{IRS_NO}, #{SGTXT},
		     		'Y', #{FISCAL_YEAR}, #{BELNR},
		     		#{MSGTY}, #{AR_NO}, #{ORDER_NO},
		     		#{PRICE_AMT}, #{VAT_AMT}, #{SUM_AMT},
		     		#{PRE_AMT}, #{SAP_SEND_STATUS}, #{MESSAGE},
		     		'I', #{USER_ID}, TO_CHAR(SYSDATE, 'YYYYMMDD'),
		     		TO_CHAR(SYSDATE, 'HH24MISS'), '', '',
		     		''	, #{SLIP_NM_H}, #{CUST_EMAIL_ADDR}, #{CUST_TEL_NO}
		     		)
	</insert>

    <insert id="saveSLDT"> -- 매출
			         INSERT INTO STOCSLDT (MGRNO, DOCNO, HDSEQ,
			         		DOCSEQ, BUZEI, SHKZG,
			         		HKONT,
			         		MWSKZ,
			         		ZFBDT, WRBTR, FWBAS,
			         		SGTXT, KNDNR, WW050,
			         		WW060, WW070,
							WW160,
							XREF3,
			         		ADD_USER_ID, ADD_DATE, ADD_TIME)

						SELECT
			 		  		#{MGRNO}, #{DOCNO}, #{HDSEQ},
			 				#{DOCSEQ}, '2', 'H' -- 대변 상품매출(일반자재)
			 				,CASE WHEN #{WW050} IN ('B300040','B300050') THEN '1000011919' ELSE '1000011918' END  -- 식자재 , 일반상품
			 				, #{TAX_TYPE},
			 				#{ZFBDT}, TO_CHAR(#{PRICE_TOTAL}), TO_CHAR(#{FWBAS}),
			 				#{SGTXT}, #{KNDNR_IRS_NO}, #{WW050},
			 				#{GROUP_COMPANY_CODE}, #{ITEM_GROUP},--WW060, WW070,
							#{CATEGORY_SAP},--WW160
			 				#{IRS_NO},
			 				#{USER_ID}, TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS')
						FROM DUAL


						UNION ALL
						SELECT
			 		  		#{MGRNO}, #{DOCNO}, #{HDSEQ},
			 				#{DOCSEQ}, '3', 'H' -- 대변 예수부가세
			 				,'1000000408'
			 				, #{TAX_TYPE},
			 				#{ZFBDT}, TO_CHAR(#{VAT_AMT}), TO_CHAR(#{PRICE_TOTAL}),
			 				#{SGTXT}, #{KNDNR_IRS_NO}, #{WW050},
			 				#{GROUP_COMPANY_CODE}, #{ITEM_GROUP},
							#{CATEGORY_SAP},
			 				#{IRS_NO},
			 				#{USER_ID}, TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS')
						FROM DUAL
--						WHERE {TAX_TYPE} = 'CA12' -- 과세일 경우에만 넣는다.


						UNION ALL
						SELECT
			 		  		#{MGRNO}, #{DOCNO}, #{HDSEQ},
			 				#{DOCSEQ}, '1', 'S' -- 차변
			 				,'1000011435'
			 				, #{TAX_TYPE},
			 				#{ZFBDT}, TO_CHAR(#{TAX_TOTAL}), TO_CHAR(#{FWBAS}),
			 				#{SGTXT}, #{KNDNR_IRS_NO}, #{WW050},
			 				#{GROUP_COMPANY_CODE}, #{ITEM_GROUP},
							#{CATEGORY_SAP},
			 				#{IRS_NO},
			 				#{USER_ID}, TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS')
						FROM DUAL
	</insert>

    <select id="getSapList" parameterType="hashMap" resultType="hashMap">

	 SELECT
	             SEQ_ID,SYSID, APPCD, MGRNO,
	             DOCNO, HDSEQ, DOCPROS,
	             DOCSTAT, XREVERSAL, RVBUDAT,
	             BUKRS, BELNR, BUDAT,
	             BLDAT, WAERS, KURSF,
	             BUPLA, ETAXNO, SNUSER,
	             SNDATE, SNTIME, BUZEI AS BUZEI,
	             SHKZG, HKONT, XREF3,
	             NEWKO, MWSKZ,
	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) NOT IN ('4', '5', '6', '7') THEN '9010'
	                     ELSE '' END AS GSBER,
	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) BETWEEN '4' AND '7' THEN SAPCD
	                     ELSE '' END AS KOSTL,
	              KNDNR,
	              WW050,
	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) BETWEEN '4' AND '7' THEN WW060
	                     ELSE '' END AS WW060,
	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) BETWEEN '4' AND '7' THEN WW070
	                     ELSE '' END AS WW070,
	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) BETWEEN '4' AND '7' THEN WW160
	                     ELSE '' END AS WW160,
	             SAPCD as ZUONR, AUFNR,
	             ZFBDT, ZTERM, ZLSCH,
	             TRITEM, XNEGP, WRBTR,  S_AMT,H_AMT,
	             DMBTR, WMWST, MWSTS,
	             FWBAS, HWBAS, SGTXT,
	             WW090, WW100,
	             WW110, WW130, WW140,
	             WW150, WW170
	 FROM
	         (
	             SELECT
	                     '' as SEQ_ID,'31' AS SYSID, '' AS XREVERSAL, MAX(SLHD.MGRNO)AS MGRNO, MAX(SLHD.HDSEQ)AS HDSEQ,

		                     MAX(SLHD.AP_NO) AS DOCNO,
		                     'POST' AS DOCPROS, 'POST' AS DOCSTAT,'311001' AS APPCD,

	                     '' AS RVBUDAT, '3000' AS BUKRS, '' AS BELNR,
	                      MAX(SLHD.BUDAT)AS BUDAT, MAX(SLHD.BLDAT) AS BLDAT, 'KRW' AS WAERS,
	                      '' AS KURSF, '3000' AS BUPLA, '' AS ETAXNO,
	                      MAX((SELECT EMPLOYEE_NUM FROM STOCUSER WHERE GATE_CD='100' AND USER_ID=SLHD.ADD_USER_ID)) AS SNUSER,
	 					  TO_CHAR(SYSDATE, 'YYYYMMDD') AS SNDATE, TO_CHAR(SYSDATE, 'HH24MISS') AS SNTIME,
	                      MAX(SLDT.BUZEI)AS BUZEI, MAX(SLDT.SHKZG)AS SHKZG, SLDT.HKONT,
	                      MAX(SLDT.XREF3)AS XREF3, '' AS NEWKO, MAX(SLDT.MWSKZ)AS MWSKZ,
	                      '9010' AS GSBER, '3000' AS KOSTL, '3000' AS ZUONR,
	                      '' AS AUFNR, MAX(SLDT.ZFBDT)AS ZFBDT, '' AS ZTERM,
	                      '' AS ZLSCH, '' AS TRITEM, '' AS XNEGP,
	                      SUM(SLDT.WRBTR)AS WRBTR,    SUM(DECODE(SLDT.SHKZG,'S',SLDT.WRBTR,0)) AS S_AMT   ,   SUM(DECODE(SLDT.SHKZG,'H',SLDT.WRBTR,0)) AS H_AMT , '' AS DMBTR, '' WMWST,
	                      '' AS MWSTS, SUM(SLDT.FWBAS)AS FWBAS, '' AS HWBAS,
	                      MAX(SLDT.SGTXT)AS SGTXT, MAX(SLDT.KNDNR)AS KNDNR, MAX(SLDT.WW050)AS WW050,
	                      MAX(SLDT.WW060)AS WW060,
	                      MAX((SELECT SAPCD FROM STOCSLMP WHERE ISN_TYPE ='SAP07' AND ISN_CODE = SLDT.WW070)) AS WW070,
	                      '' AS WW090, '' AS WW100, '' AS WW110,
	                      '' AS WW130, '' AS WW140, '' AS WW150,
	                      MAX(SLDT.WW160)AS WW160, '' AS WW170,
	                      '' SAPCD
	             FROM STOCSLHD SLHD, STOCSLDT SLDT
	             WHERE SLDT.MGRNO = SLHD.MGRNO
	             AND SLDT.DOCNO = SLHD.DOCNO
	             AND SLDT.HDSEQ = SLHD.HDSEQ
	             AND SLDT.DOCSEQ = SLHD.DOCSEQ
	             AND SLHD.MGRNO = #{MGRNO}
	            GROUP BY SLDT.HKONT
	         )
			ORDER BY BUZEI--FWBAS,WW070 DESC


    </select>




    <select id="tx01020_doSearch" parameterType="hashMap" resultType="hashMap">
        SELECT
			  TTIH.TAX_NUM  MGRNO                             --ISN전송번호
			, MAX(TTIH.RCOM_NM)  VENDOR_NAME                       --고객사명
			, MAX(APAR.PLANT_CD) AGENT_CODE                        --AGENT_CODE
			, <include refid="com.sql.dbo"/>GETPLANTNAME(#{ses.gateCd}, MAX(TTIH.RCOM_CODE)  , MAX(APAR.PLANT_CD) ,#{ses.langCd}) AGENT_NAME                        --사업장명
			, MAX(TTIH.ISSUE_DATE)  BUDAT                             --전기일
			, MAX(TTIH.SUP_AMT)  PRICE_TOTAL                       --공급가액
			, MAX(TTIH.SLIP_NM)  SLIP_NM                           --적요명
			, MAX(TTIH.SLIP_NM_H)  SLIP_NM_H                         --전표제목
			, MAX(TTIH.RUSER_EMAIL)  CUST_EMAIL_ADDR                   --거래처담당자 EMAIL
			, MAX(TTIH.RUSER_TEL_NO)  CUST_TEL_NO                       --거래처담당자 전화번호
			, '매출'  TYPE_NM                           --유형
			, MAX(<include refid="com.sql.nvl"/>(SLHD.ISN_SLIP_YN,'N'))  ISN_SLIP_YN                       --ISN전표생성여부
			, DECODE(<include refid="com.sql.nvl"/>(MAX(SLHD.ISN_SLIP_YN),'N'),'Y' ,'생성','미생성')  ISN_SLIP_YN_NM                    --ISN전표생성여부
			, <include refid="com.sql.nvl"/>(MAX(SLHD.BELNR), '' )  SAP_NO                            --DGNS전표번호
			, <include refid="com.sql.nvl"/>(MAX(SLHD.FISCAL_YEAR),'')  SAP_YEAR                          --DGNS회계년도
			, <include refid="com.sql.nvl"/>(MAX(SLHD.MSGTY), '')  MSGTY                             --DGNS처리결과
			, DECODE(<include refid="com.sql.nvl"/>(MAX(SLHD.MSGTY), ''), 'S', '성공', 'E', '실패', '')  MSGTY_NM                          --DGNS처리결과
			, MAX(TTIH.CLOSING_NO)  AR_NO                             --매출 확정 번호
			, MAX(APAR.CPO_NO)  ORDER_NO                          --주문번호
			, MAX(TTIH.TAX_AMT)  VAT_AMT                          --부가세금액
			, MAX(TTIH.SUP_AMT)+MAX(TTIH.TAX_AMT)  TAX_TOTAL      --합계금액
			, null  SAP_SEND_STATUS                   --SAP_SEND_STATUS
			, null  SAP_SEND_STATUS_NAME              --DGNS전송상태
			, MAX(SLHD.ADD_USER_ID)  ADD_USER_ID                       --ADD_USER_ID
			, <include refid="com.sql.dbo"/>GETUSERNAME('100', MAX(SLHD.ADD_USER_ID), #{ses.langCd})  ADD_USER_NAME                     --전표작성자
			, null  EMPLOYEE_NO                       --전표작성자사번
			, <include refid="com.sql.nvl"/>(MAX(SLHD.MESSAGE), '')  MESSAGE                           --SAP MESSAGE
			, MAX(APAR.CLOSE_DATE)  AP_DATE            --마감일
			, MAX(TTIH.RCOM_CODE)     VENDOR_CODE                       --VENDOR_CODE
			, MAX(TTIH.RIRS_NUM)    AGENT_IRS_NO                      --사업자등록번호
			, MAX(DECODE(SLHD.HDSEQ,NULL,'0001',SLHD.HDSEQ))  HDSEQ                             --전표헤더 순번
			, MAX(SLHD.STATUS)   STATUS                            --상태
			, MAX(SLHD.DOCSEQ)   DOCSEQ                            --DOCSEQ
			, MAX(SLHD.DOCSTAT)  DOCSTAT                           --DOCSTAT
			, MAX(TTIH.SCOM_CODE)  COMPANY_CODE                      --COMPANY_CODE -- 공급하는자
			, null  BANK_ACCOUNT_NO                   --BANK_ACCOUNT_NO(안씀)
			, null  BANK_CODE                         --BANK_CODE(안씀)
			, MAX(WW050) WW050
			, MAX(VAT_CD) TAX_TYPE
			, MAX(TTIH.DEL_FLAG) DEL_FLAG
            , MAX(APAR.REG_USER_ID) AS AM_USER_ID
            , MAX(<include refid="com.sql.dbo"/>GETUSERNAME(TTIH.GATE_CD,APAR.REG_USER_ID,#{ses.langCd})) AS AM_USER_NM
        FROM STOCTTIH TTIH
        JOIN STOCTTID TTID
            ON (TTIH.GATE_CD = TTID.GATE_CD
           AND TTIH.CLOSING_NO = TTID.CLOSING_NO
             AND TTIH.TAX_NUM = TTID.TAX_NUM
             --AND TTID.DEL_FLAG = '0'
                )
        JOIN STOCAPAR APAR
            ON (APAR.GATE_CD = TTID.GATE_CD
            AND APAR.CLOSING_NO = TTID.CLOSING_NO
            AND APAR.CLOSING_SEQ = TTID.CLOSING_SEQ
            AND APAR.DEL_FLAG = '0'
                )
        LEFT JOIN STOCUSER CUSER
            ON (CUSER.GATE_CD = APAR.GATE_CD
            AND CUSER.USER_ID = APAR.REG_USER_ID
            AND CUSER.DEL_FLAG = '0')
		LEFT OUTER JOIN STOCSLHD SLHD
			ON  SLHD.AR_NO    = TTIH.CLOSING_NO
			AND SLHD.MGRNO    = TTIH.TAX_NUM
			AND SLHD.ORDER_NO = APAR.CPO_NO

        WHERE TTIH.GATE_CD = #{ses.gateCd}

        AND CASE WHEN SLHD.STATUS = 'S' AND TTIH.DEL_FLAG='1' THEN 'Y'
                 WHEN TTIH.DEL_FLAG = '0' THEN 'Y'
		    ELSE 'N' END = 'Y'


        AND  TTIH.SALES_TYPE = 'S'
        AND  TTIH.SLIP_NM IS NOT NULL


        <if test="CLOSE_YEARX != '' and CLOSE_YEARX != null">
            AND <include refid="com.sql.subStr"/>(TTIH.ISSUE_DATE, 1, 4) = #{CLOSE_YEAR}
        </if>
        <if test="CLOSE_MONTHX != '' and CLOSE_MONTHX != null">
            AND <include refid="com.sql.subStr"/>(TTIH.ISSUE_DATE, 6, 2) = #{CLOSE_MONTH}
        </if>

			AND TTIH.ISSUE_DATE LIKE #{CLOSE_YEAR}||#{CLOSE_MONTH}||'%'

        <if test="CUST_CD != '' and CUST_CD != null">
            AND (APAR.CUST_CD <include refid="com.sql.likeL"/> #{CUST_CD} <include refid="com.sql.likeR"/> OR
                 APAR.AP_TAX_NUM IN (
                                        SELECT TTIH.TAX_NUM
                                        FROM STOCTTIH TTIH
                                        WHERE 1=1
                                        AND TTIH.RCOM_CODE <include refid="com.sql.likeL"/> #{RCOM_CODE} <include refid="com.sql.likeR"/>
                                        )
                )
        </if>
        <if test="CUST_NM != '' and CUST_NM != null">
            AND (TTIH.RCOM_NM <include refid="com.sql.likeL"/> #{RCOM_NM} <include refid="com.sql.likeR"/> OR
                 APAR.AP_TAX_NUM IN (
                                        SELECT TTIH.TAX_NUM
                                        FROM STOCTTIH TTIH
                                        WHERE 1=1
                                        AND <include refid="com.sql.dbo"/>getCustName(TTIH.GATE_CD, TTIH.RCOM_CODE) <include refid="com.sql.likeL"/> #{CUST_NM} <include refid="com.sql.likeR"/>
                                        )
                )
        </if>
        <if test="PLANT_CD != '' and PLANT_CD != null">
            AND APAR.PLANT_CD <include refid="com.sql.likeL"/> #{PLANT_CD} <include refid="com.sql.likeR"/>
        </if>
        <if test="PLANT_NM != '' and PLANT_NM != null">
            AND <include refid="com.sql.dbo"/>getPlantName(#{ses.gateCd}, APAR.CUST_CD, APAR.PLANT_CD, #{ses.langCd}) <include refid="com.sql.likeL"/> #{PLANT_NM} <include refid="com.sql.likeR"/>
        </if>
        <if test="AM_USER_ID != '' and AM_USER_ID != null">
            AND APAR.REG_USER_ID = #{AM_USER_ID}
        </if>
        GROUP BY TTIH.GATE_CD, TTIH.TAX_NUM, TTIH.RIRS_NUM
        ORDER BY TTIH.RIRS_NUM, TTIH.TAX_NUM ASC
	</select>

    <update id="tx01020_doAccV">
        UPDATE STOCTTIH SET
            ACCOUNT_CHECK_YN = '1'
            , TR_CD = #{TR_CD}
            , TRANS_YN = 'Y'
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

    <update id="tx01020_doAccV_Cancel">
        UPDATE STOCTTIH SET
            ACCOUNT_CHECK_YN = '0'
            , TRANS_YN = ''
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

    <update id="tx01020_doAccC">
        UPDATE STOCTTIH SET
            ACCOUNT_CONFIRM_YN = '1'
            , TR_CD = #{TR_CD}
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

    <update id="tx01020_doAccC_Cancel">
        UPDATE STOCTTIH SET
            ACCOUNT_CONFIRM_YN = '0'
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

    <update id="tx01020_doAutoDocExe">
        UPDATE STOCTTIH SET
            ACCOUNT_SLIP_YN = '1'
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

     <update id="tx01020_doSalesClose">
        UPDATE STOCTTIH SET
            ACCOUNT_CLOSE_YN = '1'
            , ACCOUNT_CLOSE_USER_ID = #{ses.userId}
            , ACCOUNT_CLOSE_DATE = <include refid="com.sql.sysdate"/>
            , MOD_DATE = <include refid="com.sql.sysdate"/>
            , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
        AND TAX_NUM = #{TAX_NUM}
    </update>

	<select id="tx01020_doSalesCloseCUCLCHK" parameterType="hashMap" resultType="string">
		SELECT COUNT(*) COU
		FROM STOCCUCL
		WHERE GATE_CD = #{ses.gateCd}
		AND DOC_TYPE = #{TYPE}
		AND YEAR_MONTH <![CDATA[>=]]> #{CLOSE_YEAR}||#{CLOSE_MONTH}

	</select>

    <update id="tx01020_doSalesCloseCUCL">
        INSERT INTO STOCCUCL (
            GATE_CD
            , YEAR_MONTH
            , DOC_TYPE
        )
        VALUES (
            #{ses.gateCd}
            , #{CLOSE_YEAR}<include refid="com.sql.stringMerge"/>#{CLOSE_MONTH}
            , #{TYPE}
        )
    </update>


    <update id="doSalesCloseCancel">
        DELETE STOCCUCL
        WHERE GATE_CD  = #{ses.gateCd}
        AND DOC_TYPE   = #{TYPE}
        AND YEAR_MONTH <![CDATA[>=]]> #{CLOSE_YEAR}||#{CLOSE_MONTH}
    </update>






	<select id="tx01011_doSearch" parameterType="hashMap" resultType="hashMap">
		SELECT TTIH.TAX_NUM
			, '' AS TAX_SEQ
			, MAX(APAR.AP_TAX_NUM) AS AP_TAX_NUM
			, MAX(APAR.AR_TAX_NUM) AS AR_TAX_NUM
			, CASE WHEN (MAX(TTIH.TRANS_YN) != '' AND MAX(TTIH.TRANS_YN) IS NOT NULL AND MAX(TTIH.TRANS_YN) = 'Y') THEN 'Y' ELSE 'N' END AS TAX_BILLSEQ_YN

			, '0' AS SEL_CHK_YN

			, MAX(E_BILL_ASP_STAT_TYPE) AS BILL_STAT_TYPE
			, CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN '전송대기' --'미신고'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'A' THEN '접수대기'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'B' THEN '접수완료'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN '신고완료'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'F' THEN '신고실패'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'E' THEN '전송오류'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN '전송'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '5' THEN '미전송'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '0' THEN '미개봉'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '3' THEN '개봉'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '1' THEN '승인'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '2' THEN '반려'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '4' THEN '승인취소'
			  ELSE
				   ''
			  END AS BILL_STAT_NM
			, CASE WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'N' THEN 'N'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'A' THEN 'Y'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'B' THEN 'Y'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'R' THEN 'Y'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'F' THEN 'Y'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'E' THEN 'N'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = 'Y' THEN 'Y'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '5' THEN 'Y'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '0' THEN 'Y'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '3' THEN 'Y'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '1' THEN 'Y'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '2' THEN 'N'
					WHEN MAX(E_BILL_ASP_STAT_TYPE) = '4' THEN 'N'
			  ELSE
				   ''
			  END AS BILL_TRANS_YN
			, MAX(TTIH.TRANS_YN) AS TRANS_YN
			, CASE WHEN MAX(TTIH.TRANS_YN) = 'Y' THEN '전표생성'
				   WHEN MAX(TTIH.TRANS_YN) = 'N' THEN '전표이관'
				   WHEN MAX(TTIH.TRANS_YN) = 'C' THEN '전표취소'
			  ELSE
				   ''
			  END AS TRANS_NM

			, MAX(TTIH.SCOM_CODE) AS SCOM_CODE
			, MAX(TTIH.SIRS_NUM) AS SIRS_NUM
			, MAX(TTIH.SCOM_NM) AS SCOM_NM
			, MAX(TTIH.SCEO_NM) AS SCEO_NM
			, MAX(TTIH.SBUSINESS_TYPE) AS SBUSINESS_TYPE
			, MAX(TTIH.SINDUSTRY_TYPE) AS SINDUSTRY_TYPE
			, MAX(TTIH.SADDR1) AS SADDR1
			, MAX(TTIH.SADDR2) AS SADDR2
			, MAX(TTIH.SUSER_ID) AS SUSER_ID
			, MAX(TTIH.SUSER_ID_ASP) AS SUSER_ID_ASP
			, MAX(TTIH.SUSER_NM) AS SUSER_NM
			, MAX(TTIH.SUSER_DEPT_NM) AS SUSER_DEPT_NM
			, MAX(TTIH.SUSER_TEL_NO) AS SUSER_TEL_NO
			, MAX(TTIH.SUSER_EMAIL) AS SUSER_EMAIL
			, MAX(TTIH.SSUB_IRS_NUM) AS SSUB_IRS_NUM


			, MAX(TTIH.RCOM_CODE) AS RCOM_CODE
			, MAX(TTIH.RIRS_NUM) AS RIRS_NUM
			, MAX(TTIH.RCOM_NM) AS RCOM_NM
			, MAX(TTIH.RCEO_NM) AS RCEO_NM
			, MAX(TTIH.RBUSINESS_TYPE) AS RBUSINESS_TYPE
			, MAX(TTIH.RINDUSTRY_TYPE) AS RINDUSTRY_TYPE
			, MAX(TTIH.RADDR1) AS RADDR1
			, MAX(TTIH.RADDR2) AS RADDR2
			, MAX(TTIH.RUSER_ID) AS RUSER_ID
			, MAX(TTIH.RUSER_ID_ASP) AS RUSER_ID_ASP
			, MAX(TTIH.RUSER_NM) AS RUSER_NM
			, MAX(TTIH.RUSER_DEPT_NM) AS RUSER_DEPT_NM
			, MAX(TTIH.RUSER_TEL_NO) AS RUSER_TEL_NO
			, MAX(TTIH.RUSER_EMAIL) AS RUSER_EMAIL
			, MAX(TTIH.RSUB_IRS_NUM) AS RSUB_IRS_NUM

			, MAX(TTIH.SUP_AMT) AS SUP_AMT
			, MAX(TTIH.TAX_AMT) AS TAX_AMT
			, MAX(TTIH.TAX_AMT) AS O_TAX_AMT

			, MAX(TTIH.SALES_TYPE) AS SALES_TYPE
			, <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'MP074', MAX(TTIH.SALES_TYPE), #{ses.langCd}) AS SALES_TYPE_NM
			, MAX(TTIH.RQ_RE_TYPE) AS RQ_RE_TYPE
			, <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'MP073', MAX(TTIH.RQ_RE_TYPE), #{ses.langCd}) AS RQ_RE_TYPE_NM

			, CASE WHEN MAX(TTIH.TAX_SEND_TYPE) = '' AND MAX(TTIH.SALES_TYPE) = 'P' THEN '200' ELSE MAX(TTIH.TAX_SEND_TYPE) END AS TAX_SEND_TYPE
			, <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'MP064', CASE WHEN MAX(TTIH.TAX_SEND_TYPE) = '' AND MAX(TTIH.SALES_TYPE) = 'P' THEN '200' ELSE MAX(TTIH.TAX_SEND_TYPE) END, #{ses.langCd}) AS TAX_SEND_TYPE_NM


			, MAX(TTIH.VAT_CD) AS VAT_CD
			, <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'M036', MAX(TTIH.VAT_CD), #{ses.langCd}) AS VAT_NM
			, <include refid="com.sql.toDateChar"/>(MAX(TTIH.ISSUE_DATE), 'YYYY-MM-DD') AS ISSUE_DATE
			, MAX(TTIH.REMAKR) AS REMAKR
			, MAX(TTIH.E_BILL_ASP_TYPE) AS E_BILL_ASP_TYPE
			, <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'MP075', MAX(TTIH.E_BILL_ASP_TYPE), #{ses.langCd}) AS E_BILL_ASP_TYPE_NM

			, MAX(TTIH.TAX_BILLSEQ) AS TAX_BILLSEQ
			, MAX(TTIH.TAX_ASP_NM) AS TAX_ASP_NM
			, MAX(TTIH.TAX_ASP_BILLSEQ) AS TAX_ASP_BILLSEQ
			, MAX(TTIH.SLNO) AS SLNO

			, CASE WHEN MAX(TTIH.SALES_TYPE) = 'S' THEN MAX(CUST.ACC_NUM) ELSE MAX(VNGL.ACCOUNT_M_NUM) END AS CSTCO
		FROM STOCTTIH TTIH
		JOIN STOCTTID TTID
		ON  TTIH.GATE_CD = TTID.GATE_CD
		AND TTIH.TAX_NUM = TTID.TAX_NUM
		JOIN STOCAPAR APAR
		ON  APAR.GATE_CD = TTID.GATE_CD
		AND APAR.CLOSING_NO = TTID.CLOSING_NO
		AND APAR.CLOSING_SEQ = TTID.CLOSING_SEQ
		JOIN STOUPOHD UPOHD
		ON  APAR.GATE_CD = UPOHD.GATE_CD
		AND APAR.CUST_CD = UPOHD.CUST_CD
		AND APAR.CPO_NO = UPOHD.CPO_NO
		AND UPOHD.DEL_FLAG = '0'
		JOIN STOUPODT UPODT
		ON  UPODT.GATE_CD = APAR.GATE_CD
		AND UPODT.CUST_CD = APAR.CUST_CD
		AND UPODT.CPO_NO = APAR.CPO_NO
		AND UPODT.CPO_SEQ = APAR.CPO_SEQ
		AND UPODT.DEL_FLAG = '0'
		LEFT JOIN STOCCVUR CVUR
		ON  UPOHD.GATE_CD = CVUR.GATE_CD
		AND UPOHD.CUST_CD = CVUR.COMPANY_CD
		AND UPOHD.CPO_USER_ID = CVUR.USER_ID
		AND CVUR.USER_TYPE = 'B'
		LEFT JOIN STOCCUAC CUAC
		ON  APAR.GATE_CD = CUAC.GATE_CD
		AND APAR.CUST_CD = CUAC.CUST_CD
		AND APAR.ACCOUNT_CD = CUAC.ACCOUNT_CD
		LEFT JOIN STOCVNGL VNGL
		ON  TTIH.GATE_CD = VNGL.GATE_CD
		AND TTIH.SCOM_CODE = VNGL.VENDOR_CD
		LEFT JOIN STOCCUST CUST
		ON  TTIH.GATE_CD = CUST.GATE_CD
		AND TTIH.RCOM_CODE = CUST.CUST_CD

		WHERE TTIH.GATE_CD  = #{ses.gateCd}
		AND TTIH.DEL_FLAG = '0'
		AND TTID.DEL_FLAG = '0'
		AND APAR.DEL_FLAG = '0'
		<if test="CUST_CD != '' and CUST_CD != null">
			AND (UPOHD.CUST_CD <include refid="com.sql.likeL"/> #{CUST_CD} <include refid="com.sql.likeR"/> OR
				 APAR.AP_TAX_NUM IN (
										SELECT TTIH.TAX_NUM
										FROM STOCTTIH TTIH
										WHERE 1=1
										AND TTIH.RCOM_CODE <include refid="com.sql.likeL"/> #{RCOM_CODE} <include refid="com.sql.likeR"/>
										)
				)
		</if>
		<if test="CUST_NM != '' and CUST_NM != null">
			AND (TTIH.RCOM_NM <include refid="com.sql.likeL"/> #{RCOM_NM} <include refid="com.sql.likeR"/> OR
				 APAR.AP_TAX_NUM IN (
										SELECT TTIH.TAX_NUM
										FROM STOCTTIH TTIH
										WHERE 1=1
										AND TTIH.RCOM_NM <include refid="com.sql.likeL"/> #{RCOM_NM} <include refid="com.sql.likeR"/>
										)
				)
		</if>
		<if test="DEPT_CD != '' and DEPT_CD != null">
			AND UPOHD.CPO_USER_DEPT_CD <include refid="com.sql.likeL"/> #{CPO_USER_DEPT_CD} <include refid="com.sql.likeR"/>
		</if>
		<if test="DEPT_NM != '' and DEPT_NM != null">
			AND CVUR.DEPT_NM <include refid="com.sql.likeL"/> #{DEPT_NM} <include refid="com.sql.likeR"/>
		</if>
		<if test="CPO_USER_ID != '' and CPO_USER_ID != null">
			AND UPOHD.CPO_USER_ID <include refid="com.sql.likeL"/> #{CPO_USER_ID} <include refid="com.sql.likeR"/>
		</if>
		<if test="CPO_USER_NM != '' and CPO_USER_NM != null">
			AND CVUR.USER_NM <include refid="com.sql.likeL"/> #{USER_NM} <include refid="com.sql.likeR"/>
		</if>
		<if test="CLOSE_YEAR != '' and CLOSE_YEAR != null">
			AND <include refid="com.sql.subStr"/>(APAR.CLOSING_YEAR_MONTH, 1, 4) = #{CLOSE_YEAR}
		</if>
		<if test="CLOSE_MONTH != '' and CLOSE_MONTH != null">
			AND <include refid="com.sql.subStr"/>(APAR.CLOSING_YEAR_MONTH, 5, 2) = #{CLOSE_MONTH}
		</if>
		<if test="DOC_NUM != '' and DOC_NUM != null">
			<choose>
				<when test="DOC_NUM_COMBO != '' and DOC_NUM_COMBO != null and DOC_NUM_COMBO eq 'CPO_NO'.toString()">
					<if test="DOC_CNT == 1">
						AND UPOHD.CPO_NO IN ${DOC_NUM}
					</if>
					<if test="DOC_CNT == 0">
						AND UPOHD.CPO_NO <include refid="com.sql.likeL"/> #{CPO_NO} <include refid="com.sql.likeR"/>
					</if>
				</when>
				<otherwise>
					<if test="DOC_CNT == 1">
						AND UPODT.REF_MNG_NO IN ${DOC_NUM}
					</if>
					<if test="DOC_CNT == 0">
						AND UPODT.REF_MNG_NO <include refid="com.sql.likeL"/> #{REF_MNG_NO} <include refid="com.sql.likeR"/>
					</if>
				</otherwise>
			</choose>
		</if>
		<if test="ITEM_CD != '' and ITEM_CD != null">
			<if test="ITEM_CNT == 1">
				AND (UPODT.ITEM_CD IN ${ITEM_CD} OR UPODT.CUST_ITEM_CD IN ${ITEM_CD})
			</if>
			<if test="ITEM_CNT == 0">
				AND (UPODT.ITEM_CD <include refid="com.sql.likeL"/> #{ITEM_CD} <include refid="com.sql.likeR"/> OR UPODT.CUST_ITEM_CD <include refid="com.sql.likeL"/> #{CUST_ITEM_CD} <include refid="com.sql.likeR"/>)
			</if>
		</if>
		<if test="ITEM_DESC != '' and ITEM_DESC != null">
			AND (${ITEM_DESC_01} OR  ${ITEM_DESC_02})
		</if>
		<if test="MAKER_CD != '' and MAKER_CD != null">
			AND ${MAKER_CD_01}
		</if>
		<if test="MAKER_NM != '' and MAKER_NM != null">
			AND ${MAKER_NM_01}
		</if>
		<if test="ACCOUNT_CD != '' and ACCOUNT_CD != null">
			AND UPODT.ACCOUNT_CD <include refid="com.sql.likeL"/> #{ACCOUNT_CD} <include refid="com.sql.likeR"/>
		</if>
		<if test="ACCOUNT_NM != '' and ACCOUNT_NM != null">
			AND CUAC.ACCOUNT_NM <include refid="com.sql.likeL"/> #{ACCOUNT_NM} <include refid="com.sql.likeR"/>
		</if>
		<if test="TRANS_YN != '' and TRANS_YN != null">
			<if test='TRANS_YN != "" and TRANS_YN != null and TRANS_YN == "-"'>
				AND <include refid="com.sql.nvl"/>(TTIH.TRANS_YN, '') IN ('', 'C')
			</if>
			<if test='TRANS_YN != "" and TRANS_YN != null and TRANS_YN != "-"'>
				AND <include refid="com.sql.nvl"/>(TTIH.TRANS_YN, '') = #{TRANS_YN}
			</if>
		</if>
		GROUP BY TTIH.GATE_CD, TTIH.TAX_NUM
		ORDER BY TTIH.TAX_NUM DESC
	</select>

	<select id="tx01011_doSearchTTID" parameterType="hashMap" resultType="hashMap">
		SELECT APAR.AP_TAX_NUM AS TAX_NUM
             , TTID.TAX_SEQ
             , APAR.AR_TAX_NUM
             , APAR.VENDOR_CD
             , VNGL.VENDOR_NM
             , APAR.ITEM_CD
             , APAR.CUST_ITEM_CD
             , APAR.ITEM_DESC
             , APAR.ITEM_SPEC
             , TTID.UNIT_AMT
             , TTID.QTY
             , TTID.SUP_AMT
             , TTID.TAX_AMT
             , <include refid="com.sql.toDateChar"/>(TTID.ITEM_TRADE_DATE, 'YYYY-MM-DD') AS ITEM_TRADE_DATE
		, TTID.REMARK
             , TTID.CLOSING_NO
             , TTID.CLOSING_SEQ
        FROM STOCTTIH TTIH
                 JOIN STOCTTID TTID
                      ON  TTIH.GATE_CD = TTID.GATE_CD
                          AND TTIH.TAX_NUM = TTID.TAX_NUM
                 JOIN STOCAPAR APAR
                      ON  APAR.GATE_CD = TTID.GATE_CD
                          AND APAR.CLOSING_NO = TTID.CLOSING_NO
                          AND APAR.CLOSING_SEQ = TTID.CLOSING_SEQ
                 JOIN STOUPOHD UPOHD
                      ON  APAR.GATE_CD = UPOHD.GATE_CD
                          AND APAR.CUST_CD = UPOHD.CUST_CD
                          AND APAR.CPO_NO = UPOHD.CPO_NO
                          AND UPOHD.DEL_FLAG = '0'
                 JOIN STOUPODT UPODT
                      ON  UPODT.GATE_CD = APAR.GATE_CD
                          AND UPODT.CUST_CD = APAR.CUST_CD
                          AND UPODT.CPO_NO = APAR.CPO_NO
                          AND UPODT.CPO_SEQ = APAR.CPO_SEQ
                          AND UPODT.DEL_FLAG = '0'
                 LEFT JOIN STOCCVUR CVUR
                           ON  UPOHD.GATE_CD = CVUR.GATE_CD
                               AND UPOHD.CUST_CD = CVUR.COMPANY_CD
                               AND UPOHD.CPO_USER_ID = CVUR.USER_ID
                               AND CVUR.USER_TYPE = 'B'
                 LEFT JOIN STOCCUAC CUAC
                           ON  APAR.GATE_CD = CUAC.GATE_CD
                               AND APAR.CUST_CD = CUAC.CUST_CD
                               AND APAR.ACCOUNT_CD = CUAC.ACCOUNT_CD
                 LEFT JOIN STOCVNGL VNGL
                           ON  APAR.GATE_CD = VNGL.GATE_CD
                               AND APAR.VENDOR_CD = VNGL.VENDOR_CD

        WHERE TTIH.GATE_CD  = #{ses.gateCd}
          AND TTIH.DEL_FLAG = '0'
          AND TTID.DEL_FLAG = '0'
          AND APAR.DEL_FLAG = '0'
          AND TTID.TAX_NUM = #{TAX_NUM}
        ORDER BY TTIH.TAX_NUM, TTID.TAX_SEQ
	</select>

	<select id="tx01011_doSlipTransSELECT_CUST" parameterType="hashMap" resultType="String">
		SELECT CASE WHEN COUNT(CODE) >= 1 THEN 'Y' ELSE 'N' END AS CUST_YN
        FROM STOCCODD
        WHERE GATE_CD = #{ses.gateCd}
          AND DEL_FLAG = '0'
          AND LANG_CD = #{ses.langCd}
          AND CODE_TYPE = 'MP077'
          AND CODE = #{CUST_CD}
	</select>

	<select id="tx01011_doSlipTransSELECT_TAX_CHK" parameterType="hashMap" resultType="String">
        SELECT CASE WHEN MAX(SLNOYN) IN ('Y', 'N') THEN 'Y'
                    ELSE 'N'
                   END AS TAX_CHK_YN
        FROM (
                 SELECT OUTCLO.MRO_TAX_NUM
                      , OUTCLO.SLNOYN
                 FROM IF_MROOUTCLO OUTCLO
                 WHERE OUTCLO.MRO_SEQ = '1'
                   AND OUTCLO.MRO_TAX_NUM = #{TAX_NUM}

                 UNION ALL

                 SELECT INCLO.MRO_TAX_NUM
                      , INCLO.SLNOYN
                 FROM IF_MROINCLO INCLO
                 WHERE INCLO.MRO_SEQ = '1'
                   AND INCLO.MRO_TAX_NUM = #{TAX_NUM}
             ) A
	</select>

	<select id="tx01011_doSlipTransSELECT_CUST_CHK" parameterType="hashMap" resultType="hashMap">
		SELECT TTIH.TAX_NUM
			, TTIH.SALES_TYPE
			, VNGL.VENDOR_CD
			, VNGL.VENDOR_NM
			, VNGL.ACCOUNT_M_NUM
			, CUST.CUST_CD
			, CUST.CUST_NM
			, CUST.ACC_NUM
			, CODD.CODE
			, VNGL2.VENDOR_CD
			, VNGL2.VENDOR_NM
			, VNGL2.ACCOUNT_M_NUM
			, CASE WHEN TTIH.SALES_TYPE = 'S' AND CODD.CODE = CUST.CUST_CD THEN VNGL2.ACCOUNT_M_NUM
				   WHEN TTIH.SALES_TYPE = 'S' THEN CUST.ACC_NUM
				   WHEN TTIH.SALES_TYPE = 'P' THEN VNGL.ACCOUNT_M_NUM
			  ELSE ''
			  END AS CSTCO
			, CASE WHEN <include refid="com.sql.dbo"/>GETCODENAME(TTIH.GATE_CD, 'MP077', APAR.CUST_CD, #{ses.langCd}) IS NOT NULL THEN 'Y' ELSE 'N' END AS IN_ORDER
		FROM STOCTTIH TTIH
		LEFT JOIN STOCAPAR APAR
		ON  APAR.GATE_CD = TTIH.GATE_CD
		<if test='SALES_TYPE == "S"'>
			AND APAR.AP_TAX_NUM = TTIH.TAX_NUM
			AND APAR.AP_TAX_SEQ = '1'
		</if>
		<if test='SALES_TYPE == "P"'>
			AND APAR.AR_TAX_NUM = TTIH.TAX_NUM
			AND APAR.AR_TAX_SEQ = '1'
		</if>
		LEFT JOIN STOCVNGL VNGL
		ON  TTIH.GATE_CD = VNGL.GATE_CD
		AND TTIH.SCOM_CODE = VNGL.VENDOR_CD
		LEFT JOIN STOCCUST CUST
		ON  TTIH.GATE_CD = CUST.GATE_CD
		AND TTIH.RCOM_CODE = CUST.CUST_CD
		LEFT JOIN STOCVNGL VNGL2
		ON  APAR.GATE_CD = VNGL2.GATE_CD
		AND APAR.VENDOR_CD = VNGL2.VENDOR_CD
		LEFT JOIN STOCCODD CODD
		ON  TTIH.GATE_CD = CODD.GATE_CD
		AND CODD.DEL_FLAG = '0'
		AND CODD.LANG_CD = #{ses.langCd}
		AND CODD.CODE_TYPE = 'MP077'
		AND CODD.CODE = TTIH.RCOM_CODE

		WHERE TTIH.GATE_CD = #{ses.gateCd}
		AND TTIH.TAX_NUM = #{TAX_NUM}
	</select>

	<select id="tx01011_doSlipTransSELECT_TTID" parameterType="hashMap" resultType="hashMap">
		SELECT TTIH.TAX_NUM
             , TTID.ITEM_DESC
             , TTIH.RUSER_DEPT_NM
             , <include refid="com.sql.dbo"/>GETDEPTNAME(TTIH.GATE_CD, UPOHD.CUST_CD, UPOHD.CPO_USER_DEPT_CD, #{ses.langCd}) AS DPTCO_NM
			 , TTID.SUP_AMT AS AMT
             , TTID.TAX_AMT AS VAMT
             , OGDP2.ACC_CODE AS DPTCO
             , OGDP.ACC_CODE AS WDPTCO
             , APAR.ACCOUNT_CD
             , OGDP.INDEPT AS KWAN
             , <include refid="com.sql.subStr"/>(APAR.ACCOUNT_CD, 1, 2) AS HANG
			 , <include refid="com.sql.subStr"/>(APAR.ACCOUNT_CD, 3, 2) AS MOG
			 , <include refid="com.sql.subStr"/>(APAR.ACCOUNT_CD, 5, 2) AS SECO
			 , APAR.VENDOR_CD
             , VNGL.VENDOR_NM AS RCVER
             , VNGL.ACCOUNT_M_NUM AS CSTCO
        FROM STOCTTIH TTIH
        JOIN STOCTTID TTID
             ON  TTIH.GATE_CD = TTID.GATE_CD
             AND TTIH.TAX_NUM = TTID.TAX_NUM
        JOIN STOCAPAR APAR
             ON  TTIH.GATE_CD = APAR.GATE_CD
             AND TTID.TAX_NUM = APAR.AP_TAX_NUM
             AND TTID.TAX_SEQ = APAR.AP_TAX_SEQ
        JOIN STOUPODT UPODT
             ON  UPODT.GATE_CD = APAR.GATE_CD
             AND UPODT.CUST_CD = APAR.CUST_CD
             AND UPODT.CPO_NO = APAR.CPO_NO
             AND UPODT.CPO_SEQ = APAR.CPO_SEQ
        JOIN STOUPOHD UPOHD
             ON  UPOHD.GATE_CD = APAR.GATE_CD
             AND UPOHD.CUST_CD = APAR.CUST_CD
             AND UPOHD.CPO_NO = APAR.CPO_NO
        LEFT JOIN STOCOGDP OGDP
             ON (UPOHD.GATE_CD  = OGDP.GATE_CD
             AND UPOHD.CUST_CD  = OGDP.BUYER_CD
             AND UPOHD.PLANT_CD = OGDP.PLANT_CD
             AND UPOHD.CPO_USER_DIVISION_CD = OGDP.DIVISION_CD
             AND UPOHD.CPO_USER_DEPT_CD     = OGDP.DEPT_CD
             AND OGDP.PART_CD = '*')
		LEFT JOIN STOCOGDP OGDP2	-- 예산부서명
		    ON (APAR.GATE_CD = OGDP2.GATE_CD
		    AND REGEXP_SUBSTR(APAR.BD_DEPT_CD,'[^-]+', 1, 1) = OGDP2.BUYER_CD
		    AND REGEXP_SUBSTR(APAR.BD_DEPT_CD,'[^-]+', 1, 2) = OGDP2.PLANT_CD
		    AND REGEXP_SUBSTR(APAR.BD_DEPT_CD,'[^-]+', 1, 3) = OGDP2.DIVISION_CD
		    AND REGEXP_SUBSTR(APAR.BD_DEPT_CD,'[^-]+', 1, 4) = OGDP2.DEPT_CD
		    AND OGDP2.PART_CD = '*')
        JOIN STOCVNGL VNGL
             ON  APAR.GATE_CD = VNGL.GATE_CD
             AND APAR.VENDOR_CD = VNGL.VENDOR_CD
        WHERE TTID.GATE_CD  = #{ses.gateCd}
          AND TTID.DEL_FLAG = '0'
          AND TTIH.TAX_NUM  = #{TAX_NUM}

	</select>

	<select id="tx01011_doSlipTransSELECT_TTID_CHK" parameterType="hashMap" resultType="hashMap">
		SELECT TOP 1
        TTID.TAX_NUM
        , TTID.TAX_SEQ
        , TTID.TAX_AMT
        FROM STOCTTID TTID
        WHERE TTID.GATE_CD = #{ses.gateCd}
          AND TTID.DEL_FLAG = '0'
          AND TTID.TAX_NUM = #{TAX_NUM}
        ORDER BY TAX_AMT DESC
	</select>

	<update id="tx01011_doSaveUPDATE_TTID" parameterType="hashMap">
		UPDATE STOCTTID
        SET TAX_AMT = ${TAX_AMT}

          , MOD_DATE = <include refid="com.sql.sysdate"/>
          , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
          AND TAX_NUM = #{TAX_NUM}
          AND TAX_SEQ = #{TAX_SEQ}
	</update>

	<update id="tx01011_doSaveUPDATE_TTIH" parameterType="hashMap">
		UPDATE STOCTTIH
        SET TRANS_YN = #{TRANS_YN}
          , TRANS_DATE = CASE WHEN #{TRANS_YN} = '' THEN NULL ELSE <include refid="com.sql.sysdate"/> END
          , TRANS_USER_ID = CASE WHEN #{TRANS_YN} = '' THEN NULL ELSE #{ses.userId} END

          , MOD_DATE = <include refid="com.sql.sysdate"/>
          , MOD_USER_ID = #{ses.userId}
        WHERE GATE_CD = #{ses.gateCd}
          AND TAX_NUM = #{TAX_NUM}
	</update>

	<insert id="tx01011_doSlipTransINSERT_IF_MROOUTCLO" parameterType="hashMap">
		INSERT INTO IF_MROOUTCLO (
                                   YMD
                                 , MRO_TAX_NUM
                                 , MRO_SEQ

                                 , SENDYN
                                 , SLNOYN
                                 , ACCO
                                 , TACO
                                 , AMT
                                 , VAMT
                                 , RKNA
                                 , DPTCO
                                 , WDPTCO
                                 , KWAN
                                 , HANG
                                 , MOG
                                 , SECO
                                 , RCVER
                                 , CSTCO
                                 , RKCO
                                 , EVCO
                                 , REG_YMD
                                 , CLASS
                                 , WYMD
                                 , CUSERID
                                 , CYMD
        ) VALUES (
                     <include refid="com.sql.sysdate"/>
                 , #{TAX_NUM}
                 , (SELECT <include refid="com.sql.nvl"/>(MAX(MRO_SEQ), 0) + 1 FROM IF_MROOUTCLO WHERE MRO_TAX_NUM = #{TAX_NUM})

                 , 'N'
                 , 'N'
                 , #{ACCO}
                 , #{TACO}
                 , ${AMT}
                 , 0
                 , #{RKNA}
                 , #{DPTCO}
                 , '2150'
                 , 'A'
                 , '23'
                 , '02'
                 , '01'
                 , #{RCVER}
                 , #{CSTCO}
                 , NULL
                 , 'C'
                 , REPLACE(#{ISSUE_DATE}, '-', '')
                 , #{SALES_TYPE}
                 , NULL
                 , NULL
                 , NULL
                 )
	</insert>

	<delete id="tx01011_doSlipTransDELETE_IF_MROOUTCLO" parameterType="hashMap">
		DELETE FROM IF_MROOUTCLO
        WHERE MRO_TAX_NUM = #{TAX_NUM}
	</delete>

	<insert id="tx01011_doSlipTransINSERT_IF_MROINCLO" parameterType="hashMap">
		INSERT INTO IF_MROINCLO (
                                  YMD
                                , MRO_TAX_NUM
                                , MRO_SEQ

                                , SENDYN
                                , SLNOYN
                                , ACCO
                                , TACO
                                , AMT
                                , VAMT
                                , RKNA
                                , DPTCO
                                , WDPTCO
                                , KWAN
                                , HANG
                                , MOG
                                , SECO
                                , RCVER
                                , CSTCO
                                , RKCO
                                , EVCO
                                , REG_YMD
                                , WYMD
                                , CUSERID
                                , CYMD
        ) VALUES (
                     <include refid="com.sql.sysdate"/>
                 , #{TAX_NUM}
                 , (SELECT <include refid="com.sql.nvl"/>(MAX(MRO_SEQ), 0) + 1 FROM IF_MROINCLO WHERE MRO_TAX_NUM = #{TAX_NUM})

                 , 'N'
                 , 'N'
                 , #{ACCO}
                 , #{TACO}
                 , ${AMT}
                 , ${VAMT}
                 , #{RKNA}
                 , #{DPTCO}
                 , #{WDPTCO}
                 , #{KWAN}
                 , #{HANG}
                 , #{MOG}
                 , #{SECO}
                 , #{RCVER}
                 , #{CSTCO}
                 , NULL
                 , 'C'
                 , REPLACE(#{ISSUE_DATE}, '-', '')
                 , NULL
                 , NULL
                 , NULL
                 )
	</insert>

	<delete id="tx01011_doSlipTransDELETE_IF_MROINCLO" parameterType="hashMap">
		DELETE FROM IF_MROINCLO
        WHERE MRO_TAX_NUM = #{TAX_NUM}
	</delete>


































































    <insert id="saveSLHD_AP">
		     INSERT INTO STOCSLHD (
		                     MGRNO, DOCNO, HDSEQ,
		                     DOCSEQ, DOCSTAT, BUDAT,
		                     BLDAT, ETAXNO, SNUSER,
		                     SNDATE, SNTIME, AP_DATE,
		                     VENDOR_CODE, VENDOR_NAME_LOC, AGENT_CODE,
		                     AGENT_NAME_LOC, IRS_NO, SGTXT,
		                     ISN_SLIP_YN, FISCAL_YEAR, BELNR,
		                     MSGTY, AP_NO, ORDER_NO,
		                     PRICE_AMT, VAT_AMT, SUM_AMT,
		                     PRE_AMT, SAP_SEND_STATUS, MESSAGE,
		                     STATUS, ADD_USER_ID, ADD_DATE,
		                     ADD_TIME, STJAH, STBLG,
		                     RVBUDAT ,SLIP_NM_H,CUST_EMAIL_ADDR,CUST_TEL_NO )
		     VALUES(
		     		#{MGRNO}, #{DOCNO}, #{HDSEQ},
		     		#{DOCSEQ}, #{DOCSTAT}, #{BUDAT},
		     		#{BLDAT}, #{ETAXNO}, #{SNUSER},
		     		TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS'), #{RECIEPT_DATE},
		     		#{VENDOR_CODE}, #{VENDOR_NAME_LOC}, #{AGENT_CODE},
		     		#{AGENT_NAME_LOC}, #{IRS_NO}, #{SGTXT},
		     		'Y', #{FISCAL_YEAR}, #{BELNR},
		     		#{MSGTY}, #{AP_NO}, #{PO_NO},
		     		#{PRICE_AMT}, #{VAT_AMT}, #{SUM_AMT},
		     		#{PRE_AMT}, #{SAP_SEND_STATUS}, #{MESSAGE},
		     		'I', #{USER_ID}, TO_CHAR(SYSDATE, 'YYYYMMDD'),
		     		TO_CHAR(SYSDATE, 'HH24MISS'), '', '',
		     		''	, #{SLIP_NM_H}, #{CUST_EMAIL_ADDR}, #{CUST_TEL_NO}
		     		)
	</insert>

    <insert id="saveSLDT_AP">-- 매입
			         INSERT INTO STOCSLDT (MGRNO, DOCNO, HDSEQ,
			         		DOCSEQ, BUZEI, SHKZG,
			         		HKONT
			         		,MWSKZ,
			         		ZFBDT, WRBTR, FWBAS,
			         		SGTXT, KNDNR, WW050,
			         		WW060, WW070,
							WW160,
							XREF3,
			         		ADD_USER_ID, ADD_DATE, ADD_TIME)
						SELECT
			 		  		#{MGRNO}, #{DOCNO}, #{HDSEQ},
			 				#{DOCSEQ}
			 				, CASE WHEN #{PRICE_TOTAL} <![CDATA[ < ]]> 0 THEN '3' ELSE '2' END

			 				, 'S'
			 				,CASE WHEN #{PRICE_TOTAL} <![CDATA[ < ]]> 0 THEN '1000000058' -- 매입 반품일 경우
			 				 ELSE
			 				 	CASE WHEN #{WW050} IN ('B300040','B300050') THEN '1000011534' ELSE '1000011532' END
							 END

			 				, #{TAX_TYPE},
			 				#{ZFBDT}
			 				,CASE WHEN #{PRICE_TOTAL} <![CDATA[ < ]]> 0 THEN TO_CHAR(#{TAX_TOTAL}) -- 반품일경우
			 				 ELSE
								TO_CHAR(#{PRICE_TOTAL})
			 				 END --WRBTR 금맥

			 				, TO_CHAR(#{FWBAS}),
			 				#{SGTXT}, #{KNDNR_IRS_NO}, #{WW050},
			 				#{GROUP_COMPANY_CODE}, #{ITEM_GROUP},
							#{CATEGORY_SAP},
			 				#{IRS_NO},
			 				#{USER_ID}, TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS')
						FROM DUAL
						UNION ALL
						SELECT
			 		  		#{MGRNO}, #{DOCNO}, #{HDSEQ},
			 				#{DOCSEQ}
			 				, CASE WHEN #{PRICE_TOTAL} <![CDATA[<]]> 0 THEN '2' ELSE '3' END

			 				, 'S'
			 				,'1000000082'
			 				, #{TAX_TYPE}
			 				, #{ZFBDT}
			 				, TO_CHAR(#{VAT_AMT})    --WRBTR 금맥

			 				, TO_CHAR(#{PRICE_TOTAL}),
			 				#{SGTXT}, #{KNDNR_IRS_NO}, #{WW050},
			 				#{GROUP_COMPANY_CODE}, #{ITEM_GROUP},
							#{CATEGORY_SAP},
			 				#{IRS_NO},
			 				#{USER_ID}, TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS')
						FROM DUAL
						--WHERE {TAX_TYPE} = 'DA12' -- 과세일 경우에만 넣는다.

						UNION ALL
						SELECT
			 		  		#{MGRNO}, #{DOCNO}, #{HDSEQ},
			 				#{DOCSEQ}
			 				,CASE WHEN #{PRICE_TOTAL} <![CDATA[<]]> 0 THEN '1' ELSE '1' END
			 				, 'H'

							,CASE WHEN #{PRICE_TOTAL} <![CDATA[ > ]]> 0 THEN '1000000286'
			 				 ELSE -- 매입 반품일 경우 1000000286 외상매입금 대신 아래와 같이 계정 다시 보냄.
			 				 	CASE WHEN #{WW050} IN ('B300040','B300050') THEN '1000011534' ELSE '1000011532' END
							 END

			 				, #{TAX_TYPE}
			 				,#{ZFBDT}


			 				,CASE WHEN #{PRICE_TOTAL} <![CDATA[ < ]]> 0 THEN TO_CHAR(#{PRICE_TOTAL}) -- 반품일경우
			 				 ELSE
								TO_CHAR(#{TAX_TOTAL})
			 				 END --WRBTR 금맥

			 				, TO_CHAR(#{FWBAS}),
			 				#{SGTXT}, #{KNDNR_IRS_NO}, #{WW050},
			 				#{GROUP_COMPANY_CODE}, #{ITEM_GROUP},
							#{CATEGORY_SAP},
			 				#{IRS_NO},
			 				#{USER_ID}, TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'HH24MISS')
						FROM DUAL
	</insert>



    <insert id="saveAccSlipDocuMst_AP">
		insert into BOFADM.ACC_SLIP_DOCU_MST${dgnsDbLink}
		(
			SLIP_DOCU_ID
			,SLIP_TYPE_CD
			,CMPNY_CD
			,MAKE_SSYS_ID
			,MAKE_ORGT_ID
			,MAKE_EMPL_NO
			,SLIP_MAKE_YMD
			,AUTO_SLIP_IND
			,SLIP_DCRB_IND
			,SLIP_FNNR_YMD
			,SUM_EXPL_TEXT
			,CONFM_GRUP_CD
			,WSOP_APRL_IND
			,FNNR_APRL_IND
			,SLIP_BRCH_ID
			,PTNR_BRCH_ID
			,SALE_LCAL_CD
			,SALE_STORE_CD
			,BSNS_AREA_CD
			,SALE_SLIP_IND
			,SLIP_PSTN_YMD
			,SLIP_PSTN_NO
			,EXEC_ORGT_ID
			,BUGT_ORGT_ID
			,COPL_SLIP_YN
			,TRMG_SLIP_IND
			,IF_DOCU_ID
			,SLIP_DEL_REQS_YN
			,SLIP_DEL_COMPT_YN
			,DOCU_DSUSE_YN
			,DOCU_DSUSE_YMD
			,CRT_DT
			,CRT_ID
			,CRT_IP
			,CRT_MAC
			,UPD_DT
			,UPD_ID
			,UPD_IP
			,UPD_MAC
		)values(
		    #{SEQ_ID}                                                          --SLIP_DOCU_ID
		   ,'INT-2030'														  --매입
		   ,'026'                                                                   --CMPNY_CD
		   ,'INT'                                                                   --MAKE_SSYS_ID
		   ,'1000008798'                                                                      --MAKE_ORGT_ID
		   ,#{NEW_USER_ID}                                                       --MAKE_EMPL_NO
		   ,TO_CHAR(SYSDATE, 'YYYYMMDD')                                            --SLIP_MAKE_YMD
		   ,'3'						                                          	    --AUTO_SLIP_IND
		   ,'03'						                                            --SLIP_DCRB_IND
		   ,#{BUDAT}                                            --SLIP_FNNR_YMD
		   ,#{SLIP_NM_H}                                                                      --SUM_EXPL_TEXT
		   ,''                                                                      --CONFM_GRUP_CD
		   ,''                                                                      --WSOP_APRL_IND
		   ,''                                                                      --FNNR_APRL_IND
		   ,'1000008796'                                                            --SLIP_BRCH_ID
		   ,''			                                                            --PTNR_BRCH_ID
		   ,''			                                                            --SALE_LCAL_CD
		   ,''                                                              --SALE_STORE_CD
		   ,'02'                                                               --BSNS_AREA_CD
		   ,''                                                              --SALE_SLIP_IND
		   ,TO_CHAR(SYSDATE, 'YYYYMMDD')                                                              --SLIP_PSTN_YMD
		   ,''                                                               --SLIP_PSTN_NO
		   ,''                                                               --EXEC_ORGT_ID
		   ,''                                                               --BUGT_ORGT_ID
		   ,'0'                                                               --COPL_SLIP_YN
		   ,'00'                                                              --TRMG_SLIP_IND
		   ,''                                                                 --IF_DOCU_ID
		   ,'0'                                                           --SLIP_DEL_REQS_YN
		   ,'0'                                                          --SLIP_DEL_COMPT_YN
		   ,'0'                                                              --DOCU_DSUSE_YN
		   ,''                                                             --DOCU_DSUSE_YMD
		   ,SYSDATE                                                                     --CRT_DT
		   ,#{NEW_USER_ID}                                                                      --CRT_ID
		   ,#{IP}                                                                     --CRT_IP
		   ,'00-00-00-00-00-00'                                                                    --CRT_MAC
		   ,SYSDATE                                                                     --UPD_DT
		   ,#{NEW_USER_ID}                                                                      --UPD_ID
		   ,#{IP}                                                                  --UPD_IP
		   ,'00-00-00-00-00-00'                                                                    --UPD_MAC
		)
	</insert>


    <insert id="saveAccSlipDocuDtl_AP">--매입
		INSERT INTO BOFADM.ACC_SLIP_DOCU_DTL${dgnsDbLink}
		    (
				 SLIP_DOCU_ID
				,SLIP_DOCU_SEQ
				,SLIP_PSTN_SEQ
				,LINE_LOCK_YN
				,SLIP_ACCT_ID
				,SLIP_DRCR_IND
				,SLIP_DR_AMT
				,SLIP_CR_AMT
				,SLIP_NET_AMT
				,SLIP_TAX_AMT
				,SLIP_CRNCY_IND
				,SLIP_FCRY_AMT
				,FCRY_EXRT_AMT
				,EXEC_MINC_AMT
				,SPND_ITEM_CD
				,FUND_ITEM_CD
				,SLIP_FNNR_YMD
				,SUM_EXPL_TEXT
				,EXEC_ORGT_ID
				,BUGT_ORGT_ID
				,COST_CENT_CD
				,ISSU_BRCH_ID
				,PTNR_BRCH_ID
				,PTNR_ORGT_ID
				,MNGM_BRCH_ID
				,SALE_LCAL_CD
				,SALE_STORE_CD
				,OPEN_ITEM_CD
				,SOFF_SLIP_YMD
				,SOFF_SLIP_NO
				,SOFF_SLIP_SEQ
				,BRCH_ACNO_ID
				,BRCH_BANK_CD
				,BRCH_ACNO_NO
				,MNGM_CUST_ID
				,BIZR_PRIV_NO
				,CUST_ACNO_ID
				,CUST_BANK_CD
				,CUST_ACNO_NO
				,CUST_DPSTR_USER_NM
				,CUST_CMS_CD
				,PYMT_MTHD_CD
				,EXEC_REQS_YMD
				,EXEC_REQS_AMT
				,FUND_TRAN_YMD
				,FUND_TRAN_AMT
				,FUND_TRAN_DESC
				,PTNR_ACCT_ID
				,CNNC_ACCT_ID
				,CNNC_SLIP_DESC
				,ISSU_BGN_YMD
				,ISSU_END_YMD
				,PRUF_STND_CD
				,PRUF_OCCU_YMD
				,PRUF_OCCU_NO
				,PRUF_SUM_EXPL
				,PRUF_OCCU_IND
				,VAT_KIND_CD
				,VAT_TYPE_IND
				,VAT_ACCT_ID
				,PUCH_SALE_ID
				,CUST_EMAIL_ADDR
				,CUST_TEL_NO
				,TXED_ISSU_YN
				,ESRO_TXIV_EDID
				,PUR_REQS_NO
				,SALE_REQS_NO
				,MTRL_TYPE_CD
				,ASSET_MTRL_NO
				,MEM_BQUT_IND
				,MEM_BQUT_NO
				,MEM_CARD_NO
				,GUEST_GRUP_CD
				,SALE_CTGR_CD
				,TOUR_LCAL_CD
				,EBIZ_CUST_CD
				,RESD_FRNR_CD
				,GUEST_TYPE_CD
				,GUEST_GEN_CD
				,GUEST_AGE_CD
				,CARD_CMPNY_CD
				,CARD_SALE_PRUF_NO
				,CARD_SALE_APRL_NO
				,CHRG_EMPL_NO
				,MNGM_ITEM_01_CD
				,MNGM_ITEM_01_VAL_CD
				,MNGM_ITEM_01_VAL_NM
				,MNGM_ITEM_01_VAL_DESC
				,MNGM_ITEM_02_CD
				,MNGM_ITEM_02_VAL_CD
				,MNGM_ITEM_02_VAL_NM
				,MNGM_ITEM_02_VAL_DESC
				,MNGM_ITEM_03_CD
				,MNGM_ITEM_03_VAL_CD
				,MNGM_ITEM_03_VAL_NM
				,MNGM_ITEM_03_VAL_DESC
				,MNGM_ITEM_04_CD
				,MNGM_ITEM_04_VAL_CD
				,MNGM_ITEM_04_VAL_NM
				,MNGM_ITEM_04_VAL_DESC
				,MNGM_ITEM_05_CD
				,MNGM_ITEM_05_VAL_CD
				,MNGM_ITEM_05_VAL_NM
				,MNGM_ITEM_05_VAL_DESC
				,MNGM_ITEM_06_CD
				,MNGM_ITEM_06_VAL_CD
				,MNGM_ITEM_06_VAL_NM
				,MNGM_ITEM_06_VAL_DESC
				,MNGM_ITEM_07_CD
				,MNGM_ITEM_07_VAL_CD
				,MNGM_ITEM_07_VAL_NM
				,MNGM_ITEM_07_VAL_DESC
				,MNGM_ITEM_08_CD
				,MNGM_ITEM_08_VAL_CD
				,MNGM_ITEM_08_VAL_NM
				,MNGM_ITEM_08_VAL_DESC
				,MNGM_ITEM_09_CD
				,MNGM_ITEM_09_VAL_CD
				,MNGM_ITEM_09_VAL_NM
				,MNGM_ITEM_09_VAL_DESC
				,MNGM_ITEM_10_CD
				,MNGM_ITEM_10_VAL_CD
				,MNGM_ITEM_10_VAL_NM
				,MNGM_ITEM_10_VAL_DESC
				,CRT_DT
				,CRT_ID
				,CRT_IP
				,CRT_MAC
				,UPD_DT
				,UPD_ID
				,UPD_IP
				,UPD_MAC
		)values(
				#{SEQ_ID}                                                                      --SLIP_DOCU_ID
				,#{BUZEI}                                     --SLIP_DOCU_SEQ
				,''                            				        --SLIP_PSTN_SEQ
				,'0'                            				        --LINE_LOCK_YN
				,#{HKONT}                            				        --SLIP_ACCT_ID
				,#{NEW_SHKZG}                                  --SLIP_DRCR_IND

				,#{S_AMT}           --전표 차변 금액                          --SLIP_DR_AMT

				,#{H_AMT}               --전표 대변 금액                      --SLIP_CR_AMT

				,#{FWBAS}               --SLIP_NET_AMT                      --SLIP_NET_AMT
				,CASE WHEN #{HKONT}='1000000082' THEN #{S_AMT} ELSE #{H_AMT} END --SLIP_TAX_AMT
				,'KRW'                                    --SLIP_CRNCY_IND
				,''                                    --SLIP_FCRY_AMT
				,''                                    --FCRY_EXRT_AMT
				,''                                    --EXEC_MINC_AMT
				,''                                    --SPND_ITEM_CD

				,CASE WHEN #{HKONT} = '1000000286' THEN --FUND_ITEM_CD	   자금항목    이중현요청으로 항목 추가(2016.11.11)
														(SELECT FUND_PRFT_ITEM_CD FROM BOFADM.ACC_ACCT_MNGM_INFO${dgnsDbLink}
												         WHERE CMPNY_CD = (SELECT CMPNY_CD FROM COMADM.SYS_ORGT_HIER${dgnsDbLink}
												         					WHERE ORGT_ID = '1000008796' AND ACCT_ID = '1000011532'))
				 ELSE ''
				 END                    --FUND_ITEM_CD
				,#{BUDAT}                                    --SLIP_FNNR_YMD
				,#{SGTXT}                                    --SUM_EXPL_TEXT
				,'1000008798'                                    --EXEC_ORGT_ID
				,''                                    --BUGT_ORGT_ID
				,''                                    --COST_CENT_CD
		   		,'1000008796'                    		--ISSU_BRCH_ID
		   		,''                  		     		--PTNR_BRCH_ID
				,''                                    --PTNR_ORGT_ID
				,CASE WHEN #{HKONT} = '1000000408' OR #{HKONT} = '1000000082' THEN
						(SELECT VAT_DECL_BPLC_ID FROM COMADM.SYS_ORGT_INIT${dgnsDbLink}
						 WHERE ORGT_ID = '1000008471')
				 ELSE
					'1000008471'
				 END --MNGM_BRCH_ID
				,''                                    --SALE_LCAL_CD
				,''                                    --SALE_STORE_CD
				,''                                    --OPEN_ITEM_CD
				,''                                    --SOFF_SLIP_YMD
				,''                                    --SOFF_SLIP_NO
				,''                                    --SOFF_SLIP_SEQ
				,''                                    --BRCH_ACNO_ID
				,''                                    --BRCH_BANK_CD
				,''                                    --BRCH_ACNO_NO
				,CASE WHEN #{HKONT} = '1000000408' OR #{HKONT} IN ('1000011532','1000011534','1000000058') OR #{HKONT} = '1000000082' OR #{HKONT} = '1000000286' THEN
						(	SELECT MAX(T1.CUST_ID) AS CUST_ID
							  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
								 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
							  WHERE T1.CUST_ID = T2.CUST_ID(+)
							    AND T1.USE_YN = '1'
							    AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  ELSE
							''
					  END -- MNGM_CUST_ID
				,''                                    --BIZR_PRIV_NO
				,''                                    --CUST_ACNO_ID
				,#{BANK_CODE}                                    --CUST_BANK_CD
				,CASE WHEN #{HKONT} IN ('1000011532','1000011534','1000000058') OR #{HKONT} = '1000000286' THEN #{BANK_ACCOUNT_NO} ELSE '' END --CUST_ACNO_NO
				,CASE WHEN #{HKONT} IN ('1000011532','1000011534','1000000058') OR #{HKONT} = '1000000286' THEN #{DPSTR_USER_NM} ELSE '' END   --DPSTR_USER_NM
				,''                                    --CUST_CMS_CD
				,CASE WHEN #{HKONT} = '1000000286' THEN '01' ELSE '' END --PYMT_MTHD_CD




				,#{EXEC_REQS_YMD}                                    --EXEC_REQS_YMD






				,CASE WHEN #{HKONT} = '1000000286' THEN #{H_AMT} ELSE null END --EXEC_REQS_AMT
				,TO_CHAR(SYSDATE+3,'YYYYMMDD')                                    --FUND_TRAN_YMD
				,CASE WHEN #{HKONT} = '1000000286' THEN #{H_AMT} ELSE null END --FUND_TRAN_AMT
				,''                                    --FUND_TRAN_DESC
				,CASE WHEN #{HKONT} = '1000011435' THEN '1000011918'
				      WHEN #{HKONT} = '1000000286' THEN CASE WHEN #{WW050} IN ('B300040','B300050') THEN '1000011534' ELSE '1000011532' END -- 대표계정과목   이중현요청으로 항목 추가(2016.11.11) 외상매입
				 ELSE '' END --PTNR_ACCT_ID



				,CASE WHEN #{HKONT} = '1000000408' THEN '1000011918'
				      WHEN #{HKONT} = '1000000082' THEN CASE WHEN #{WW050} IN ('B300040','B300050') THEN '1000011534' ELSE '1000011532' END
				 ELSE '' END --CNNC_ACCT_ID


				,CASE WHEN #{HKONT} = '1000000408' OR #{HKONT} = '1000000082' THEN
																				CASE WHEN #{BAMPUM_YN} = 'Y' THEN '1' ELSE '2' END
																			  ELSE '' END --CNNC_SLIP_DESC

				,''                                    --ISSU_BGN_YMD
				,''                                    --ISSU_END_YMD

				,CASE WHEN #{HKONT} = '1000012324' OR #{HKONT} = '1000012325' THEN 'D000'
					  WHEN #{HKONT} = '1000011532' OR #{HKONT} = '1000011534' OR #{HKONT} = '1000000058'  THEN 'C000'
				 ELSE #{MWSKZ} END --PRUF_STND_CD
				,#{BUDAT}                              --PRUF_OCCU_YMD
				,''                                    --PRUF_OCCU_NO
				,''                                    --PRUF_SUM_EXPL
				,''                                    --PRUF_OCCU_IND
				,''                                    --VAT_KIND_CD
				,''                                    --VAT_TYPE_IND
				,''                                    --VAT_ACCT_ID
				,''                                    --PUCH_SALE_ID
				,#{CUST_EMAIL_ADDR}                    --CUST_EMAIL_ADDR
				,#{CUST_TEL_NO}                        --CUST_TEL_NO
				,CASE WHEN #{HKONT} = '1000000082' THEN 'Y' ELSE '' END     --TXED_ISSU_YN
				,CASE WHEN #{HKONT} = '1000000082' THEN #{ESRO_TXIV_EDID} ELSE '' END     --ESRO_TXIV_EDID
				,''                                    --PUR_REQS_NO
				,''                                    --SALE_REQS_NO
				,''                                    --MTRL_TYPE_CD
				,''                                    --ASSET_MTRL_NO
				,''                                    --MEM_BQUT_IND
				,''                                    --MEM_BQUT_NO
				,''                                    --MEM_CARD_NO
				,''                                    --GUEST_GRUP_CD
				,''                                    --SALE_CTGR_CD
				,''                                    --TOUR_LCAL_CD
				,''                                    --EBIZ_CUST_CD
				,''                                    --RESD_FRNR_CD
				,''                                    --GUEST_TYPE_CD
				,''                                    --GUEST_GEN_CD
				,''                                    --GUEST_AGE_CD
				,''                                    --CARD_CMPNY_CD
				,''                                    --CARD_SALE_PRUF_NO
				,''                                    --CARD_SALE_APRL_NO
				,''                                    --CHRG_EMPL_NO
				,CASE WHEN #{HKONT} = '1000000286' THEN '001'
					  WHEN #{HKONT} = '1000011918' THEN '600'
					  WHEN #{HKONT} = '1000011435' THEN '001'
					  WHEN #{HKONT} = '1000000408' THEN '001'
					  WHEN #{HKONT} = '1000000082' THEN '001'
					  WHEN #{HKONT} = '1000011532' THEN '001'
					  WHEN #{HKONT} = '1000011534' THEN '001'
					  WHEN #{HKONT} = '1000000058' THEN '001'

				 ELSE '' END --MNGM_ITEM_01_CD
				,CASE WHEN #{HKONT} = '1000000286' THEN
												(SELECT MAX(T1.CUST_ID) AS CUST_ID
												  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
													 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
												  WHERE
												     T1.CUST_ID = T2.CUST_ID(+)
												     AND T1.USE_YN = '1'
												     AND (T1.BIZR_PRIV_NO = #{XREF3} ))

                      WHEN #{HKONT} = '1000011918' THEN
													CASE WHEN #{WW050} = 'B300050' THEN '2000005631' ELSE '1000009022' END -- 외부식자재일경우

					  WHEN #{HKONT} = '1000011435' THEN
										(	SELECT MAX(T1.CUST_ID) AS CUST_ID
											  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
												 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
											  WHERE
											     T1.CUST_ID = T2.CUST_ID(+)
											     AND T1.USE_YN = '1'
											     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  WHEN #{HKONT} = '1000000408' THEN
										 (SELECT MAX(T1.CUST_ID) AS CUST_ID
										    FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
											   , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
										  WHERE
										     T1.CUST_ID = T2.CUST_ID(+)
										     AND T1.USE_YN = '1'
										     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  WHEN #{HKONT} = '1000000082' THEN
										 (SELECT MAX(T1.CUST_ID) AS CUST_ID
										    FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
											   , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
										  WHERE
										     T1.CUST_ID = T2.CUST_ID(+)
										     AND T1.USE_YN = '1'
										     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  WHEN #{HKONT} IN ('1000011532','1000011534','1000000058') THEN
										(SELECT MAX(T1.CUST_ID) AS CUST_ID
										   FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
											  , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
										  WHERE
										     T1.CUST_ID = T2.CUST_ID(+)
										     AND T1.USE_YN = '1'
										     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
				 ELSE '' END -- MNGM_ITEM_01_VAL_CD
				,CASE WHEN #{HKONT} = '1000000286' THEN
												(SELECT MAX(T1.CUST_NM) AS CUST_ID
												  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
													 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
												  WHERE
												     T1.CUST_ID = T2.CUST_ID(+)
												     AND T1.USE_YN = '1'
												     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
                      WHEN #{HKONT} = '1000011918' THEN (SELECT ORGT_NM FROM COMADM.SYS_ORGT_INIT${dgnsDbLink}
                      									  WHERE ORGT_ID = CASE WHEN #{WW050} = 'B300050' THEN '2000005631' ELSE '1000009022' END )
					  WHEN #{HKONT} = '1000011435' THEN
										(	SELECT MAX(T1.CUST_NM) AS CUST_ID
											  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
												 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
											  WHERE
											     T1.CUST_ID = T2.CUST_ID(+)
											     AND T1.USE_YN = '1'
											     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  WHEN #{HKONT} = '1000000408' THEN
										 (SELECT MAX(T1.CUST_NM) AS CUST_ID
										   FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
											  , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
										  WHERE
										     T1.CUST_ID = T2.CUST_ID(+)
										     AND T1.USE_YN = '1'
										     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  WHEN #{HKONT} = '1000000082' THEN
										 (SELECT MAX(T1.CUST_NM) AS CUST_ID
										   FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
											  , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
										  WHERE
										     T1.CUST_ID = T2.CUST_ID(+)
										     AND T1.USE_YN = '1'
										     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
					  WHEN #{HKONT} IN ('1000011532','1000011534','1000000058') THEN
										(SELECT MAX(T1.CUST_NM) AS CUST_ID
										   FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
											  , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
										  WHERE
										     T1.CUST_ID = T2.CUST_ID(+)
										     AND T1.USE_YN = '1'
										     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
				 ELSE '' END -- MNGM_ITEM_01_VAL_NM

				,(SELECT MAX(T1.CUST_NM) AS CUST_ID
				   FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
					  , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
				  WHERE
				     T1.CUST_ID = T2.CUST_ID(+)
				     AND T1.USE_YN = '1'
				     AND (T1.BIZR_PRIV_NO = #{XREF3} )) --MNGM_ITEM_01_VAL_DESC
			,CASE WHEN #{HKONT} = '1000011918' THEN '901'
				  WHEN #{HKONT} = '1000011435' THEN '600'
				  ELSE '' END -- MNGM_ITEM_02_CD

			,CASE WHEN #{HKONT} = '1000011918' THEN CASE WHEN #{WW050} = 'B300010' THEN '0101'
			 										ELSE '' END
				  WHEN #{HKONT} = '1000011435' THEN CASE WHEN #{WW050} = 'B300050' THEN '2000005631' ELSE '1000008799' END -- 외부식자재일경우 ''
			 ELSE '' END --MNGM_ITEM_02_VAL_CD


			,CASE WHEN #{HKONT} = '1000011918' THEN CASE WHEN #{WW050} = 'B300010' THEN '내부고객사 일반자재'
			 										ELSE '' END
				  WHEN #{HKONT} = '1000011435' THEN '영업장없음'
			 ELSE '' END --MNGM_ITEM_02_VAL_NM
			 ,''                                    --MNGM_ITEM_02_VAL_DESC
			,CASE WHEN #{HKONT} = '1000011918' THEN '001' ELSE '' END -- MNGM_ITEM_03_CD

			,CASE WHEN #{HKONT} = '1000011918' THEN (	SELECT
														     MAX(T1.CUST_ID) AS CUST_ID
														  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
															 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
														  WHERE
														     T1.CUST_ID = T2.CUST_ID(+)
														     AND T1.USE_YN = '1'
														     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
			 ELSE '' END --MNGM_ITEM_03_VAL_CD

			,CASE WHEN #{HKONT} = '1000011918' THEN (	SELECT
														     MAX(T1.CUST_NM) AS CUST_ID
														  FROM BOFADM.ACC_CUST_INIT_INFO_DAMO${dgnsDbLink} T1
															 , BOFADM.ACC_CUST_ACNO_INFO_DAMO${dgnsDbLink} T2
														  WHERE
														     T1.CUST_ID = T2.CUST_ID(+)
														     AND T1.USE_YN = '1'
														     AND (T1.BIZR_PRIV_NO = #{XREF3} ))
			 ELSE '' END --MNGM_ITEM_03_VAL_NM

				,''                                    --MNGM_ITEM_03_VAL_DESC
				,''                                    --MNGM_ITEM_04_CD
				,''                                    --MNGM_ITEM_04_VAL_CD
				,''                                    --MNGM_ITEM_04_VAL_NM
				,''                                    --MNGM_ITEM_04_VAL_DESC
				,''                                    --MNGM_ITEM_05_CD
				,''                                    --MNGM_ITEM_05_VAL_CD
				,''                                    --MNGM_ITEM_05_VAL_NM
				,''                                    --MNGM_ITEM_05_VAL_DESC
				,''                                    --MNGM_ITEM_06_CD
				,''                                    --MNGM_ITEM_06_VAL_CD
				,''                                    --MNGM_ITEM_06_VAL_NM
				,''                                    --MNGM_ITEM_06_VAL_DESC
				,''                                    --MNGM_ITEM_07_CD
				,''                                    --MNGM_ITEM_07_VAL_CD
				,''                                    --MNGM_ITEM_07_VAL_NM
				,''                                    --MNGM_ITEM_07_VAL_DESC
				,''                                    --MNGM_ITEM_08_CD
				,''                                    --MNGM_ITEM_08_VAL_CD
				,''                                    --MNGM_ITEM_08_VAL_NM
				,''                                    --MNGM_ITEM_08_VAL_DESC
				,''                                    --MNGM_ITEM_09_CD
				,''                                    --MNGM_ITEM_09_VAL_CD
				,''                                    --MNGM_ITEM_09_VAL_NM
				,''                                    --MNGM_ITEM_09_VAL_DESC
				,''                                    --MNGM_ITEM_10_CD
				,''                                    --MNGM_ITEM_10_VAL_CD
				,''                                    --MNGM_ITEM_10_VAL_NM
				,''                                    --MNGM_ITEM_10_VAL_DESC
		   ,SYSDATE               --CRT_DT
		   ,#{NEW_USER_ID}        --CRT_ID
		   ,#{IP}                 --CRT_IP
		   ,'00-00-00-00-00-00'   --CRT_MAC
		   ,SYSDATE               --UPD_DT
		   ,#{NEW_USER_ID}        --UPD_ID
		   ,#{IP}                 --UPD_IP
		   ,'00-00-00-00-00-00'   --UPD_MAC
		)


--1000011532
--1000011534
--1000000058
--1000000082
	</insert>

    <select id="getSeqId_AP" parameterType="hashMap" resultType="string">
		SELECT TRIM(TO_CHAR(BOFADM.SEQ_ACC_SLIP_DOCU_MST_01.NEXTVAL${dgnsDbLink},'0000000000')) as SEQ
		  FROM DUAL
	</select>

    <select id="getSapList_AP" parameterType="hashMap" resultType="hashMap">
	 SELECT
	             SEQ_ID,SYSID, APPCD, MGRNO,
	             DOCNO, HDSEQ, DOCPROS,
	             DOCSTAT, XREVERSAL, RVBUDAT,
	             BUKRS, BELNR, BUDAT,
	             BLDAT, WAERS, KURSF,
	             BUPLA, ETAXNO, SNUSER,
	             SNDATE, SNTIME, BUZEI AS BUZEI,
	             HKONT, XREF3,
	             NEWKO, MWSKZ,
	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) NOT IN ('4', '5', '6', '7') THEN '9010'
	                     ELSE '' END AS GSBER,
	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) BETWEEN '4' AND '7' THEN SAPCD
	                     ELSE '' END AS KOSTL,
	              KNDNR,


				 WW050,

	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) BETWEEN '4' AND '7' THEN WW060
	                     ELSE '' END AS WW060,
	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) BETWEEN '4' AND '7' THEN WW070
	                     ELSE '' END AS WW070,
	             CASE WHEN HKONT IS NOT NULL AND SUBSTR(TO_NUMBER(HKONT),1,1) BETWEEN '4' AND '7' THEN WW160
	                     ELSE '' END AS WW160,
	             SAPCD as ZUONR, AUFNR,
	             ZFBDT, ZTERM, ZLSCH,
	             TRITEM, XNEGP, WRBTR



	             ,CASE WHEN BAMPUM_YN = 'Y' THEN 'S' ELSE SHKZG END SHKZG    -- 반품이면 전부 차변으로 넣는다.




	             ,CASE WHEN BAMPUM_YN = 'Y' AND HKONT = '1000000058' THEN S_AMT * -1
				       WHEN BAMPUM_YN = 'Y' AND HKONT = '1000000082' THEN S_AMT
				       WHEN BAMPUM_YN = 'Y' AND SHKZG = 'H' THEN H_AMT
	                   ELSE S_AMT
	                   END  S_AMT--전표 차변 금액



	             ,CASE WHEN BAMPUM_YN = 'Y' THEN 0 ELSE H_AMT END  H_AMT     -- 반품이변 대변 금액 0 --전표 대변 금액


	             ,DMBTR
	             ,WMWST
	             ,MWSTS
	             ,FWBAS, HWBAS, SGTXT,
	             WW090, WW100,
	             WW110, WW130, WW140,
	             WW150, WW170
	             ,BAMPUM_YN
	 FROM
	         (
	             SELECT
	                     '' as SEQ_ID,'31' AS SYSID, '' AS XREVERSAL, MAX(SLHD.MGRNO)AS MGRNO, MAX(SLHD.HDSEQ)AS HDSEQ,

		                     MAX(SLHD.AR_NO) AS DOCNO,
		                     'PARK' AS DOCPROS, 'PARK' AS DOCSTAT, '313001' AS APPCD,

	                     '' AS RVBUDAT, '3000' AS BUKRS, '' AS BELNR,
	                      MAX(SLHD.BUDAT)AS BUDAT, MAX(SLHD.BLDAT) AS BLDAT, 'KRW' AS WAERS,
	                      '' AS KURSF, '3000' AS BUPLA, '' AS ETAXNO,
	                      MAX((SELECT EMPLOYEE_NUM FROM STOCUSER WHERE GATE_CD='100' AND USER_ID=SLHD.ADD_USER_ID)) AS SNUSER,
	 					  TO_CHAR(SYSDATE, 'YYYYMMDD') AS SNDATE, TO_CHAR(SYSDATE, 'HH24MISS') AS SNTIME,
	                      MAX(SLDT.BUZEI)AS BUZEI, MAX(SLDT.SHKZG)AS SHKZG, SLDT.HKONT,
	                      MAX(SLDT.XREF3)AS XREF3, '' AS NEWKO, MAX(SLDT.MWSKZ)AS MWSKZ,
	                      '9010' AS GSBER, '3000' AS KOSTL, '3000' AS ZUONR,
	                      '' AS AUFNR, MAX(SLDT.ZFBDT)AS ZFBDT, '' AS ZTERM,
	                      '' AS ZLSCH, '' AS TRITEM, '' AS XNEGP,
	                      SUM(SLDT.WRBTR)AS WRBTR



	                      ,SUM(DECODE(SLDT.SHKZG,'S',SLDT.WRBTR,0)) AS S_AMT --전표 차변 금액


	                      ,SUM(DECODE(SLDT.SHKZG,'H',SLDT.WRBTR,0)) AS H_AMT --전표 대변 금액

	                      ,CASE WHEN MAX((SELECT WRBTR FROM STOCSLDT WHERE MGRNO = #{MGRNO} AND BUZEI='1')) <![CDATA[ < ]]> 0 THEN 'Y' ELSE 'N' END BAMPUM_YN

	                      , '' AS DMBTR, '' WMWST,
	                      '' AS MWSTS, SUM(SLDT.FWBAS)AS FWBAS, '' AS HWBAS,
	                      MAX(SLDT.SGTXT)AS SGTXT, MAX(SLDT.KNDNR)AS KNDNR, MAX(SLDT.WW050)AS WW050,
	                      MAX(SLDT.WW060)AS WW060,
	                      MAX((SELECT SAPCD FROM STOCSLMP WHERE ISN_TYPE ='SAP07' AND ISN_CODE = SLDT.WW070)) AS WW070,
	                      '' AS WW090, '' AS WW100, '' AS WW110,
	                      '' AS WW130, '' AS WW140, '' AS WW150,
	                      MAX(SLDT.WW160)AS WW160, '' AS WW170,
	                      '' SAPCD
	             FROM STOCSLHD SLHD, STOCSLDT SLDT
	             WHERE SLDT.MGRNO = SLHD.MGRNO
	             AND SLDT.DOCNO = SLHD.DOCNO
	             AND SLDT.HDSEQ = SLHD.HDSEQ
	             AND SLDT.DOCSEQ = SLHD.DOCSEQ
	             AND SLHD.MGRNO = #{MGRNO}
	            GROUP BY SLDT.HKONT
	         )
			ORDER BY BUZEI--FWBAS,WW070 DESC


    </select>
</mapper>