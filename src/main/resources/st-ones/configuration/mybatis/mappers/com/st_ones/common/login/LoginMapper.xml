<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.st_ones.common.login.LoginMapper">

    <resultMap id="baseInfoResult" type="baseInfo">
        <result property="gateCd" column="GATE_CD"/>
        <result property="manageCd" column="MANAGE_CD"/>
        <result property="manageComNm" column="MANAGE_COM_NM"/>

        <result property="userId" column="USER_ID"/>
        <result property="userNm" column="USER_NM" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />
        <result property="userNmEng" column="USER_NM_ENG" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler"/>

        <result property="companyCd" column="COMPANY_CD"/>
        <result property="companyNm" column="COMPANY_NM" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />
        <result property="companyNmEng" column="COMPANY_NM_ENG" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />
		<result property="erpIfFlag" column="ERP_IF_FLAG"/>

        <result property="plantCd" column="PLANT_CD"/>
        <result property="plantNm" column="PLANT_NM" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />
        <result property="divisionCd" column="DIVISION_CD"/>
        <result property="divisionNm" column="DIVISION_NM" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />
        <result property="deptCd" column="DEPT_CD"/>
        <result property="deptNm" column="DEPT_NM" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />
        <result property="deptNmEng" column="DEPT_NM_ENG" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler"/>
        <result property="partCd" column="PART_CD"/>
        <result property="partNm" column="PART_NM" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />
        <result property="dutyCd" column="DUTY_CD" />
        <result property="dutyNm" column="DUTY_NM" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />

        <result property="email" column="EMAIL"/>
        <result property="telNum" column="TEL_NUM"/>
        <result property="cellNum" column="CELL_NUM"/>
        <result property="faxNum" column="FAX_NUM"/>
        <result property="userType" column="USER_TYPE"/>
        <result property="langCd" column="LANG_CD"/>
        <result property="isDev" column="IS_DEV"/>
        <result property="workType" column="WORK_TYPE"/>
        <result property="databaseCd" column="DATABASE_CD"/>
        <result property="grantedAuthCd" column="GRANTED_AUTH_CD"/>
        <result property="actionAuthCd" column="ACTION_AUTH_CD"/>
        <result property="ctrlType" column="CTRL_TYPE"/>
        <result property="ctrlCd" column="CTRL_CD"/>
        <result property="countryCd" column="COUNTRY_CD"/>
        <result property="userGmt" column="GMT_CD"/>
        <result property="dateFormat" column="USER_DATE_FORMAT_CD"/>
        <result property="lastLoginDate" column="VALID_LAST_LOGIN_DATE"/>
        <result property="irsNum" column="IRS_NUM"/>
        <result property="dateValueFormat" column="USER_DATE_VAULE_FORMAT"/>
        <result property="numberFormat" column="USER_NUMBER_FORMAT_CD"/>
        <result property="validUserProfile" column="VALID_USER_PROFILE"/>
        <result property="superUserFlag" column="SUPER_USER_FLAG"/>
        <result property="mngYn" column="MNG_YN"/>
        <result property="accCd" column="ACC_CODE"/>
        <result property="autoPoFlag" column="AUTO_PO_FLAG"/>
        <result property="blockFlag" column="BLOCK_FLAG"/>
        <result property="budgetDeptCode" column="BUDGET_DEPT_CD"/>
        <result property="budgetFlag" column="BUDGET_FLAG"/>
        <result property="buyerApproveUseFlag" column="APPROVE_USE_FLAG"/>
        <result property="buyerBudgetUseFlag" column="BUDGET_USE_FLAG"/>
        <result property="buyerMySiteFlag" column="BUYER_MY_SITE_FLAG"/>
        <result property="buyerTierCode" column="TIER_CD"/>
        <result property="buyerWmsFlag" column="WMS_FLAG"/>
        <result property="financialFlag" column="FINANCIAL_FLAG"/>
        <result property="grFlag" column="GR_FLAG"/>
        <result property="mailFlag" column="MAIL_FLAG"/>
        <result property="mySiteFlag" column="MY_SITE_FLAG"/>
        <result property="selectFlag" column="SELECT_FLAG"/>
        <result property="smsFlag" column="SMS_FLAG"/>
        <result property="wmsFlag" column="WMS_FLAG"/>
        <result property="zipCd" column="ZIP_CD"/>
        <result property="addr1" column="ADDR1"/>
        <result property="addr2" column="ADDR2"/>
        <result property="employeeNum" column="EMPLOYEE_NUM" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />
        <result property="positionNm" column="POSITION_NM" typeHandler="com.st_ones.common.mybatis.EverStringTypeHandler" />
        <result property="csdmSeq" column="CSDM_SEQ"/>
        <result property="delyNm" column="DELY_NM"/>

        <result property="cublSeq" column="CUBL_SEQ"/>
        <result property="plantFlag" column="PLANT_FLAG"/>
        <result property="costCenterFlag" column="COST_CENTER_FLAG"/>
        <result property="sourcingAutoPoFlag" column="SOURCING_AUTO_PO_FLAG"/>
        <result property="oldCustCd" column="OLD_CUST_CD"/>
        <result property="userAutoPoFlag" column="USER_AUTO_PO_FLAG"/>
        <result property="apchFlag" column="APCH_FLAG"/>
        <result property="deptPriceFlag" column="DEPT_PRICE_FLAG"/>
        <result property="relatYn" column="RELAT_YN"/>
        <result property="mUserId" column="M_USER_ID"/>
        <result property="agreeYn" column="AGREE_YN"/>
    </resultMap>

    <select id="getNoticeListPopup" parameterType="hashmap" resultType="java.util.Map">
        SELECT A.*
		FROM (
		    SELECT
		          NOTC.NOTICE_NUM
		        , NOTC.NOTICE_TEXT_NUM
		        , NOTC.GATE_CD
                , NOTC.FIXED_TOP_FLAG
                , NOTC.REG_DATE
                , NOTC.SUBJECT
		     FROM STOCNOTC NOTC
		    WHERE NOTC.GATE_CD = #{ses.gateCd}
		      AND NOTC.DEL_FLAG = '0'
		      AND NOTC.NOTICE_TYPE IN (#{NOTICE_TYPE})
		      AND NOTC.USER_TYPE IN ('USNA', #{USER_TYPE})
		      AND <include refid="com.sql.toDateChar"/>(NOTC.START_DATE, 'yyyyMMdd') <![CDATA[<=]]>  <include refid="com.sql.toDateChar"/>(<include refid="com.sql.sysdate"/>, 'yyyyMMdd')
		      AND <include refid="com.sql.toDateChar"/>(NOTC.END_DATE, 'yyyyMMdd') <![CDATA[>=]]> <include refid="com.sql.toDateChar"/>(<include refid="com.sql.sysdate"/>, 'yyyyMMdd')
		) A
        ORDER BY <include refid="com.sql.nvl"/>(A.FIXED_TOP_FLAG, '0') DESC, A.REG_DATE DESC, A.NOTICE_NUM DESC, A.SUBJECT
    </select>

    <select id="getVendorUserList" parameterType="hashMap" resultType="hashMap">
    	SELECT
    		USER_ID
    	FROM STOCUSER
    	WHERE USER_TYPE = 'S'
    	  AND USER_ID = '2208860712'
	</select>

	<!-- 로그인 사용자의 유형 가져오기 -->
	<select id="findUserId" parameterType="loginSearch" resultType="string">
        SELECT MAX(A.USER_TYPE) AS USER_TYPE
          FROM (
            SELECT USER_TYPE FROM STOCUSER
             WHERE GATE_CD  = #{gateCd}
               AND USER_ID  = UPPER(#{userId})
               AND USE_FLAG = '1'
               AND DEL_FLAG = '0'

            UNION ALL

            SELECT USER_TYPE FROM STOCCVUR
             WHERE GATE_CD  = #{gateCd}
               AND USER_ID  = UPPER(#{userId})
               AND USE_FLAG = '1'
               AND <include refid="com.sql.nvl"/>(BLOCK_FLAG, '0') = '0'
               AND DEL_FLAG = '0'
        ) A
    </select>

    <select id="findUserIdPW" parameterType="loginSearch" resultType="string">
        SELECT MAX(A.USER_TYPE) AS USER_TYPE
          FROM (
            SELECT USER_TYPE FROM STOCUSER
             WHERE GATE_CD  = #{gateCd}
               AND USER_ID  = UPPER(#{userId})
               AND USE_FLAG = '1'
               AND DEL_FLAG = '0'
            <if test="sessionChange != 'true' and ssoFlag != 'true'">
               AND PASSWORD = #{password}
            </if>

            UNION ALL

            SELECT USER_TYPE FROM STOCCVUR
             WHERE GATE_CD  = #{gateCd}
               AND USER_ID  = UPPER(#{userId})
               AND USE_FLAG = '1'
               AND <include refid="com.sql.nvl"/>(BLOCK_FLAG, '0') = '0'
               AND DEL_FLAG = '0'
            <if test="sessionChange != 'true' and ssoFlag != 'true'">
               AND PASSWORD = #{password}
            </if>
        ) A
    </select>

	<!-- 로그인 사용자의 유형 가져오기 -->
	<select id="findUserType" parameterType="loginSearch" resultType="java.lang.String">

		SELECT A.USER_TYPE
		  FROM (
		      SELECT USER_TYPE FROM STOCUSER
		       WHERE GATE_CD  = #{GATE_CD}
		         AND USER_ID  = UPPER(#{USER_ID})
		         AND USE_FLAG = '1'
		         AND DEL_FLAG = '0'

		      UNION ALL

		      SELECT USER_TYPE FROM STOCCVUR
		       WHERE GATE_CD  = #{GATE_CD}
		         AND USER_ID  = UPPER(#{USER_ID})
		         AND USE_FLAG = '1'
               	 AND <include refid="com.sql.nvl"/>(BLOCK_FLAG, '0') = '0'
		         AND DEL_FLAG = '0'
		  ) A
    </select>

	<!-- 개인정보 취급방침 -->
    <select id="checkAgree" parameterType="hashMap" resultType="java.lang.String">

        SELECT A.AGREE_YN
          FROM (
            SELECT <include refid="com.sql.nvl"/>(AGREE_YN,'0') AS  AGREE_YN
                 , USER_ID
              FROM STOCUSER
             WHERE GATE_CD  = <include refid="com.sql.gateCd"/>
               AND USER_ID  = upper(#{USER_ID})
               AND USE_FLAG = '1'
               AND DEL_FLAG = '0'

            UNION ALL

            SELECT <include refid="com.sql.nvl"/>(AGREE_YN,'0') AS  AGREE_YN
                 , USER_ID
              FROM STOCCVUR
             WHERE GATE_CD  = <include refid="com.sql.gateCd"/>
               AND USER_ID  = upper(#{USER_ID})
               AND USE_FLAG = '1'
               AND <include refid="com.sql.nvl"/>(BLOCK_FLAG, '0') = '0'
               AND DEL_FLAG = '0'
          ) A
    </select>

    <update id="ConfirmAgree" parameterType="hashMap">

        UPDATE STOCUSER
           SET AGREE_YN = #{checkYN}
             , AGREE_YN_DATE = <include refid="com.sql.sysdate"/>
         WHERE GATE_CD = #{GATE_CD}
           AND USER_ID = #{USER_ID}
    </update>

    <update id="ConfirmAgree_BS" parameterType="hashMap">

        UPDATE STOCCVUR
           SET AGREE_YN = #{checkYN}
             , AGREE_YN_DATE = <include refid="com.sql.sysdate"/>
         WHERE GATE_CD = #{GATE_CD}
           AND USER_ID = #{USER_ID}
    </update>

	<!-- 운영사 사용자 일반 로그인 -->
    <select id="getUserInfoB" parameterType="loginSearch" resultMap="baseInfoResult">

		SELECT  UR.GATE_CD
              , UR.COMPANY_CD AS MANAGE_CD
              ,<include refid="com.sql.dbo"/>getUserCompanyName(#{gateCd}, UR.COMPANY_CD, 'C', #{langCd}) AS MANAGE_COM_NM
              , UR.USER_ID
              ,(CASE WHEN #{langCd} = 'KO' THEN UR.USER_NM ELSE UR.USER_NM_ENG END) AS USER_NM
              , UR.USER_NM_ENG
              , UR.COMPANY_CD
              ,<include refid="com.sql.dbo"/>getUserCompanyName(#{gateCd}, UR.COMPANY_CD, 'C', #{langCd}) AS COMPANY_NM
              ,<include refid="com.sql.dbo"/>getUserCompanyName(#{gateCd}, UR.COMPANY_CD, 'C', 'EN') AS COMPANY_NM_ENG
              ,<include refid="com.sql.nvl"/>(UR.PLANT_CD, '10') AS PLANT_CD
              ,<include refid="com.sql.dbo"/>getUserPlantName(#{gateCd}, UR.USER_ID, #{langCd}) AS PLANT_NM
              , UR.DEPT_CD
              ,<include refid="com.sql.dbo"/>getUserDeptName(#{gateCd}, UR.USER_ID, #{langCd}) AS DEPT_NM
              ,<include refid="com.sql.dbo"/>getUserDeptName(#{gateCd}, UR.USER_ID, 'EN') AS DEPT_NM_ENG
              , '' AS ACC_CODE
              , UR.EMAIL
              , UR.TEL_NUM
              , UR.CELL_NUM
              , UR.USER_TYPE
              , UR.LANG_CD
              , UR.WORK_TYPE
              , UR.COUNTRY_CD
              , UR.GMT_CD
              ,<include refid="com.sql.nvl"/>(UR.PW_WRONG_CNT,'0') AS PW_WRONG_CNT
              , UR.DUTY_CD
              , UR.EMPLOYEE_NUM
              , UR.DUTY_NM
              ,(SELECT CD.CODE_DESC FROM STOCCODD CD
                 WHERE CD.GATE_CD   = UR.GATE_CD
                   AND CD.LANG_CD   = UR.LANG_CD
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = UR.USER_DATE_FORMAT_CD) AS USER_DATE_FORMAT_CD
              ,(SELECT REPLACE(CD.CODE_DESC, '/', '') FROM STOCCODD CD
                 WHERE CD.GATE_CD   = UR.GATE_CD
                   AND CD.LANG_CD   = UR.LANG_CD
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = UR.USER_DATE_FORMAT_CD) AS USER_DATE_VAULE_FORMAT
              ,(SELECT CD.CODE_DESC FROM STOCCODD CD
                 WHERE CD.GATE_CD   = UR.GATE_CD
                   AND CD.LANG_CD   = UR.LANG_CD
                   AND CD.CODE_TYPE = 'M055'
                   AND CD.CODE      = UR.USER_NUMBER_FORMAT_CD) AS USER_NUMBER_FORMAT_CD
              , #{databaseCd} AS DATABASE_CD
		      ,(SELECT MAX(USAP.AUTH_CD)
		          FROM STOCUSAP USAP
		         WHERE USAP.GATE_CD  = UR.GATE_CD
		           AND USAP.USER_ID  = UR.USER_ID
		           AND USAP.DEL_FLAG = '0') AS GRANTED_AUTH_CD
              ,(SELECT MAX(USAC.ACTION_PROFILE_CD)
                  FROM STOCUSAC USAC
                 WHERE USAC.GATE_CD  = UR.GATE_CD
                   AND USAC.USER_ID  = UR.USER_ID
                   AND USAC.DEL_FLAG = '0') AS ACTION_AUTH_CD
			<if test="_databaseId == 'oracle'">
              , CASE WHEN (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = UR.GATE_CD
                              AND BACP.BUYER_CD     = UR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = UR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = UR.GATE_CD
                            AND BACP.BUYER_CD     = UR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = UR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
			<if test="_databaseId == 'mysql'">
              , CASE WHEN (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = UR.GATE_CD
                              AND BACP.BUYER_CD     = UR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = UR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = UR.GATE_CD
                            AND BACP.BUYER_CD     = UR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = UR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
              ,(SELECT CASE WHEN COUNT(USAC.GATE_CD) = 1 THEN 'true' ELSE 'false' END
                  FROM STOCUSAC USAC
                 WHERE USAC.GATE_CD  = UR.GATE_CD
                   AND USAC.USER_ID  = UR.USER_ID
                   AND USAC.DEL_FLAG = '0'
                   AND <include refid="com.sql.sysdate"/> BETWEEN <include refid="com.sql.nvl"/>(USAC.VALID_FROM_DATE, <include refid="com.sql.sysdate"/>) AND <include refid="com.sql.nvl"/>(USAC.VALID_TO_DATE, <include refid="com.sql.sysdate"/>)) AS VALID_USER_PROFILE
              , UR.SUPER_USER_FLAG
              , UR.POSITION_NM
              , '0' AS MNG_YN
              , '0' AS AUTO_PO_FLAG
              , '0' AS BLOCK_FLAG
              , ''  AS BUDGET_DEPT_CD
              , '0' AS BUDGET_FLAG
              , '0' AS APPROVE_USE_FLAG
              , '0' AS BUDGET_USE_FLAG
              , '0' AS BUYER_MY_SITE_FLAG
              , ''  AS TIER_CD
              , '0' AS WMS_FLAG
              , '0' AS FINANCIAL_FLAG
              , '0' AS GR_FLAG
              , '0' AS MAIL_FLAG
              , '0' AS MY_SITE_FLAG
              , '0' AS SELECT_FLAG
              , '0' AS SMS_FLAG
              , '0' AS WMS_FLAG
              , ''  AS ZIP_CD
              , ''  AS ADDR1
              , ''  AS ADDR2
              , #{isDev} AS IS_DEV
              , null AS CSDM_SEQ
              , null AS CUBL_SEQ
              , '0'  AS PLANT_FLAG
              , ''   AS COST_CENTER_FLAG
              , '0'  AS SOURCING_AUTO_PO_FLAG
              , ''   AS OLD_CUST_CD
              , '0'  AS USER_AUTO_PO_FLAG
              , '0'  AS APCH_FLAG
              , '0'  AS DEPT_PRICE_FLAG
        	  , 'N'  AS RELAT_YN
        	  , #{mUserId} AS M_USER_ID
        	  , <include refid="com.sql.nvl"/>(UR.AGREE_YN,'0') AS AGREE_YN
        	  , CM.IRS_NUM
         FROM STOCUSER UR
         JOIN STOCOGCM CM
         	  ON (CM.GATE_CD  = UR.GATE_CD
         	  AND CM.BUYER_CD = UR.COMPANY_CD
         	  AND CM.DEL_FLAG = '0')
        WHERE UR.GATE_CD  = #{gateCd}
          AND UR.USER_ID  = UPPER(#{userId})
          AND UR.PROGRESS_CD = 'E'
          AND UR.USE_FLAG = '1'
          AND UR.DEL_FLAG = '0'
		<if test="sessionChange != 'true' and ssoFlag != 'true'">
          AND UR.PASSWORD = #{password}
        </if>
	</select>

	<!-- 운영사 사용자 SSO 로그인 -->
    <select id="getUserInfoB_SSO" parameterType="loginSearch" resultMap="baseInfoResult">

		SELECT  UR.GATE_CD
              , UR.COMPANY_CD AS MANAGE_CD
              ,<include refid="com.sql.dbo"/>getUserCompanyName(#{gateCd}, UR.COMPANY_CD, 'C', #{langCd}) AS MANAGE_COM_NM
              , UR.USER_ID
              ,(CASE WHEN #{langCd} = 'KO' THEN UR.USER_NM ELSE UR.USER_NM_ENG END) AS USER_NM
              , UR.USER_NM_ENG
              , UR.COMPANY_CD
              ,<include refid="com.sql.dbo"/>getUserCompanyName(#{gateCd}, UR.COMPANY_CD, 'C', #{langCd}) AS COMPANY_NM
              ,<include refid="com.sql.dbo"/>getUserCompanyName(#{gateCd}, UR.COMPANY_CD, 'C', 'EN') AS COMPANY_NM_ENG
              ,<include refid="com.sql.nvl"/>(UR.PLANT_CD, '10') AS PLANT_CD
              ,<include refid="com.sql.dbo"/>getUserPlantName(#{gateCd}, UR.USER_ID, #{langCd}) AS PLANT_NM
              , UR.DEPT_CD
              ,<include refid="com.sql.dbo"/>getUserDeptName(#{gateCd}, UR.USER_ID, #{langCd}) AS DEPT_NM
              ,<include refid="com.sql.dbo"/>getUserDeptName(#{gateCd}, UR.USER_ID, 'EN') AS DEPT_NM_ENG
              , '' AS ACC_CODE
              , UR.EMAIL
              , UR.TEL_NUM
              , UR.CELL_NUM
              , UR.USER_TYPE
              , UR.LANG_CD
              , UR.WORK_TYPE
              , UR.COUNTRY_CD
              , UR.GMT_CD
              ,<include refid="com.sql.nvl"/>(UR.PW_WRONG_CNT,'0') AS PW_WRONG_CNT
              , UR.DUTY_CD
              , UR.EMPLOYEE_NUM
              , UR.DUTY_NM
              ,(SELECT CD.CODE_DESC FROM STOCCODD CD
                 WHERE CD.GATE_CD   = UR.GATE_CD
                   AND CD.LANG_CD   = UR.LANG_CD
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = UR.USER_DATE_FORMAT_CD) AS USER_DATE_FORMAT_CD
              ,(SELECT REPLACE(CD.CODE_DESC, '/', '') FROM STOCCODD CD
                 WHERE CD.GATE_CD   = UR.GATE_CD
                   AND CD.LANG_CD   = UR.LANG_CD
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = UR.USER_DATE_FORMAT_CD) AS USER_DATE_VAULE_FORMAT
              ,(SELECT CD.CODE_DESC FROM STOCCODD CD
                 WHERE CD.GATE_CD   = UR.GATE_CD
                   AND CD.LANG_CD   = UR.LANG_CD
                   AND CD.CODE_TYPE = 'M055'
                   AND CD.CODE      = UR.USER_NUMBER_FORMAT_CD) AS USER_NUMBER_FORMAT_CD
              , #{databaseCd} AS DATABASE_CD
              ,(SELECT MAX(USAP.AUTH_CD)
                  FROM STOCUSAP USAP
                 WHERE USAP.GATE_CD  = UR.GATE_CD
                   AND USAP.USER_ID  = UR.USER_ID
                   AND USAP.DEL_FLAG = '0') AS GRANTED_AUTH_CD
              ,(SELECT MAX(USAC.ACTION_PROFILE_CD)
                  FROM STOCUSAC USAC
                 WHERE USAC.GATE_CD  = UR.GATE_CD
                   AND USAC.USER_ID  = UR.USER_ID
                   AND USAC.DEL_FLAG = '0') AS ACTION_AUTH_CD
			<if test="_databaseId == 'oracle'">
              , CASE WHEN (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = UR.GATE_CD
                              AND BACP.BUYER_CD     = UR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = UR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = UR.GATE_CD
                            AND BACP.BUYER_CD     = UR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = UR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
			<if test="_databaseId == 'mysql'">
              , CASE WHEN (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = UR.GATE_CD
                              AND BACP.BUYER_CD     = UR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = UR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = UR.GATE_CD
                            AND BACP.BUYER_CD     = UR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = UR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
			  , UR.SUPER_USER_FLAG
              , UR.POSITION_NM
              , '0' AS MNG_YN
              , '0' AS AUTO_PO_FLAG
              , '0' AS BLOCK_FLAG
              , ''  AS BUDGET_DEPT_CD
              , '0' AS BUDGET_FLAG
              , '0' AS APPROVE_USE_FLAG
              , '0' AS BUDGET_USE_FLAG
              , '0' AS BUYER_MY_SITE_FLAG
              , ''  AS TIER_CD
              , '0' AS WMS_FLAG
              , '0' AS FINANCIAL_FLAG
              , '0' AS GR_FLAG
              , '0' AS MAIL_FLAG
              , '0' AS MY_SITE_FLAG
              , '0' AS SELECT_FLAG
              , '0' AS SMS_FLAG
              , '0' AS WMS_FLAG
              , ''  AS ZIP_CD
              , ''  AS ADDR1
              , ''  AS ADDR2
              , #{isDev} AS IS_DEV
              , null AS CSDM_SEQ
              , null AS CUBL_SEQ
              , '0'  AS PLANT_FLAG
              , ''   AS COST_CENTER_FLAG
              , '0'  AS SOURCING_AUTO_PO_FLAG
              , ''   AS OLD_CUST_CD
              , '0'  AS USER_AUTO_PO_FLAG
              , '0'  AS APCH_FLAG
              , '0'  AS DEPT_PRICE_FLAG
              , <include refid="com.sql.nvl"/>(UR.AGREE_YN,'0') AS AGREE_YN
              , CM.IRS_NUM
         FROM STOCUSER UR
         JOIN STOCOGCM CM
         	  ON (CM.GATE_CD  = UR.GATE_CD
         	  AND CM.BUYER_CD = UR.COMPANY_CD
         	  AND CM.DEL_FLAG = '0')
        WHERE UR.GATE_CD  = #{gateCd}
          AND UR.USER_ID  = UPPER(#{userId})
          AND UR.USE_FLAG = '1'
          AND UR.DEL_FLAG = '0'
        <if test="ssoFlag != 'true'">
          AND UR.PASSWORD = #{password}
        </if>
	</select>

	<!-- 고객사 사용자 일반 로그인 -->
	<select id="getUserInfoC" parameterType="loginSearch" resultMap="baseInfoResult">

        SELECT
        	    CVUR.GATE_CD
              , '2518' AS MANAGE_CD
              ,<include refid="com.sql.dbo"/>getUserCompanyName(#{gateCd}, '2518', 'C', #{langCd}) AS MANAGE_COM_NM
              , CVUR.USER_ID
              , CVUR.USER_NM
              , CVUR.USER_NM AS USER_NM_ENG
              , CVUR.COMPANY_CD
              , CUST.CUST_NM AS COMPANY_NM
              , CUST.CUST_ENG_NM AS COMPANY_NM_ENG
              , CVUR.PLANT_CD
              ,<include refid="com.sql.dbo"/>getUserPlantName(#{gateCd}, CVUR.USER_ID, #{langCd}) AS PLANT_NM
              , CVUR.DEPT_CD
              ,<include refid="com.sql.dbo"/>getUserDeptName(#{gateCd}, CVUR.USER_ID, #{langCd}) AS DEPT_NM
              ,<include refid="com.sql.dbo"/>getUserDeptName(#{gateCd}, CVUR.USER_ID, 'EN') AS DEPT_NM_ENG
              , CVUR.EMAIL
              , CVUR.TEL_NUM
              , CVUR.CELL_NUM
              , CVUR.USER_TYPE
              , #{langCd} AS LANG_CD
              , CVUR.WORK_TYPE AS WORK_TYPE
              , 'KR' AS COUNTRY_CD
              , #{gmtDefault} AS GMT_CD
              ,<include refid="com.sql.nvl"/>(CVUR.PW_WRONG_CNT,'0') AS PW_WRONG_CNT
              , null AS DUTY_CD
              , null AS EMPLOYEE_NUM
              /*
              ,(CASE WHEN TRUNC(MOD(MONTHS_BETWEEN(<include refid="com.sql.sysdate"/>, CVUR.PW_RESET_DATE), 12)) > 3 THEN 'Y' ELSE 'N' END) AS PW_RESET_TYPE	-- 비밀번호 변경 이후 3개월 지남
              ,(CASE WHEN TRUNC(MOD(MONTHS_BETWEEN(<include refid="com.sql.sysdate"/>, CVUR.LAST_LOGIN_DATE), 12)) > 3 THEN 'Y' ELSE 'N' END) AS VALID_LAST_LOGIN_DATE	-- 최종 로그인 이후 3개월 지남
              */
              ,(SELECT CD.CODE_DESC
                  FROM STOCCODD CD
                 WHERE CD.GATE_CD   = CVUR.GATE_CD
                   AND CD.LANG_CD   = #{langCd}
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = '01') AS USER_DATE_FORMAT_CD
              ,(SELECT REPLACE(CD.CODE_DESC, '/', '')
                  FROM STOCCODD CD
                 WHERE CD.GATE_CD   = CVUR.GATE_CD
                   AND CD.LANG_CD   = #{langCd}
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = '01') AS USER_DATE_VAULE_FORMAT
              ,(SELECT CD.CODE_DESC
                  FROM STOCCODD CD
                 WHERE CD.GATE_CD   = CVUR.GATE_CD
                   AND CD.LANG_CD   = #{langCd}
                   AND CD.CODE_TYPE = 'M055'
                   AND CD.CODE      = '01') AS USER_NUMBER_FORMAT_CD
              ,#{databaseCd} AS DATABASE_CD
              ,(SELECT MAX(USAP.AUTH_CD)
	          	  FROM STOCUSAP USAP
	          	 WHERE USAP.GATE_CD  = CVUR.GATE_CD
	          	   AND USAP.USER_ID  = CVUR.USER_ID
	          	   AND USAP.DEL_FLAG = '0') AS GRANTED_AUTH_CD
              ,(SELECT MAX(USAC.ACTION_PROFILE_CD)
                  FROM STOCUSAC USAC
                 WHERE USAC.GATE_CD  = CVUR.GATE_CD
                   AND USAC.USER_ID  = CVUR.USER_ID
                   AND USAC.DEL_FLAG = '0') AS ACTION_AUTH_CD
			<if test="_databaseId == 'oracle'">
              , CASE WHEN (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = CVUR.GATE_CD
                              AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = CVUR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = CVUR.GATE_CD
                            AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = CVUR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
			<if test="_databaseId == 'mysql'">
              , CASE WHEN (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = CVUR.GATE_CD
                              AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = CVUR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = CVUR.GATE_CD
                            AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = CVUR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
              ,(SELECT CASE WHEN COUNT(USAC.GATE_CD) = 1 THEN 'true' ELSE 'false' END
                  FROM STOCUSAC USAC
                 WHERE USAC.GATE_CD  = CVUR.GATE_CD
                   AND USAC.USER_ID  = CVUR.USER_ID
                   AND USAC.DEL_FLAG = '0'
                   AND <include refid="com.sql.sysdate"/> BETWEEN <include refid="com.sql.nvl"/>(USAC.VALID_FROM_DATE, <include refid="com.sql.sysdate"/>) AND <include refid="com.sql.nvl"/>(USAC.VALID_TO_DATE, <include refid="com.sql.sysdate"/>)) AS VALID_USER_PROFILE
              , CVUR.POSITION_NM
              , CVUR.MNG_YN
              , CUST.IRS_NUM
              , '' AS ACC_CODE
              , CUST.AUTO_PO_FLAG
              ,(CASE WHEN <include refid="com.sql.nvl"/>(CVUR.BLOCK_FLAG,'0') = '0' THEN <include refid="com.sql.nvl"/>(CUST.STOP_FLAG,'0')
              		 ELSE <include refid="com.sql.nvl"/>(CVUR.BLOCK_FLAG,'0')
              	END) AS BLOCK_FLAG
              , CVUR.BUDGET_DEPT_CD
              , CVUR.BUDGET_FLAG
              , CUST.APPROVE_USE_FLAG
              , CUST.BUDGET_USE_FLAG
              , CUST.MY_SITE_FLAG AS BUYER_MY_SITE_FLAG
              , CUST.TIER_CD
              , CUST.WMS_FLAG
              , CVUR.FINANCIAL_FLAG
              , CVUR.GR_FLAG
              , CVUR.MAIL_FLAG
              , CVUR.MY_SITE_FLAG
              , CUST.SELECT_FLAG
              , CVUR.SMS_FLAG
              , CUST.WMS_FLAG
              , CVUR.ZIP_CD
              , CVUR.ADDR_1 AS ADDR1
              , CVUR.ADDR_2 AS ADDR2
              , CVUR.DUTY_NM
              , #{isDev} AS IS_DEV
              ,<include refid="com.sql.nvl"/>(CVUR.CSDM_SEQ, null) AS CSDM_SEQ	-- 기본배송지코드
              ,(SELECT DELY_NM FROM STOCCSDM
              	 WHERE GATE_CD = CVUR.GATE_CD
                   AND CUST_CD = CVUR.COMPANY_CD
                   AND SEQ     = CVUR.CSDM_SEQ) AS DELY_NM
              ,<include refid="com.sql.nvl"/>(CVUR.CUBL_SEQ, null) AS CUBL_SEQ	-- 기본청구지코드
              , CUST.PLANT_FLAG
              , CUST.COST_CENTER_FLAG
              , CUST.SOURCING_AUTO_PO_FLAG
              , CUST.OLD_CUST_CD
              ,<include refid="com.sql.nvl"/>(CVUR.USER_AUTO_PO_FLAG,'0') AS USER_AUTO_PO_FLAG
              ,<include refid="com.sql.nvl"/>(CVUR.APCH_FLAG,'0') AS APCH_FLAG
              ,<include refid="com.sql.nvl"/>(CUST.DEPT_PRICE_FLAG,'0') AS DEPT_PRICE_FLAG
              ,<include refid="com.sql.nvl"/>(CUST.RELAT_YN,'N') AS RELAT_YN
              , #{mUserId} AS M_USER_ID
			  , CUST.ERP_IF_FLAG
			  , <include refid="com.sql.nvl"/>(CVUR.AGREE_YN,'0') AS AGREE_YN
			  , CUST.IRS_NUM
          FROM STOCCVUR CVUR
          JOIN STOCCUST CUST
	           ON (CVUR.GATE_CD  = CUST.GATE_CD
	           AND CVUR.COMPANY_CD = CUST.CUST_CD
	           AND CUST.DEL_FLAG = '0')
         WHERE CVUR.GATE_CD  = #{gateCd}
           AND CVUR.USER_ID  = UPPER(#{userId})
           AND CVUR.USE_FLAG = '1'
           AND CVUR.DEL_FLAG = '0'
          <if test="sessionChange != 'true'">
           AND CVUR.PASSWORD = #{password}
          </if>
    </select>

	<!-- 고객사 및 협력사 사용자 SSO 로그인 -->
	<select id="getUserInfoC_SSO" parameterType="loginSearch" resultMap="baseInfoResult">

        SELECT
        	    CVUR.GATE_CD
              , '2518' AS MANAGE_CD
              ,<include refid="com.sql.dbo"/>getUserCompanyName(#{gateCd}, '2518', 'C', #{langCd}) AS MANAGE_COM_NM
              , CVUR.USER_ID
              , CVUR.USER_NM
              , CVUR.USER_NM AS USER_NM_ENG
              , CVUR.COMPANY_CD
              , CUST.CUST_NM AS COMPANY_NM
              , CUST.CUST_ENG_NM AS COMPANY_NM_ENG
              , CVUR.PLANT_CD
              ,<include refid="com.sql.dbo"/>getUserPlantName(#{gateCd}, CVUR.USER_ID, #{langCd}) AS PLANT_NM
              , CVUR.DEPT_CD
              ,<include refid="com.sql.dbo"/>getUserDeptName(#{gateCd}, CVUR.USER_ID, #{langCd}) AS DEPT_NM
              ,<include refid="com.sql.dbo"/>getUserDeptName(#{gateCd}, CVUR.USER_ID, 'EN') AS DEPT_NM_ENG
              , CVUR.EMAIL
              , CVUR.TEL_NUM
              , CVUR.CELL_NUM
              , CVUR.USER_TYPE
              , #{langCd} AS LANG_CD
              , CVUR.WORK_TYPE AS WORK_TYPE
              , 'KR' AS COUNTRY_CD
              , #{gmtDefault} AS GMT_CD
              ,<include refid="com.sql.nvl"/>(CVUR.PW_WRONG_CNT,'0') AS PW_WRONG_CNT
              , null AS DUTY_CD
              , null AS EMPLOYEE_NUM
              /*
              ,(CASE WHEN TRUNC(MOD(MONTHS_BETWEEN(<include refid="com.sql.sysdate"/>, CVUR.PW_RESET_DATE), 12)) > 3 THEN 'Y' ELSE 'N' END) AS PW_RESET_TYPE	-- 비밀번호 변경 이후 3개월 지남
              ,(CASE WHEN TRUNC(MOD(MONTHS_BETWEEN(<include refid="com.sql.sysdate"/>, CVUR.LAST_LOGIN_DATE), 12)) > 3 THEN 'Y' ELSE 'N' END) AS VALID_LAST_LOGIN_DATE	-- 최종 로그인 이후 3개월 지남
              */
              ,(SELECT CD.CODE_DESC
                  FROM STOCCODD CD
                 WHERE CD.GATE_CD   = CVUR.GATE_CD
                   AND CD.LANG_CD   = #{langCd}
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = '01') AS USER_DATE_FORMAT_CD
              ,(SELECT REPLACE(CD.CODE_DESC, '/', '')
                  FROM STOCCODD CD
                 WHERE CD.GATE_CD   = CVUR.GATE_CD
                   AND CD.LANG_CD   = #{langCd}
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = '01') AS USER_DATE_VAULE_FORMAT
              ,(SELECT CD.CODE_DESC
                  FROM STOCCODD CD
                 WHERE CD.GATE_CD   = CVUR.GATE_CD
                   AND CD.LANG_CD   = #{langCd}
                   AND CD.CODE_TYPE = 'M055'
                   AND CD.CODE      = '01') AS USER_NUMBER_FORMAT_CD
              ,#{databaseCd} AS DATABASE_CD
              ,(SELECT MAX(USAP.AUTH_CD)
	          	  FROM STOCUSAP USAP
	          	 WHERE USAP.GATE_CD  = CVUR.GATE_CD
	          	   AND USAP.USER_ID  = CVUR.USER_ID
	          	   AND USAP.DEL_FLAG = '0') AS GRANTED_AUTH_CD
              ,(SELECT MAX(USAC.ACTION_PROFILE_CD)
                  FROM STOCUSAC USAC
                 WHERE USAC.GATE_CD  = CVUR.GATE_CD
                   AND USAC.USER_ID  = CVUR.USER_ID
                   AND USAC.DEL_FLAG = '0') AS ACTION_AUTH_CD
			<if test="_databaseId == 'oracle'">
              , CASE WHEN (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = CVUR.GATE_CD
                              AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = CVUR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = CVUR.GATE_CD
                            AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = CVUR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
			<if test="_databaseId == 'mysql'">
              , CASE WHEN (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = CVUR.GATE_CD
                              AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = CVUR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = CVUR.GATE_CD
                            AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = CVUR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
              ,(SELECT CASE WHEN COUNT(USAC.GATE_CD) = 1 THEN 'true' ELSE 'false' END
                  FROM STOCUSAC USAC
                 WHERE USAC.GATE_CD  = CVUR.GATE_CD
                   AND USAC.USER_ID  = CVUR.USER_ID
                   AND USAC.DEL_FLAG = '0'
                   AND <include refid="com.sql.sysdate"/> BETWEEN <include refid="com.sql.nvl"/>(USAC.VALID_FROM_DATE, <include refid="com.sql.sysdate"/>) AND <include refid="com.sql.nvl"/>(USAC.VALID_TO_DATE, <include refid="com.sql.sysdate"/>)) AS VALID_USER_PROFILE
              , CVUR.POSITION_NM
              , CVUR.MNG_YN
              , CUST.IRS_NUM
              , '' AS ACC_CODE
              , CUST.AUTO_PO_FLAG
              ,(CASE WHEN <include refid="com.sql.nvl"/>(CVUR.BLOCK_FLAG,'0') = '0' THEN <include refid="com.sql.nvl"/>(CUST.STOP_FLAG,'0')
              		 ELSE <include refid="com.sql.nvl"/>(CVUR.BLOCK_FLAG,'0')
              	END) AS BLOCK_FLAG
              , CVUR.BUDGET_DEPT_CD
              , CVUR.BUDGET_FLAG
              , CUST.APPROVE_USE_FLAG
              , CUST.BUDGET_USE_FLAG
              , CUST.MY_SITE_FLAG AS BUYER_MY_SITE_FLAG
              , CUST.TIER_CD
              , CUST.WMS_FLAG
              , CVUR.FINANCIAL_FLAG
              , CVUR.GR_FLAG
              , CVUR.MAIL_FLAG
              , CVUR.MY_SITE_FLAG
              , CUST.SELECT_FLAG
              , CVUR.SMS_FLAG
              , CUST.WMS_FLAG
              , CVUR.ZIP_CD
              , CVUR.ADDR_1 AS ADDR1
              , CVUR.ADDR_2 AS ADDR2
              , CVUR.DUTY_NM
              , #{isDev} AS IS_DEV
              ,<include refid="com.sql.nvl"/>(CVUR.CSDM_SEQ, null) AS CSDM_SEQ	-- 기본배송지코드
              ,(SELECT DELY_NM FROM STOCCSDM
              	 WHERE GATE_CD = CVUR.GATE_CD
                   AND CUST_CD = CVUR.COMPANY_CD
                   AND SEQ     = CVUR.CSDM_SEQ) AS DELY_NM
              ,<include refid="com.sql.nvl"/>(CVUR.CUBL_SEQ, null) AS CUBL_SEQ	-- 기본청구지코드
              , CUST.PLANT_FLAG
              , CUST.COST_CENTER_FLAG
              , CUST.SOURCING_AUTO_PO_FLAG
              , CUST.OLD_CUST_CD
              ,<include refid="com.sql.nvl"/>(CVUR.USER_AUTO_PO_FLAG,'0') AS USER_AUTO_PO_FLAG
              ,<include refid="com.sql.nvl"/>(CVUR.APCH_FLAG,'0') AS APCH_FLAG
              ,<include refid="com.sql.nvl"/>(CUST.DEPT_PRICE_FLAG,'0') AS DEPT_PRICE_FLAG
              ,<include refid="com.sql.nvl"/>(CUST.RELAT_YN,'N') AS RELAT_YN
              , #{mUserId} AS M_USER_ID
			  , CUST.ERP_IF_FLAG
			  , <include refid="com.sql.nvl"/>(CVUR.AGREE_YN,'0') AS AGREE_YN
			  , CUST.IRS_NUM
          FROM STOCCVUR CVUR
          JOIN STOCCUST CUST
	           ON (CVUR.GATE_CD  = CUST.GATE_CD
	           AND CVUR.COMPANY_CD = CUST.CUST_CD
	           AND CUST.DEL_FLAG = '0')
         WHERE CVUR.GATE_CD  = #{gateCd}
           AND CVUR.USER_ID  = UPPER(#{userId})
           AND CVUR.USE_FLAG = '1'
           AND CVUR.DEL_FLAG = '0'
          <if test="ssoFlag != 'true'">
           AND CVUR.PASSWORD = #{password}
          </if>
    </select>

	<!-- 협력사 로그인 -->
	<select id="getUserInfoS" parameterType="loginSearch" resultMap="baseInfoResult">

		SELECT
        	    CVUR.GATE_CD
              , '2518' AS MANAGE_CD
              ,<include refid="com.sql.dbo"/>getUserCompanyName(#{gateCd}, '2518', 'C', #{langCd}) AS MANAGE_COM_NM
              , CVUR.USER_ID
              , CVUR.USER_NM
              , CVUR.USER_NM AS USER_NM_ENG
              , CVUR.COMPANY_CD
              , VNGL.VENDOR_NM AS COMPANY_NM
              , VNGL.VENDOR_NM AS COMPANY_NM_ENG
              , CVUR.COMPANY_CD AS PLANT_CD
              , VNGL.VENDOR_NM  AS PLANT_NM
              , CVUR.DEPT_CD
              , CVUR.DEPT_NM
              , CVUR.DEPT_NM AS DEPT_NM_ENG
              , CVUR.EMAIL
              , CVUR.TEL_NUM
              , CVUR.CELL_NUM
              , CVUR.USER_TYPE
              , #{langCd} AS LANG_CD
              , CVUR.WORK_TYPE AS WORK_TYPE
              , 'KR' AS COUNTRY_CD
              , #{gmtDefault} AS GMT_CD
              ,<include refid="com.sql.nvl"/>(CVUR.PW_WRONG_CNT,'0') AS PW_WRONG_CNT
              , null AS DUTY_CD
              , null AS EMPLOYEE_NUM
              , CVUR.DUTY_NM
              /*
              ,(CASE WHEN TRUNC(MOD(MONTHS_BETWEEN(<include refid="com.sql.sysdate"/>, CVUR.PW_RESET_DATE), 12)) > 3 THEN 'Y' ELSE 'N' END) AS PW_RESET_TYPE	-- 비밀번호 변경 이후 3개월 지남
              ,(CASE WHEN TRUNC(MOD(MONTHS_BETWEEN(<include refid="com.sql.sysdate"/>, CVUR.LAST_LOGIN_DATE), 12)) > 3 THEN 'Y' ELSE 'N' END) AS VALID_LAST_LOGIN_DATE	-- 최종 로그인 이후 3개월 지남
              */
              ,(SELECT CD.CODE_DESC
                  FROM STOCCODD CD
                 WHERE CD.GATE_CD   = CVUR.GATE_CD
                   AND CD.LANG_CD   = #{langCd}
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = '01') AS USER_DATE_FORMAT_CD
              ,(SELECT REPLACE(CD.CODE_DESC, '/', '')
                  FROM STOCCODD CD
                 WHERE CD.GATE_CD   = CVUR.GATE_CD
                   AND CD.LANG_CD   = #{langCd}
                   AND CD.CODE_TYPE = 'M054'
                   AND CD.CODE      = '01') AS USER_DATE_VAULE_FORMAT
              ,(SELECT CD.CODE_DESC
                  FROM STOCCODD CD
                 WHERE CD.GATE_CD   = CVUR.GATE_CD
                   AND CD.LANG_CD   = #{langCd}
                   AND CD.CODE_TYPE = 'M055'
                   AND CD.CODE      = '01') AS USER_NUMBER_FORMAT_CD
              ,#{databaseCd} AS DATABASE_CD
              ,(SELECT MAX(USAP.AUTH_CD)
	          	  FROM STOCUSAP USAP
	          	 WHERE USAP.GATE_CD  = CVUR.GATE_CD
	          	   AND USAP.USER_ID  = CVUR.USER_ID
	          	   AND USAP.DEL_FLAG = '0') AS GRANTED_AUTH_CD
              ,(SELECT MAX(USAC.ACTION_PROFILE_CD)
                  FROM STOCUSAC USAC
                 WHERE USAC.GATE_CD  = CVUR.GATE_CD
                   AND USAC.USER_ID  = CVUR.USER_ID
                   AND USAC.DEL_FLAG = '0') AS ACTION_AUTH_CD
			<if test="_databaseId == 'oracle'">
              , CASE WHEN (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = CVUR.GATE_CD
                              AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = CVUR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT SUBSTR(XMLAGG(XMLELEMENT(A, <include refid="com.sql.stringMergeStart"/>','<include refid="com.sql.stringMerge"/>BACP.CTRL_CD<include refid="com.sql.stringMergeEnd"/>) ORDER BY BACP.CTRL_CD).EXTRACT('//text()'), 2)
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = CVUR.GATE_CD
                            AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = CVUR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
			<if test="_databaseId == 'mysql'">
              , CASE WHEN (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                             	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD      = CVUR.GATE_CD
                              AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                              AND BACP.CTRL_USER_ID = CVUR.USER_ID
                              AND BACP.DEL_FLAG     = '0') IS NULL
                     THEN 'BASIC'
                     ELSE (SELECT group_concat(BACP.CTRL_CD SEPARATOR ',')
                             FROM STOCBACP BACP
                             JOIN STOCBACO BACO
                            	  ON (BACP.GATE_CD = BACO.GATE_CD AND BACP.BUYER_CD = BACO.BUYER_CD
                                  AND BACP.CTRL_CD = BACO.CTRL_CD AND BACO.DEL_FLAG = '0')
                            WHERE BACP.GATE_CD    = CVUR.GATE_CD
                            AND BACP.BUYER_CD     = CVUR.COMPANY_CD
                            AND BACP.CTRL_USER_ID = CVUR.USER_ID
                            AND BACP.DEL_FLAG     = '0')
                     END AS CTRL_CD
			</if>
              ,(SELECT CASE WHEN COUNT(USAC.GATE_CD) = 1 THEN 'true' ELSE 'false' END
                  FROM STOCUSAC USAC
                 WHERE USAC.GATE_CD  = CVUR.GATE_CD
                   AND USAC.USER_ID  = CVUR.USER_ID
                   AND USAC.DEL_FLAG = '0'
                   AND <include refid="com.sql.sysdate"/> BETWEEN <include refid="com.sql.nvl"/>(USAC.VALID_FROM_DATE, <include refid="com.sql.sysdate"/>) AND <include refid="com.sql.nvl"/>(USAC.VALID_TO_DATE, <include refid="com.sql.sysdate"/>)) AS VALID_USER_PROFILE
              , CVUR.POSITION_NM
              , CVUR.MNG_YN
              , VNGL.IRS_NO AS IRS_NUM
              , ''  AS ACC_CODE
              , '0' AS AUTO_PO_FLAG
              ,(CASE WHEN <include refid="com.sql.nvl"/>(CVUR.BLOCK_FLAG,'0') = '0' THEN <include refid="com.sql.nvl"/>(VNGL.BLOCK_FLAG,'0')
              		 ELSE <include refid="com.sql.nvl"/>(CVUR.BLOCK_FLAG,'0')
              	END) AS BLOCK_FLAG
              , CVUR.BUDGET_DEPT_CD
              , CVUR.BUDGET_FLAG
              , '0' AS APPROVE_USE_FLAG
              , '0' AS BUDGET_USE_FLAG
              , '0' AS BUYER_MY_SITE_FLAG
              , ''  AS TIER_CD
              , '0' AS WMS_FLAG
              , CVUR.FINANCIAL_FLAG
              , CVUR.GR_FLAG
              , CVUR.MAIL_FLAG
              , CVUR.MY_SITE_FLAG
              , '0' AS SELECT_FLAG
              , CVUR.SMS_FLAG
              , '0' AS WMS_FLAG
              , CVUR.ZIP_CD
              , CVUR.ADDR_1 AS ADDR1
              , CVUR.ADDR_2 AS ADDR2
              , #{isDev} AS IS_DEV
              ,<include refid="com.sql.nvl"/>(CVUR.CSDM_SEQ,null) AS CSDM_SEQ
              ,<include refid="com.sql.nvl"/>(CVUR.CUBL_SEQ,null) AS CUBL_SEQ
              , '0' AS PLANT_FLAG
              , ''  AS COST_CENTER_FLAG
              , '0' AS SOURCING_AUTO_PO_FLAG
              , ''  AS OLD_CUST_CD
              ,<include refid="com.sql.nvl"/>(CVUR.USER_AUTO_PO_FLAG,'0') AS USER_AUTO_PO_FLAG
              ,<include refid="com.sql.nvl"/>(CVUR.APCH_FLAG,'0') AS APCH_FLAG
              , '0' AS DEPT_PRICE_FLAG
              , 'N' AS RELAT_YN
              , #{mUserId} AS M_USER_ID
              , <include refid="com.sql.nvl"/>(CVUR.AGREE_YN,'0') AS AGREE_YN
              , VNGL.IRS_NO AS IRS_NUM
          FROM STOCCVUR CVUR
          JOIN STOCVNGL VNGL
	           ON (CVUR.GATE_CD  = VNGL.GATE_CD
	           AND CVUR.COMPANY_CD = VNGL.VENDOR_CD
	           AND VNGL.DEL_FLAG = '0')
         WHERE CVUR.GATE_CD  = #{gateCd}
           AND CVUR.USER_ID  = UPPER(#{userId})
           AND CVUR.USE_FLAG = '1'
           AND CVUR.DEL_FLAG = '0'
          <if test="sessionChange != 'true'">
           AND CVUR.PASSWORD = #{password}
          </if>
    </select>

    <update id="setLastLoginDate" parameterType="hashMap">

        UPDATE ${USER_TABLE} SET
	          LAST_LOGIN_DATE = <include refid="com.sql.sysdate"/>
	        , IP_ADDR = #{IP_ADDR}
        WHERE GATE_CD = #{GATE_CD}
          AND USER_ID = UPPER(#{USER_ID})

    </update>

    <update id="setLastLoginDateCVUR" parameterType="hashMap">

        UPDATE STOCCVUR SET
	          LAST_LOGIN_DATE = <include refid="com.sql.sysdate"/>
	        , IP_ADDR = #{IP_ADDR}
        WHERE GATE_CD = #{GATE_CD}
          AND USER_ID = UPPER(#{USER_ID})

    </update>

	<update id="resetPasswordWrongCount" parameterType="hashMap">

		UPDATE ${USER_TABLE} SET
			PW_WRONG_CNT  = 0
		WHERE GATE_CD = #{GATE_CD}
          AND USER_ID = UPPER(#{USER_ID})

	</update>

    <update id="resetPasswordWrongCountCVUR" parameterType="hashMap">

		UPDATE STOCCVUR SET
			PW_WRONG_CNT  = 0
		WHERE GATE_CD = #{GATE_CD}
          AND USER_ID = UPPER(#{USER_ID})

	</update>

	<update id="updateWrongPasswordCountUSER" parameterType="hashMap">

		UPDATE STOCUSER SET
			PW_WRONG_CNT = <include refid="com.sql.nvl"/>(PW_WRONG_CNT,0) + 1
		 WHERE GATE_CD = #{GATE_CD}
           AND USER_ID = UPPER(#{USER_ID})

	</update>

    <update id="updateWrongPasswordCountCVUR" parameterType="hashMap">

		UPDATE STOCCVUR SET
			PW_WRONG_CNT = <include refid="com.sql.nvl"/>(PW_WRONG_CNT,0) + 1
		 WHERE GATE_CD = #{GATE_CD}
           AND USER_ID = UPPER(#{USER_ID})

	</update>

	<select id="getPasswordWrongCount" parameterType="hashMap" resultType="int">

      SELECT <include refid="com.sql.nvl"/>(MAX(Z.PW_WRONG_CNT), 0) AS CNT
        FROM
          (SELECT <include refid="com.sql.nvl"/>(PW_WRONG_CNT, 0) AS PW_WRONG_CNT
             FROM STOCUSER
            WHERE GATE_CD = #{GATE_CD}
              AND USER_ID = UPPER(  #{USER_ID} )

            UNION ALL

           SELECT <include refid="com.sql.nvl"/>(PW_WRONG_CNT, 0) AS PW_WRONG_CNT
             FROM STOCCVUR
            WHERE GATE_CD = #{GATE_CD}
              AND USER_ID = UPPER(#{USER_ID})
        ) Z

	</select>

    <select id="getUserType" parameterType="hashmap" resultType="string">
		SELECT A.USER_TYPE
		  FROM (
		      SELECT USER_TYPE FROM STOCUSER
	           WHERE GATE_CD  = #{GATE_CD}
	             AND USER_ID  = UPPER(#{USER_ID})
	             AND DEL_FLAG = '0'

	          UNION

	          SELECT USER_TYPE FROM STOCCVUR
	           WHERE GATE_CD  = #{GATE_CD}
	             AND USER_ID  = UPPER(#{USER_ID})
	             AND DEL_FLAG = '0'
		  ) A
    </select>

    <select id="getSignStatus" parameterType="hashMap" resultType="java.lang.String">

        SELECT SIGN_STATUS FROM STOCSCTP
         WHERE GATE_CD  = #{ses.gateCd}
           AND APP_DOC_NUM  = #{appDocNum}
           AND APP_DOC_CNT  = #{appDocCnt}
           AND SIGN_USER_ID = #{userId}
           AND DEL_FLAG	= '0'
    </select>

	<!-- 회사별 Logo 가져오기 -->
    <select id="getLogos" resultType="java.util.Map">
        SELECT OGCM.CI_FILE_NUM
             , ATCH.FILE_PATH
             , ATCH.FILE_NM
             , ATCH.FILE_EXTENSION
          FROM STOCOGCM OGCM
          JOIN STOCUSER USR
	           ON (OGCM.GATE_CD = USR.GATE_CD
	           AND OGCM.BUYER_CD = USR.COMPANY_CD
	           AND USR.USER_ID = #{ses.userId}
	           AND USR.DEL_FLAG = '0')
          LEFT OUTER JOIN STOCATCH ATCH
	           ON (OGCM.GATE_CD = ATCH.GATE_CD
	           AND OGCM.CI_FILE_NUM = ATCH.UUID
	           AND ATCH.DEL_FLAG = '0')
         WHERE OGCM.GATE_CD = #{ses.gateCd}

         UNION ALL

        SELECT <include refid="com.sql.nvl"/>(CUST.CI_FILE_NUM, OGCM.CI_FILE_NUM) AS CI_FILE_NUM
             , <include refid="com.sql.nvl"/>(ATCH.FILE_PATH, ATCHOG.FILE_PATH) AS FILE_PATH
             , <include refid="com.sql.nvl"/>(ATCH.FILE_NM, ATCHOG.FILE_NM) AS FILE_NM
             , <include refid="com.sql.nvl"/>(ATCH.FILE_EXTENSION, ATCHOG.FILE_EXTENSION) AS FILE_EXTENSION
          FROM STOCCUST CUST
          JOIN STOCCVUR CVUR
	           ON (CUST.GATE_CD = CVUR.GATE_CD
	           AND CUST.CUST_CD = CVUR.COMPANY_CD
	           AND CVUR.USER_ID = #{ses.userId}
	           AND CVUR.DEL_FLAG = '0')
          LEFT OUTER JOIN STOCOGCM OGCM
	           ON (CUST.GATE_CD = OGCM.GATE_CD
	           AND OGCM.BUYER_CD = #{ses.manageCd}
	           AND OGCM.DEL_FLAG = '0')
          LEFT OUTER JOIN STOCATCH ATCHOG
	           ON (OGCM.GATE_CD = ATCHOG.GATE_CD
	           AND OGCM.CI_FILE_NUM = ATCHOG.UUID
	           AND ATCHOG.DEL_FLAG = '0')
          LEFT OUTER JOIN STOCATCH ATCH
	           ON (CUST.GATE_CD = ATCH.GATE_CD
	           AND CUST.CI_FILE_NUM = ATCH.UUID
	           AND ATCH.DEL_FLAG = '0')
         WHERE CUST.GATE_CD = #{ses.gateCd}

         UNION ALL

        SELECT OGCM.CI_FILE_NUM AS CI_FILE_NUM
             , ATCH.FILE_PATH
             , ATCH.FILE_NM
             , ATCH.FILE_EXTENSION
          FROM STOCVNGL VNGL
          JOIN STOCCVUR CVUR
	           ON (VNGL.GATE_CD = CVUR.GATE_CD
	           AND VNGL.VENDOR_CD = CVUR.COMPANY_CD
	           AND CVUR.USER_ID = #{ses.userId}
	           AND VNGL.DEL_FLAG = '0')
          LEFT OUTER JOIN STOCOGCM OGCM
	           ON (OGCM.GATE_CD = VNGL.GATE_CD
	           AND OGCM.BUYER_CD = #{ses.manageCd}
	           AND OGCM.DEL_FLAG = '0')
          LEFT OUTER JOIN STOCATCH ATCH
	           ON (OGCM.GATE_CD = ATCH.GATE_CD
	           AND OGCM.CI_FILE_NUM = ATCH.UUID
	           AND OGCM.DEL_FLAG = '0')
         WHERE VNGL.GATE_CD = #{ses.gateCd}
    </select>

</mapper>